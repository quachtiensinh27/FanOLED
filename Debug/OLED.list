
OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017ac  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  0800194c  0800194c  0000294c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b14  08001b14  00003054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001b14  08001b14  00002b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001b1c  08001b1c  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b1c  08001b1c  00002b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001b20  08001b20  00002b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08001b24  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000054  08001b78  00003054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08001b78  000031d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002ffa  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000dd7  00000000  00000000  0000607e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002b8  00000000  00000000  00006e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001cf  00000000  00000000  00007110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015613  00000000  00000000  000072df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005c80  00000000  00000000  0001c8f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000835f7  00000000  00000000  00022572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a5b69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c24  00000000  00000000  000a5bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000a67d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000054 	.word	0x20000054
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001934 	.word	0x08001934

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000058 	.word	0x20000058
 80001dc:	08001934 	.word	0x08001934

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db0b      	blt.n	80002ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	f003 021f 	and.w	r2, r3, #31
 80002a8:	4907      	ldr	r1, [pc, #28]	@ (80002c8 <__NVIC_EnableIRQ+0x38>)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	095b      	lsrs	r3, r3, #5
 80002b0:	2001      	movs	r0, #1
 80002b2:	fa00 f202 	lsl.w	r2, r0, r2
 80002b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	e000e100 	.word	0xe000e100

080002cc <ADC_Init>:
volatile uint16_t adc_latest_value = 0;

/**
 * @brief  Khởi tạo ADC1 để đọc tín hiệu analog từ PA0 (kênh 0)
 */
void ADC_Init(void) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
    // Bật clock ADC1 (nằm trên bus APB2)
	RCC->APB2ENR |= (1 << 8);
 80002d0:	4b11      	ldr	r3, [pc, #68]	@ (8000318 <ADC_Init+0x4c>)
 80002d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002d4:	4a10      	ldr	r2, [pc, #64]	@ (8000318 <ADC_Init+0x4c>)
 80002d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002da:	6453      	str	r3, [r2, #68]	@ 0x44

    // Chọn kênh đầu tiên trong regular sequence (SQR3: rank 1 -> channel 0)
    ADC1->SQR3 = 0;
 80002dc:	4b0f      	ldr	r3, [pc, #60]	@ (800031c <ADC_Init+0x50>)
 80002de:	2200      	movs	r2, #0
 80002e0:	635a      	str	r2, [r3, #52]	@ 0x34

    // Cấu hình thời gian lấy mẫu cho kênh 0: 480 cycles (tối đa - SMPR2[2:0] = 0b111)
    ADC1->SMPR2 |= (7 << 0);
 80002e2:	4b0e      	ldr	r3, [pc, #56]	@ (800031c <ADC_Init+0x50>)
 80002e4:	691b      	ldr	r3, [r3, #16]
 80002e6:	4a0d      	ldr	r2, [pc, #52]	@ (800031c <ADC_Init+0x50>)
 80002e8:	f043 0307 	orr.w	r3, r3, #7
 80002ec:	6113      	str	r3, [r2, #16]

    // Bật ADC (ADON = 1)
    ADC1->CR2 |= (1 << 0);
 80002ee:	4b0b      	ldr	r3, [pc, #44]	@ (800031c <ADC_Init+0x50>)
 80002f0:	689b      	ldr	r3, [r3, #8]
 80002f2:	4a0a      	ldr	r2, [pc, #40]	@ (800031c <ADC_Init+0x50>)
 80002f4:	f043 0301 	orr.w	r3, r3, #1
 80002f8:	6093      	str	r3, [r2, #8]

    // Kích hoạt ngắt khi kết thúc chuyển đổi (End of Conversion interrupt)
    ADC1->CR1 |= (1 << 5);
 80002fa:	4b08      	ldr	r3, [pc, #32]	@ (800031c <ADC_Init+0x50>)
 80002fc:	685b      	ldr	r3, [r3, #4]
 80002fe:	4a07      	ldr	r2, [pc, #28]	@ (800031c <ADC_Init+0x50>)
 8000300:	f043 0320 	orr.w	r3, r3, #32
 8000304:	6053      	str	r3, [r2, #4]

    // Bật ngắt ADC trong NVIC
    NVIC_EnableIRQ(ADC_IRQn);
 8000306:	2012      	movs	r0, #18
 8000308:	f7ff ffc2 	bl	8000290 <__NVIC_EnableIRQ>

    // Delay nhỏ sau khi bật ADC (datasheet yêu cầu để ADC ổn định)
    Delay_ms(2);
 800030c:	2002      	movs	r0, #2
 800030e:	f000 fd39 	bl	8000d84 <Delay_ms>
}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	40023800 	.word	0x40023800
 800031c:	40012000 	.word	0x40012000

08000320 <ADC_IRQHandler>:

/**
 * @brief  Ngắt ADC: Đọc giá trị ADC khi chuyển đổi hoàn tất
 */
void ADC_IRQHandler(void) {
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
    // Kiểm tra cờ EOC (End of Conversion)
    if (ADC1->SR & (1 << 1)) {
 8000324:	4b07      	ldr	r3, [pc, #28]	@ (8000344 <ADC_IRQHandler+0x24>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	f003 0302 	and.w	r3, r3, #2
 800032c:	2b00      	cmp	r3, #0
 800032e:	d004      	beq.n	800033a <ADC_IRQHandler+0x1a>
        adc_latest_value = ADC1->DR;  // Đọc giá trị ADC, tự động clear cờ EOC
 8000330:	4b04      	ldr	r3, [pc, #16]	@ (8000344 <ADC_IRQHandler+0x24>)
 8000332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000334:	b29a      	uxth	r2, r3
 8000336:	4b04      	ldr	r3, [pc, #16]	@ (8000348 <ADC_IRQHandler+0x28>)
 8000338:	801a      	strh	r2, [r3, #0]
    }
}
 800033a:	bf00      	nop
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	40012000 	.word	0x40012000
 8000348:	20000070 	.word	0x20000070

0800034c <Mode_Update_From_ADC>:

/**
 * @brief  Chuyển đổi giá trị ADC sang mode hệ thống
 * @retval Mode hệ thống (0, 1, 2, 3)
 */
uint8_t Mode_Update_From_ADC(void) {
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
    uint16_t adc_value = adc_latest_value;
 8000352:	4b0e      	ldr	r3, [pc, #56]	@ (800038c <Mode_Update_From_ADC+0x40>)
 8000354:	881b      	ldrh	r3, [r3, #0]
 8000356:	80fb      	strh	r3, [r7, #6]

    if (adc_value < 200) return 0;
 8000358:	88fb      	ldrh	r3, [r7, #6]
 800035a:	2bc7      	cmp	r3, #199	@ 0xc7
 800035c:	d801      	bhi.n	8000362 <Mode_Update_From_ADC+0x16>
 800035e:	2300      	movs	r3, #0
 8000360:	e00e      	b.n	8000380 <Mode_Update_From_ADC+0x34>
    else if (adc_value < 1365) return 1;
 8000362:	88fb      	ldrh	r3, [r7, #6]
 8000364:	f240 5254 	movw	r2, #1364	@ 0x554
 8000368:	4293      	cmp	r3, r2
 800036a:	d801      	bhi.n	8000370 <Mode_Update_From_ADC+0x24>
 800036c:	2301      	movs	r3, #1
 800036e:	e007      	b.n	8000380 <Mode_Update_From_ADC+0x34>
    else if (adc_value < 2730) return 2;
 8000370:	88fb      	ldrh	r3, [r7, #6]
 8000372:	f640 22a9 	movw	r2, #2729	@ 0xaa9
 8000376:	4293      	cmp	r3, r2
 8000378:	d801      	bhi.n	800037e <Mode_Update_From_ADC+0x32>
 800037a:	2302      	movs	r3, #2
 800037c:	e000      	b.n	8000380 <Mode_Update_From_ADC+0x34>
    else return 3;
 800037e:	2303      	movs	r3, #3
}
 8000380:	4618      	mov	r0, r3
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr
 800038c:	20000070 	.word	0x20000070

08000390 <__NVIC_EnableIRQ>:
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800039a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	db0b      	blt.n	80003ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	f003 021f 	and.w	r2, r3, #31
 80003a8:	4907      	ldr	r1, [pc, #28]	@ (80003c8 <__NVIC_EnableIRQ+0x38>)
 80003aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ae:	095b      	lsrs	r3, r3, #5
 80003b0:	2001      	movs	r0, #1
 80003b2:	fa00 f202 	lsl.w	r2, r0, r2
 80003b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	e000e100 	.word	0xe000e100

080003cc <GPIO_EXTI_Init>:
 * - PB0: nút đếm ngược 20s
 * - PB1: nút đếm ngược 30s
 *
 * Kích hoạt falling edge, mask ngắt, map EXTI đến GPIO tương ứng.
 */
void GPIO_EXTI_Init(void) {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
    // Bật clock cho SYSCFG (để cấu hình EXTI)
	RCC->APB2ENR |= (1 << 14);
 80003d0:	4b14      	ldr	r3, [pc, #80]	@ (8000424 <GPIO_EXTI_Init+0x58>)
 80003d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003d4:	4a13      	ldr	r2, [pc, #76]	@ (8000424 <GPIO_EXTI_Init+0x58>)
 80003d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003da:	6453      	str	r3, [r2, #68]	@ 0x44

    // Map EXTI line đến GPIO
	SYSCFG->EXTICR[1] &= ~((0xF << 8) | (0xF << 12));
 80003dc:	4b12      	ldr	r3, [pc, #72]	@ (8000428 <GPIO_EXTI_Init+0x5c>)
 80003de:	68db      	ldr	r3, [r3, #12]
 80003e0:	4a11      	ldr	r2, [pc, #68]	@ (8000428 <GPIO_EXTI_Init+0x5c>)
 80003e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80003e6:	60d3      	str	r3, [r2, #12]
	SYSCFG->EXTICR[0] |= (1 << 0) | (1 << 4);
 80003e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000428 <GPIO_EXTI_Init+0x5c>)
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	4a0e      	ldr	r2, [pc, #56]	@ (8000428 <GPIO_EXTI_Init+0x5c>)
 80003ee:	f043 0311 	orr.w	r3, r3, #17
 80003f2:	6093      	str	r3, [r2, #8]

    // Unmask EXTI lines: Cho phép ngắt tại các chân 6, 7, 0, 1
    EXTI->IMR |= (1 << 6) | (1 << 7) | (1 << 0) | (1 << 1);
 80003f4:	4b0d      	ldr	r3, [pc, #52]	@ (800042c <GPIO_EXTI_Init+0x60>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a0c      	ldr	r2, [pc, #48]	@ (800042c <GPIO_EXTI_Init+0x60>)
 80003fa:	f043 03c3 	orr.w	r3, r3, #195	@ 0xc3
 80003fe:	6013      	str	r3, [r2, #0]

    // Kích hoạt falling edge trigger cho EXTI lines
    EXTI->FTSR |= (1 << 6) | (1 << 7) | (1 << 0) | (1 << 1);
 8000400:	4b0a      	ldr	r3, [pc, #40]	@ (800042c <GPIO_EXTI_Init+0x60>)
 8000402:	68db      	ldr	r3, [r3, #12]
 8000404:	4a09      	ldr	r2, [pc, #36]	@ (800042c <GPIO_EXTI_Init+0x60>)
 8000406:	f043 03c3 	orr.w	r3, r3, #195	@ 0xc3
 800040a:	60d3      	str	r3, [r2, #12]

    // Bật ngắt trong NVIC
    NVIC_EnableIRQ(EXTI9_5_IRQn);   // PA6, PA7 nằm trong EXTI9_5
 800040c:	2017      	movs	r0, #23
 800040e:	f7ff ffbf 	bl	8000390 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(EXTI0_IRQn);     // PB0
 8000412:	2006      	movs	r0, #6
 8000414:	f7ff ffbc 	bl	8000390 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(EXTI1_IRQn);     // PB1
 8000418:	2007      	movs	r0, #7
 800041a:	f7ff ffb9 	bl	8000390 <__NVIC_EnableIRQ>
}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	40023800 	.word	0x40023800
 8000428:	40013800 	.word	0x40013800
 800042c:	40013c00 	.word	0x40013c00

08000430 <EXTI9_5_IRQHandler>:


/**
 * @brief  Xử lý ngắt EXTI cho PA6 (ON/OFF) và PA7 (Countdown 10s)
 */
void EXTI9_5_IRQHandler(void) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
    static uint32_t last_press_time = 0;
    uint32_t current_time = GetTick();
 8000436:	f000 fcbd 	bl	8000db4 <GetTick>
 800043a:	6078      	str	r0, [r7, #4]

    // Chống dội phím phần mềm: bỏ qua nếu thời gian nhấn quá gần (<50ms)
    if ((current_time - last_press_time) < 50) {
 800043c:	4b2e      	ldr	r3, [pc, #184]	@ (80004f8 <EXTI9_5_IRQHandler+0xc8>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	687a      	ldr	r2, [r7, #4]
 8000442:	1ad3      	subs	r3, r2, r3
 8000444:	2b31      	cmp	r3, #49	@ 0x31
 8000446:	d806      	bhi.n	8000456 <EXTI9_5_IRQHandler+0x26>
        EXTI->PR |= (1 << 6) | (1 << 7);  // Xóa cờ ngắt
 8000448:	4b2c      	ldr	r3, [pc, #176]	@ (80004fc <EXTI9_5_IRQHandler+0xcc>)
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	4a2b      	ldr	r2, [pc, #172]	@ (80004fc <EXTI9_5_IRQHandler+0xcc>)
 800044e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000452:	6153      	str	r3, [r2, #20]
        return;
 8000454:	e04c      	b.n	80004f0 <EXTI9_5_IRQHandler+0xc0>
    }

    // ==== PA6: Nút ON/OFF hệ thống ====
    if (EXTI->PR & (1 << 6)) {
 8000456:	4b29      	ldr	r3, [pc, #164]	@ (80004fc <EXTI9_5_IRQHandler+0xcc>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800045e:	2b00      	cmp	r3, #0
 8000460:	d02e      	beq.n	80004c0 <EXTI9_5_IRQHandler+0x90>
        system_active ^= 1;  // Đảo trạng thái hệ thống
 8000462:	4b27      	ldr	r3, [pc, #156]	@ (8000500 <EXTI9_5_IRQHandler+0xd0>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	b2db      	uxtb	r3, r3
 8000468:	f083 0301 	eor.w	r3, r3, #1
 800046c:	b2da      	uxtb	r2, r3
 800046e:	4b24      	ldr	r3, [pc, #144]	@ (8000500 <EXTI9_5_IRQHandler+0xd0>)
 8000470:	701a      	strb	r2, [r3, #0]

        if (!system_active) {
 8000472:	4b23      	ldr	r3, [pc, #140]	@ (8000500 <EXTI9_5_IRQHandler+0xd0>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	b2db      	uxtb	r3, r3
 8000478:	2b00      	cmp	r3, #0
 800047a:	d10f      	bne.n	800049c <EXTI9_5_IRQHandler+0x6c>
            // Tắt hệ thống: dừng countdown, mode về 0, tắt LED, báo STOPPED
            countdown = 0;
 800047c:	4b21      	ldr	r3, [pc, #132]	@ (8000504 <EXTI9_5_IRQHandler+0xd4>)
 800047e:	2200      	movs	r2, #0
 8000480:	701a      	strb	r2, [r3, #0]
            mode = 0;
 8000482:	4b21      	ldr	r3, [pc, #132]	@ (8000508 <EXTI9_5_IRQHandler+0xd8>)
 8000484:	2200      	movs	r2, #0
 8000486:	701a      	strb	r2, [r3, #0]
            GPIOA->ODR &= ~((1 << 1) | (1 << 2) | (1 << 3));
 8000488:	4b20      	ldr	r3, [pc, #128]	@ (800050c <EXTI9_5_IRQHandler+0xdc>)
 800048a:	695b      	ldr	r3, [r3, #20]
 800048c:	4a1f      	ldr	r2, [pc, #124]	@ (800050c <EXTI9_5_IRQHandler+0xdc>)
 800048e:	f023 030e 	bic.w	r3, r3, #14
 8000492:	6153      	str	r3, [r2, #20]
            oled_state = 2;  // STOPPED
 8000494:	4b1e      	ldr	r3, [pc, #120]	@ (8000510 <EXTI9_5_IRQHandler+0xe0>)
 8000496:	2202      	movs	r2, #2
 8000498:	701a      	strb	r2, [r3, #0]
 800049a:	e008      	b.n	80004ae <EXTI9_5_IRQHandler+0x7e>
        } else {
            // Bật lại hệ thống: reset mode, countdown, báo INFINITE
            countdown = 0;
 800049c:	4b19      	ldr	r3, [pc, #100]	@ (8000504 <EXTI9_5_IRQHandler+0xd4>)
 800049e:	2200      	movs	r2, #0
 80004a0:	701a      	strb	r2, [r3, #0]
            mode = 1;
 80004a2:	4b19      	ldr	r3, [pc, #100]	@ (8000508 <EXTI9_5_IRQHandler+0xd8>)
 80004a4:	2201      	movs	r2, #1
 80004a6:	701a      	strb	r2, [r3, #0]
            oled_state = 3;  // INFINITE
 80004a8:	4b19      	ldr	r3, [pc, #100]	@ (8000510 <EXTI9_5_IRQHandler+0xe0>)
 80004aa:	2203      	movs	r2, #3
 80004ac:	701a      	strb	r2, [r3, #0]
        }

        button_pressed = 1;
 80004ae:	4b19      	ldr	r3, [pc, #100]	@ (8000514 <EXTI9_5_IRQHandler+0xe4>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
        EXTI->PR |= (1 << 6);  // Clear cờ ngắt
 80004b4:	4b11      	ldr	r3, [pc, #68]	@ (80004fc <EXTI9_5_IRQHandler+0xcc>)
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	4a10      	ldr	r2, [pc, #64]	@ (80004fc <EXTI9_5_IRQHandler+0xcc>)
 80004ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004be:	6153      	str	r3, [r2, #20]
    }

    // ==== PA7: Nút COUNTDOWN 10s ====
    if (EXTI->PR & (1 << 7)) {
 80004c0:	4b0e      	ldr	r3, [pc, #56]	@ (80004fc <EXTI9_5_IRQHandler+0xcc>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d00e      	beq.n	80004ea <EXTI9_5_IRQHandler+0xba>
        countdown = 10;
 80004cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000504 <EXTI9_5_IRQHandler+0xd4>)
 80004ce:	220a      	movs	r2, #10
 80004d0:	701a      	strb	r2, [r3, #0]
        oled_state = 1;        // COUNTDOWN mode
 80004d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000510 <EXTI9_5_IRQHandler+0xe0>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	701a      	strb	r2, [r3, #0]
        button_pressed = 1;
 80004d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000514 <EXTI9_5_IRQHandler+0xe4>)
 80004da:	2201      	movs	r2, #1
 80004dc:	701a      	strb	r2, [r3, #0]
        EXTI->PR |= (1 << 7);  // Clear cờ ngắt
 80004de:	4b07      	ldr	r3, [pc, #28]	@ (80004fc <EXTI9_5_IRQHandler+0xcc>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	4a06      	ldr	r2, [pc, #24]	@ (80004fc <EXTI9_5_IRQHandler+0xcc>)
 80004e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004e8:	6153      	str	r3, [r2, #20]
    }

    last_press_time = current_time;
 80004ea:	4a03      	ldr	r2, [pc, #12]	@ (80004f8 <EXTI9_5_IRQHandler+0xc8>)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	6013      	str	r3, [r2, #0]
}
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000074 	.word	0x20000074
 80004fc:	40013c00 	.word	0x40013c00
 8000500:	20000001 	.word	0x20000001
 8000504:	20000072 	.word	0x20000072
 8000508:	20000000 	.word	0x20000000
 800050c:	40020000 	.word	0x40020000
 8000510:	20000002 	.word	0x20000002
 8000514:	20000073 	.word	0x20000073

08000518 <EXTI0_IRQHandler>:


/**
 * @brief  Xử lý ngắt EXTI cho PB0 (COUNTDOWN 20s)
 */
void EXTI0_IRQHandler(void) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
    static uint32_t last_press_time = 0;
    uint32_t current_time = GetTick();
 800051e:	f000 fc49 	bl	8000db4 <GetTick>
 8000522:	6078      	str	r0, [r7, #4]

    if ((current_time - last_press_time) > 50) {
 8000524:	4b0d      	ldr	r3, [pc, #52]	@ (800055c <EXTI0_IRQHandler+0x44>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	1ad3      	subs	r3, r2, r3
 800052c:	2b32      	cmp	r3, #50	@ 0x32
 800052e:	d90b      	bls.n	8000548 <EXTI0_IRQHandler+0x30>
        countdown = 20;
 8000530:	4b0b      	ldr	r3, [pc, #44]	@ (8000560 <EXTI0_IRQHandler+0x48>)
 8000532:	2214      	movs	r2, #20
 8000534:	701a      	strb	r2, [r3, #0]
        oled_state = 1;         // COUNTDOWN mode
 8000536:	4b0b      	ldr	r3, [pc, #44]	@ (8000564 <EXTI0_IRQHandler+0x4c>)
 8000538:	2201      	movs	r2, #1
 800053a:	701a      	strb	r2, [r3, #0]
        button_pressed = 1;
 800053c:	4b0a      	ldr	r3, [pc, #40]	@ (8000568 <EXTI0_IRQHandler+0x50>)
 800053e:	2201      	movs	r2, #1
 8000540:	701a      	strb	r2, [r3, #0]
        last_press_time = current_time;
 8000542:	4a06      	ldr	r2, [pc, #24]	@ (800055c <EXTI0_IRQHandler+0x44>)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	6013      	str	r3, [r2, #0]
    }

    EXTI->PR |= (1 << 0);       // Clear cờ ngắt
 8000548:	4b08      	ldr	r3, [pc, #32]	@ (800056c <EXTI0_IRQHandler+0x54>)
 800054a:	695b      	ldr	r3, [r3, #20]
 800054c:	4a07      	ldr	r2, [pc, #28]	@ (800056c <EXTI0_IRQHandler+0x54>)
 800054e:	f043 0301 	orr.w	r3, r3, #1
 8000552:	6153      	str	r3, [r2, #20]
}
 8000554:	bf00      	nop
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000078 	.word	0x20000078
 8000560:	20000072 	.word	0x20000072
 8000564:	20000002 	.word	0x20000002
 8000568:	20000073 	.word	0x20000073
 800056c:	40013c00 	.word	0x40013c00

08000570 <EXTI1_IRQHandler>:


/**
 * @brief  Xử lý ngắt EXTI cho PB1 (COUNTDOWN 30s)
 */
void EXTI1_IRQHandler(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
    static uint32_t last_press_time = 0;
    uint32_t current_time = GetTick();
 8000576:	f000 fc1d 	bl	8000db4 <GetTick>
 800057a:	6078      	str	r0, [r7, #4]

    if ((current_time - last_press_time) > 50) {
 800057c:	4b0d      	ldr	r3, [pc, #52]	@ (80005b4 <EXTI1_IRQHandler+0x44>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	1ad3      	subs	r3, r2, r3
 8000584:	2b32      	cmp	r3, #50	@ 0x32
 8000586:	d90b      	bls.n	80005a0 <EXTI1_IRQHandler+0x30>
        countdown = 30;
 8000588:	4b0b      	ldr	r3, [pc, #44]	@ (80005b8 <EXTI1_IRQHandler+0x48>)
 800058a:	221e      	movs	r2, #30
 800058c:	701a      	strb	r2, [r3, #0]
        oled_state = 1;         // COUNTDOWN mode
 800058e:	4b0b      	ldr	r3, [pc, #44]	@ (80005bc <EXTI1_IRQHandler+0x4c>)
 8000590:	2201      	movs	r2, #1
 8000592:	701a      	strb	r2, [r3, #0]
        button_pressed = 1;
 8000594:	4b0a      	ldr	r3, [pc, #40]	@ (80005c0 <EXTI1_IRQHandler+0x50>)
 8000596:	2201      	movs	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]
        last_press_time = current_time;
 800059a:	4a06      	ldr	r2, [pc, #24]	@ (80005b4 <EXTI1_IRQHandler+0x44>)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6013      	str	r3, [r2, #0]
    }

    EXTI->PR |= (1 << 1);       // Clear cờ ngắt
 80005a0:	4b08      	ldr	r3, [pc, #32]	@ (80005c4 <EXTI1_IRQHandler+0x54>)
 80005a2:	695b      	ldr	r3, [r3, #20]
 80005a4:	4a07      	ldr	r2, [pc, #28]	@ (80005c4 <EXTI1_IRQHandler+0x54>)
 80005a6:	f043 0302 	orr.w	r3, r3, #2
 80005aa:	6153      	str	r3, [r2, #20]
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	2000007c 	.word	0x2000007c
 80005b8:	20000072 	.word	0x20000072
 80005bc:	20000002 	.word	0x20000002
 80005c0:	20000073 	.word	0x20000073
 80005c4:	40013c00 	.word	0x40013c00

080005c8 <GPIO_Init_LED>:
 * Chân PA1: LED1
 * Chân PA2: LED2
 * Chân PA3: LED3
 * Mode: Output push-pull, tốc độ thấp, không dùng pull-up/pull-down.
 */
void GPIO_Init_LED(void) {
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
    // Bật clock cho port GPIOA
	RCC->AHB1ENR |= (1 << 0);
 80005cc:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <GPIO_Init_LED+0x4c>)
 80005ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d0:	4a10      	ldr	r2, [pc, #64]	@ (8000614 <GPIO_Init_LED+0x4c>)
 80005d2:	f043 0301 	orr.w	r3, r3, #1
 80005d6:	6313      	str	r3, [r2, #48]	@ 0x30

    // Cấu hình mode: PA1, PA2, PA3 thành output (MODER = 0b01)
    GPIOA->MODER &= ~((3 << (1 * 2)) | (3 << (2 * 2)) | (3 << (3 * 2)));  // Xóa bit cũ
 80005d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <GPIO_Init_LED+0x50>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000618 <GPIO_Init_LED+0x50>)
 80005de:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 80005e2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1 << (1 * 2)) | (1 << (2 * 2)) | (1 << (3 * 2));     // Set output mode
 80005e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <GPIO_Init_LED+0x50>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000618 <GPIO_Init_LED+0x50>)
 80005ea:	f043 0354 	orr.w	r3, r3, #84	@ 0x54
 80005ee:	6013      	str	r3, [r2, #0]

    // Output type: push-pull
    GPIOA->OTYPER &= ~((1 << 1) | (1 << 2) | (1 << 3));
 80005f0:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <GPIO_Init_LED+0x50>)
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	4a08      	ldr	r2, [pc, #32]	@ (8000618 <GPIO_Init_LED+0x50>)
 80005f6:	f023 030e 	bic.w	r3, r3, #14
 80005fa:	6053      	str	r3, [r2, #4]

    // Tốc độ output: low speed
    GPIOA->OSPEEDR &= ~((3 << (1 * 2)) | (3 << (2 * 2)) | (3 << (3 * 2)));
 80005fc:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <GPIO_Init_LED+0x50>)
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	4a05      	ldr	r2, [pc, #20]	@ (8000618 <GPIO_Init_LED+0x50>)
 8000602:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8000606:	6093      	str	r3, [r2, #8]
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800
 8000618:	40020000 	.word	0x40020000

0800061c <GPIO_Init_I2C>:
/**
 * @brief  Khởi tạo GPIO cho I2C1 (PB8: SCL, PB9: SDA)
 *
 * I2C dùng alternate function AF4. Output open-drain, có pull-up nội.
 */
void GPIO_Init_I2C(void) {
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
    // Bật clock cho port GPIOB
	RCC->AHB1ENR |= (1 << 1);
 8000620:	4b17      	ldr	r3, [pc, #92]	@ (8000680 <GPIO_Init_I2C+0x64>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000624:	4a16      	ldr	r2, [pc, #88]	@ (8000680 <GPIO_Init_I2C+0x64>)
 8000626:	f043 0302 	orr.w	r3, r3, #2
 800062a:	6313      	str	r3, [r2, #48]	@ 0x30

    // Cấu hình mode: Alternate Function (MODER = 0b10)
    GPIOB->MODER &= ~(0xF << (8 * 2));
 800062c:	4b15      	ldr	r3, [pc, #84]	@ (8000684 <GPIO_Init_I2C+0x68>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a14      	ldr	r2, [pc, #80]	@ (8000684 <GPIO_Init_I2C+0x68>)
 8000632:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000636:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (0xA << (8 * 2));  // PB8, PB9 đều AF mode
 8000638:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <GPIO_Init_I2C+0x68>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a11      	ldr	r2, [pc, #68]	@ (8000684 <GPIO_Init_I2C+0x68>)
 800063e:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8000642:	6013      	str	r3, [r2, #0]

    // Output type: open-drain (chuẩn I2C)
    GPIOB->OTYPER |= (0x3 << 8);
 8000644:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <GPIO_Init_I2C+0x68>)
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	4a0e      	ldr	r2, [pc, #56]	@ (8000684 <GPIO_Init_I2C+0x68>)
 800064a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800064e:	6053      	str	r3, [r2, #4]

    // Tốc độ: very high speed (cải thiện timing rise/fall I2C)
    GPIOB->OSPEEDR |= (0xF << (8 * 2));
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <GPIO_Init_I2C+0x68>)
 8000652:	689b      	ldr	r3, [r3, #8]
 8000654:	4a0b      	ldr	r2, [pc, #44]	@ (8000684 <GPIO_Init_I2C+0x68>)
 8000656:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 800065a:	6093      	str	r3, [r2, #8]

    // Pull-up: kích hoạt pull-up nội bộ cho SDA và SCL
    GPIOB->PUPDR |= (0x5 << (8 * 2));
 800065c:	4b09      	ldr	r3, [pc, #36]	@ (8000684 <GPIO_Init_I2C+0x68>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	4a08      	ldr	r2, [pc, #32]	@ (8000684 <GPIO_Init_I2C+0x68>)
 8000662:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8000666:	60d3      	str	r3, [r2, #12]

    // Alternate Function 4 (AF4) cho I2C trên PB8 & PB9
    GPIOB->AFR[1] |= (0x44 << ((8 - 8) * 4));
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <GPIO_Init_I2C+0x68>)
 800066a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800066c:	4a05      	ldr	r2, [pc, #20]	@ (8000684 <GPIO_Init_I2C+0x68>)
 800066e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8000672:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40020400 	.word	0x40020400

08000688 <GPIO_Init_ADC>:
/**
 * @brief  Khởi tạo GPIO cho ADC (PA0)
 *
 * PA0 được cấu hình chế độ analog input.
 */
void GPIO_Init_ADC(void) {
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
    // Bật clock cho port GPIOA
	RCC->AHB1ENR |= (1 << 0);
 800068c:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <GPIO_Init_ADC+0x28>)
 800068e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000690:	4a07      	ldr	r2, [pc, #28]	@ (80006b0 <GPIO_Init_ADC+0x28>)
 8000692:	f043 0301 	orr.w	r3, r3, #1
 8000696:	6313      	str	r3, [r2, #48]	@ 0x30

    // Cấu hình mode: analog (MODER = 0b11)
    GPIOA->MODER |= (3 << (0 * 2));
 8000698:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <GPIO_Init_ADC+0x2c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a05      	ldr	r2, [pc, #20]	@ (80006b4 <GPIO_Init_ADC+0x2c>)
 800069e:	f043 0303 	orr.w	r3, r3, #3
 80006a2:	6013      	str	r3, [r2, #0]
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020000 	.word	0x40020000

080006b8 <GPIO_Init_EXTI>:
/**
 * @brief  Khởi tạo GPIO cho EXTI (PA6, PA7, PB0, PB1)
 *
 * Các chân ngắt ngoài hoạt động ở input mode + pull-up nội.
 */
void GPIO_Init_EXTI(void) {
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
    // Bật clock cho GPIOA & GPIOB
	RCC->AHB1ENR |= (1 << 0) | (1 << 1);
 80006bc:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <GPIO_Init_EXTI+0x4c>)
 80006be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c0:	4a10      	ldr	r2, [pc, #64]	@ (8000704 <GPIO_Init_EXTI+0x4c>)
 80006c2:	f043 0303 	orr.w	r3, r3, #3
 80006c6:	6313      	str	r3, [r2, #48]	@ 0x30

    // Cấu hình PA6, PA7 và PB0, PB1 là input (MODER = 0b00)
    GPIOA->MODER &= ~((3 << (6 * 2)) | (3 << (7 * 2)));
 80006c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <GPIO_Init_EXTI+0x50>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a0e      	ldr	r2, [pc, #56]	@ (8000708 <GPIO_Init_EXTI+0x50>)
 80006ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80006d2:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~((3 << (0 * 2)) | (3 << (1 * 2)));
 80006d4:	4b0d      	ldr	r3, [pc, #52]	@ (800070c <GPIO_Init_EXTI+0x54>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a0c      	ldr	r2, [pc, #48]	@ (800070c <GPIO_Init_EXTI+0x54>)
 80006da:	f023 030f 	bic.w	r3, r3, #15
 80006de:	6013      	str	r3, [r2, #0]

    // Kích hoạt pull-up cho các nút nhấn
    GPIOA->PUPDR |= (1 << (6 * 2)) | (1 << (7 * 2));
 80006e0:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <GPIO_Init_EXTI+0x50>)
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	4a08      	ldr	r2, [pc, #32]	@ (8000708 <GPIO_Init_EXTI+0x50>)
 80006e6:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 80006ea:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= (1 << (0 * 2)) | (1 << (1 * 2));
 80006ec:	4b07      	ldr	r3, [pc, #28]	@ (800070c <GPIO_Init_EXTI+0x54>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	4a06      	ldr	r2, [pc, #24]	@ (800070c <GPIO_Init_EXTI+0x54>)
 80006f2:	f043 0305 	orr.w	r3, r3, #5
 80006f6:	60d3      	str	r3, [r2, #12]
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40020000 	.word	0x40020000
 800070c:	40020400 	.word	0x40020400

08000710 <GPIO_Init_PWM>:
/**
 * @brief  Khởi tạo GPIO cho PWM (PB7: TIM4_CH2)
 *
 * TIM4_CH2 dùng alternate function AF2.
 */
void GPIO_Init_PWM(void) {
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
    // Bật clock cho GPIOB
	RCC->AHB1ENR |= (1 << 1);
 8000714:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <GPIO_Init_PWM+0x40>)
 8000716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000718:	4a0d      	ldr	r2, [pc, #52]	@ (8000750 <GPIO_Init_PWM+0x40>)
 800071a:	f043 0302 	orr.w	r3, r3, #2
 800071e:	6313      	str	r3, [r2, #48]	@ 0x30

    // Cấu hình PB7 thành Alternate Function mode
    GPIOB->MODER &= ~(3 << (7 * 2));
 8000720:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <GPIO_Init_PWM+0x44>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a0b      	ldr	r2, [pc, #44]	@ (8000754 <GPIO_Init_PWM+0x44>)
 8000726:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800072a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (2 << (7 * 2));
 800072c:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <GPIO_Init_PWM+0x44>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a08      	ldr	r2, [pc, #32]	@ (8000754 <GPIO_Init_PWM+0x44>)
 8000732:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000736:	6013      	str	r3, [r2, #0]

    // Chọn AF2 cho TIM4_CH2
    GPIOB->AFR[0] |= (2 << (7 * 4));
 8000738:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <GPIO_Init_PWM+0x44>)
 800073a:	6a1b      	ldr	r3, [r3, #32]
 800073c:	4a05      	ldr	r2, [pc, #20]	@ (8000754 <GPIO_Init_PWM+0x44>)
 800073e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000742:	6213      	str	r3, [r2, #32]
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40020400 	.word	0x40020400

08000758 <GPIO_Init_All>:

/**
 * @brief  Khởi tạo toàn bộ GPIO hệ thống
 */
void GPIO_Init_All(void) {
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
    GPIO_Init_LED();
 800075c:	f7ff ff34 	bl	80005c8 <GPIO_Init_LED>
    GPIO_Init_I2C();
 8000760:	f7ff ff5c 	bl	800061c <GPIO_Init_I2C>
    GPIO_Init_ADC();
 8000764:	f7ff ff90 	bl	8000688 <GPIO_Init_ADC>
    GPIO_Init_EXTI();
 8000768:	f7ff ffa6 	bl	80006b8 <GPIO_Init_EXTI>
    GPIO_Init_PWM();
 800076c:	f7ff ffd0 	bl	8000710 <GPIO_Init_PWM>
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}

08000774 <I2C1_Init>:
 *
 * Thông số cài đặt:
 * - Clock APB1: 16 MHz
 * - I2C speed: ~100 kHz (standard mode)
 */
void I2C1_Init(void) {
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
    // Bật clock cho I2C1 (bus APB1)
	RCC->APB1ENR |= (1 << 21);
 8000778:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <I2C1_Init+0x44>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077c:	4a0e      	ldr	r2, [pc, #56]	@ (80007b8 <I2C1_Init+0x44>)
 800077e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000782:	6413      	str	r3, [r2, #64]	@ 0x40

    // Đảm bảo tắt I2C trước khi cấu hình
	I2C1->CR1 &= ~(1 << 0);
 8000784:	4b0d      	ldr	r3, [pc, #52]	@ (80007bc <I2C1_Init+0x48>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a0c      	ldr	r2, [pc, #48]	@ (80007bc <I2C1_Init+0x48>)
 800078a:	f023 0301 	bic.w	r3, r3, #1
 800078e:	6013      	str	r3, [r2, #0]

    // Cấu hình tần số (CR2): đơn vị MHz (16 MHz)
    I2C1->CR2 = 16;
 8000790:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <I2C1_Init+0x48>)
 8000792:	2210      	movs	r2, #16
 8000794:	605a      	str	r2, [r3, #4]

    // Cấu hình CCR (chu kỳ clock): CCR = 80 → SCL ~100kHz (theo datasheet)
    I2C1->CCR = 80;
 8000796:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <I2C1_Init+0x48>)
 8000798:	2250      	movs	r2, #80	@ 0x50
 800079a:	61da      	str	r2, [r3, #28]

    // Cấu hình TRISE: (max rise time) → 17 (theo công thức datasheet)
    I2C1->TRISE = 17;
 800079c:	4b07      	ldr	r3, [pc, #28]	@ (80007bc <I2C1_Init+0x48>)
 800079e:	2211      	movs	r2, #17
 80007a0:	621a      	str	r2, [r3, #32]

    // Bật lại I2C sau khi cấu hình xong
    I2C1->CR1 |= (1 << 0);
 80007a2:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <I2C1_Init+0x48>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a05      	ldr	r2, [pc, #20]	@ (80007bc <I2C1_Init+0x48>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6013      	str	r3, [r2, #0]
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40005400 	.word	0x40005400

080007c0 <I2C_WriteByte>:
 * @param  addr  Địa chỉ thiết bị I2C (7-bit, đã bỏ bit R/W)
 * @param  reg   Giá trị control byte (SSD1306: 0x00 = command, 0x40 = data)
 * @param  data  Dữ liệu cần gửi
 * @retval 1 nếu thành công, 0 nếu timeout
 */
uint8_t I2C_WriteByte(uint8_t addr, uint8_t reg, uint8_t data) {
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
 80007ca:	460b      	mov	r3, r1
 80007cc:	71bb      	strb	r3, [r7, #6]
 80007ce:	4613      	mov	r3, r2
 80007d0:	717b      	strb	r3, [r7, #5]
    uint32_t timeout;

    // Bắt đầu truyền (generate START condition)
    I2C1->CR1 |= (1 << 8);
 80007d2:	4b41      	ldr	r3, [pc, #260]	@ (80008d8 <I2C_WriteByte+0x118>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a40      	ldr	r2, [pc, #256]	@ (80008d8 <I2C_WriteByte+0x118>)
 80007d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007dc:	6013      	str	r3, [r2, #0]

    timeout = I2C_TIMEOUT;
 80007de:	4b3f      	ldr	r3, [pc, #252]	@ (80008dc <I2C_WriteByte+0x11c>)
 80007e0:	60fb      	str	r3, [r7, #12]
    while (!(I2C1->SR1 & (1 << 0)) && --timeout); // Chờ gửi xong START
 80007e2:	bf00      	nop
 80007e4:	4b3c      	ldr	r3, [pc, #240]	@ (80008d8 <I2C_WriteByte+0x118>)
 80007e6:	695b      	ldr	r3, [r3, #20]
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d105      	bne.n	80007fc <I2C_WriteByte+0x3c>
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1f3      	bne.n	80007e4 <I2C_WriteByte+0x24>
    if (!timeout) return 0;
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d101      	bne.n	8000806 <I2C_WriteByte+0x46>
 8000802:	2300      	movs	r3, #0
 8000804:	e062      	b.n	80008cc <I2C_WriteByte+0x10c>

    // Gửi địa chỉ thiết bị
    I2C1->DR = addr << 1;  // 7-bit address, bit R/W = 0 (write)
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	4a33      	ldr	r2, [pc, #204]	@ (80008d8 <I2C_WriteByte+0x118>)
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	6113      	str	r3, [r2, #16]
    timeout = I2C_TIMEOUT;
 800080e:	4b33      	ldr	r3, [pc, #204]	@ (80008dc <I2C_WriteByte+0x11c>)
 8000810:	60fb      	str	r3, [r7, #12]
    while (!(I2C1->SR1 & (1 << 1)) && --timeout); // Chờ ACK
 8000812:	bf00      	nop
 8000814:	4b30      	ldr	r3, [pc, #192]	@ (80008d8 <I2C_WriteByte+0x118>)
 8000816:	695b      	ldr	r3, [r3, #20]
 8000818:	f003 0302 	and.w	r3, r3, #2
 800081c:	2b00      	cmp	r3, #0
 800081e:	d105      	bne.n	800082c <I2C_WriteByte+0x6c>
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	3b01      	subs	r3, #1
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1f3      	bne.n	8000814 <I2C_WriteByte+0x54>
    if (!timeout) return 0;
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d101      	bne.n	8000836 <I2C_WriteByte+0x76>
 8000832:	2300      	movs	r3, #0
 8000834:	e04a      	b.n	80008cc <I2C_WriteByte+0x10c>

    // Đọc SR2 để clear cờ ADDR (bắt buộc khi dùng polling)
    (void)I2C1->SR2;
 8000836:	4b28      	ldr	r3, [pc, #160]	@ (80008d8 <I2C_WriteByte+0x118>)
 8000838:	699b      	ldr	r3, [r3, #24]

    // Gửi control byte (command/data selector)
    timeout = I2C_TIMEOUT;
 800083a:	4b28      	ldr	r3, [pc, #160]	@ (80008dc <I2C_WriteByte+0x11c>)
 800083c:	60fb      	str	r3, [r7, #12]
    while (!(I2C1->SR1 & (1 << 7)) && --timeout);
 800083e:	bf00      	nop
 8000840:	4b25      	ldr	r3, [pc, #148]	@ (80008d8 <I2C_WriteByte+0x118>)
 8000842:	695b      	ldr	r3, [r3, #20]
 8000844:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000848:	2b00      	cmp	r3, #0
 800084a:	d105      	bne.n	8000858 <I2C_WriteByte+0x98>
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	3b01      	subs	r3, #1
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1f3      	bne.n	8000840 <I2C_WriteByte+0x80>
    if (!timeout) return 0;
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d101      	bne.n	8000862 <I2C_WriteByte+0xa2>
 800085e:	2300      	movs	r3, #0
 8000860:	e034      	b.n	80008cc <I2C_WriteByte+0x10c>
    I2C1->DR = reg;
 8000862:	4a1d      	ldr	r2, [pc, #116]	@ (80008d8 <I2C_WriteByte+0x118>)
 8000864:	79bb      	ldrb	r3, [r7, #6]
 8000866:	6113      	str	r3, [r2, #16]

    // Gửi dữ liệu chính
    timeout = I2C_TIMEOUT;
 8000868:	4b1c      	ldr	r3, [pc, #112]	@ (80008dc <I2C_WriteByte+0x11c>)
 800086a:	60fb      	str	r3, [r7, #12]
    while (!(I2C1->SR1 & (1 << 7)) && --timeout);
 800086c:	bf00      	nop
 800086e:	4b1a      	ldr	r3, [pc, #104]	@ (80008d8 <I2C_WriteByte+0x118>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000876:	2b00      	cmp	r3, #0
 8000878:	d105      	bne.n	8000886 <I2C_WriteByte+0xc6>
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	3b01      	subs	r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d1f3      	bne.n	800086e <I2C_WriteByte+0xae>
    if (!timeout) return 0;
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d101      	bne.n	8000890 <I2C_WriteByte+0xd0>
 800088c:	2300      	movs	r3, #0
 800088e:	e01d      	b.n	80008cc <I2C_WriteByte+0x10c>
    I2C1->DR = data;
 8000890:	4a11      	ldr	r2, [pc, #68]	@ (80008d8 <I2C_WriteByte+0x118>)
 8000892:	797b      	ldrb	r3, [r7, #5]
 8000894:	6113      	str	r3, [r2, #16]

    // Chờ hoàn tất truyền toàn bộ byte
    timeout = I2C_TIMEOUT;
 8000896:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <I2C_WriteByte+0x11c>)
 8000898:	60fb      	str	r3, [r7, #12]
    while (!(I2C1->SR1 & (1 << 2)) && --timeout);
 800089a:	bf00      	nop
 800089c:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <I2C_WriteByte+0x118>)
 800089e:	695b      	ldr	r3, [r3, #20]
 80008a0:	f003 0304 	and.w	r3, r3, #4
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d105      	bne.n	80008b4 <I2C_WriteByte+0xf4>
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d1f3      	bne.n	800089c <I2C_WriteByte+0xdc>
    if (!timeout) return 0;
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d101      	bne.n	80008be <I2C_WriteByte+0xfe>
 80008ba:	2300      	movs	r3, #0
 80008bc:	e006      	b.n	80008cc <I2C_WriteByte+0x10c>

    // Kết thúc truyền (generate STOP condition)
    I2C1->CR1 |= (1 << 9);
 80008be:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <I2C_WriteByte+0x118>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a05      	ldr	r2, [pc, #20]	@ (80008d8 <I2C_WriteByte+0x118>)
 80008c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008c8:	6013      	str	r3, [r2, #0]

    return 1;  // Thành công
 80008ca:	2301      	movs	r3, #1
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	40005400 	.word	0x40005400
 80008dc:	000186a0 	.word	0x000186a0

080008e0 <LED_Update>:
 * - Nếu không thì tắt toàn bộ LED.
 *
 * @param  current_mode  Mode hiện tại (0~3)
 * @param  countdown     Thời gian còn lại (s)
 */
void LED_Update(uint8_t current_mode, uint8_t countdown) {
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	460a      	mov	r2, r1
 80008ea:	71fb      	strb	r3, [r7, #7]
 80008ec:	4613      	mov	r3, r2
 80008ee:	71bb      	strb	r3, [r7, #6]
    // Tắt toàn bộ LED trước mỗi lần cập nhật (reset bit PA1, PA2, PA3)
    GPIOA->ODR &= ~((1 << 1) | (1 << 2) | (1 << 3));
 80008f0:	4b1a      	ldr	r3, [pc, #104]	@ (800095c <LED_Update+0x7c>)
 80008f2:	695b      	ldr	r3, [r3, #20]
 80008f4:	4a19      	ldr	r2, [pc, #100]	@ (800095c <LED_Update+0x7c>)
 80008f6:	f023 030e 	bic.w	r3, r3, #14
 80008fa:	6153      	str	r3, [r2, #20]

    // Nếu không trong chế độ sáng LED thì thoát
    if (countdown == 0 && oled_state != 3) return;
 80008fc:	79bb      	ldrb	r3, [r7, #6]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d104      	bne.n	800090c <LED_Update+0x2c>
 8000902:	4b17      	ldr	r3, [pc, #92]	@ (8000960 <LED_Update+0x80>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2b03      	cmp	r3, #3
 800090a:	d11e      	bne.n	800094a <LED_Update+0x6a>

    // Bật LED tương ứng với mode
    switch (current_mode) {
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	2b03      	cmp	r3, #3
 8000910:	d014      	beq.n	800093c <LED_Update+0x5c>
 8000912:	2b03      	cmp	r3, #3
 8000914:	dc1b      	bgt.n	800094e <LED_Update+0x6e>
 8000916:	2b01      	cmp	r3, #1
 8000918:	d002      	beq.n	8000920 <LED_Update+0x40>
 800091a:	2b02      	cmp	r3, #2
 800091c:	d007      	beq.n	800092e <LED_Update+0x4e>
        case 1: GPIOA->ODR |= (1 << 1); break;  // Mode 1 → LED1 (PA1)
        case 2: GPIOA->ODR |= (1 << 2); break;  // Mode 2 → LED2 (PA2)
        case 3: GPIOA->ODR |= (1 << 3); break;  // Mode 3 → LED3 (PA3)
        default: break;                         // Mode 0: không bật LED
 800091e:	e016      	b.n	800094e <LED_Update+0x6e>
        case 1: GPIOA->ODR |= (1 << 1); break;  // Mode 1 → LED1 (PA1)
 8000920:	4b0e      	ldr	r3, [pc, #56]	@ (800095c <LED_Update+0x7c>)
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	4a0d      	ldr	r2, [pc, #52]	@ (800095c <LED_Update+0x7c>)
 8000926:	f043 0302 	orr.w	r3, r3, #2
 800092a:	6153      	str	r3, [r2, #20]
 800092c:	e010      	b.n	8000950 <LED_Update+0x70>
        case 2: GPIOA->ODR |= (1 << 2); break;  // Mode 2 → LED2 (PA2)
 800092e:	4b0b      	ldr	r3, [pc, #44]	@ (800095c <LED_Update+0x7c>)
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	4a0a      	ldr	r2, [pc, #40]	@ (800095c <LED_Update+0x7c>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	6153      	str	r3, [r2, #20]
 800093a:	e009      	b.n	8000950 <LED_Update+0x70>
        case 3: GPIOA->ODR |= (1 << 3); break;  // Mode 3 → LED3 (PA3)
 800093c:	4b07      	ldr	r3, [pc, #28]	@ (800095c <LED_Update+0x7c>)
 800093e:	695b      	ldr	r3, [r3, #20]
 8000940:	4a06      	ldr	r2, [pc, #24]	@ (800095c <LED_Update+0x7c>)
 8000942:	f043 0308 	orr.w	r3, r3, #8
 8000946:	6153      	str	r3, [r2, #20]
 8000948:	e002      	b.n	8000950 <LED_Update+0x70>
    if (countdown == 0 && oled_state != 3) return;
 800094a:	bf00      	nop
 800094c:	e000      	b.n	8000950 <LED_Update+0x70>
        default: break;                         // Mode 0: không bật LED
 800094e:	bf00      	nop
    }
}
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40020000 	.word	0x40020000
 8000960:	20000002 	.word	0x20000002

08000964 <main>:


/* ========================== [II] FUNC FILE ============================ */

int main(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
    // Khởi tạo delay bằng SysTick (1ms)
    SysTick_Init();
 8000968:	f000 f9ea 	bl	8000d40 <SysTick_Init>

    // Khởi tạo toàn bộ GPIO liên quan
    GPIO_Init_All();
 800096c:	f7ff fef4 	bl	8000758 <GPIO_Init_All>

    // Khởi tạo ngoại vi phần cứng
    I2C1_Init();        // OLED giao tiếp I2C1
 8000970:	f7ff ff00 	bl	8000774 <I2C1_Init>
    ADC_Init();         // Khởi tạo ADC1 đọc cảm biến/biến trở
 8000974:	f7ff fcaa 	bl	80002cc <ADC_Init>
    PWM_Init();         // Khởi tạo TIM4 PWM đầu ra
 8000978:	f000 f94e 	bl	8000c18 <PWM_Init>
    GPIO_EXTI_Init();   // Cấu hình EXTI ngắt ngoài từ nút nhấn
 800097c:	f7ff fd26 	bl	80003cc <GPIO_EXTI_Init>
    TIM3_Init();        // Khởi tạo timer 100ms điều khiển chính
 8000980:	f000 fa54 	bl	8000e2c <TIM3_Init>

    // Thiết lập trạng thái ban đầu của hệ thống
    mode = 1;               // Chế độ mặc định
 8000984:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <main+0x5c>)
 8000986:	2201      	movs	r2, #1
 8000988:	701a      	strb	r2, [r3, #0]
    countdown = 0;          // Không đếm khi bắt đầu
 800098a:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <main+0x60>)
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]
    button_pressed = 0;     // Không có nút nào được nhấn
 8000990:	4b0d      	ldr	r3, [pc, #52]	@ (80009c8 <main+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	701a      	strb	r2, [r3, #0]
    oled_state = 3;         // Chế độ mặc định: INFINITE MODE
 8000996:	4b0d      	ldr	r3, [pc, #52]	@ (80009cc <main+0x68>)
 8000998:	2203      	movs	r2, #3
 800099a:	701a      	strb	r2, [r3, #0]
    system_active = 1;      // Hệ thống đang hoạt động
 800099c:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <main+0x6c>)
 800099e:	2201      	movs	r2, #1
 80009a0:	701a      	strb	r2, [r3, #0]

    // Hiển thị trạng thái khởi động trên OLED
    SSD1306_Clear();
 80009a2:	f000 f85a 	bl	8000a5a <SSD1306_Clear>
    SSD1306_PrintTextCentered(3, "SYSTEM READY");
 80009a6:	490b      	ldr	r1, [pc, #44]	@ (80009d4 <main+0x70>)
 80009a8:	2003      	movs	r0, #3
 80009aa:	f000 f8cb 	bl	8000b44 <SSD1306_PrintTextCentered>
    Delay_ms(2000);         // Đợi 2 giây
 80009ae:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009b2:	f000 f9e7 	bl	8000d84 <Delay_ms>
    oled_state = 3;         // Sau khởi động, chuyển về INFINITE MODE
 80009b6:	4b05      	ldr	r3, [pc, #20]	@ (80009cc <main+0x68>)
 80009b8:	2203      	movs	r2, #3
 80009ba:	701a      	strb	r2, [r3, #0]

    // Vòng lặp chính: không làm gì, mọi logic xử lý trong interrupt
    while (1);
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <main+0x58>
 80009c0:	20000000 	.word	0x20000000
 80009c4:	20000072 	.word	0x20000072
 80009c8:	20000073 	.word	0x20000073
 80009cc:	20000002 	.word	0x20000002
 80009d0:	20000001 	.word	0x20000001
 80009d4:	0800194c 	.word	0x0800194c

080009d8 <SSD1306_Command>:
 * @brief Gửi lệnh điều khiển SSD1306 (control byte = 0x00)
 *
 * @param cmd Lệnh SSD1306
 * @retval 1 thành công, 0 lỗi I2C
 */
uint8_t SSD1306_Command(uint8_t cmd) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
    return I2C_WriteByte(0x3C, 0x00, cmd);
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	461a      	mov	r2, r3
 80009e6:	2100      	movs	r1, #0
 80009e8:	203c      	movs	r0, #60	@ 0x3c
 80009ea:	f7ff fee9 	bl	80007c0 <I2C_WriteByte>
 80009ee:	4603      	mov	r3, r0
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <SSD1306_Data>:
 * @brief Gửi dữ liệu hiển thị SSD1306 (control byte = 0x40)
 *
 * @param data Dữ liệu pixel
 * @retval 1 thành công, 0 lỗi I2C
 */
uint8_t SSD1306_Data(uint8_t data) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
    return I2C_WriteByte(0x3C, 0x40, data);
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	461a      	mov	r2, r3
 8000a06:	2140      	movs	r1, #64	@ 0x40
 8000a08:	203c      	movs	r0, #60	@ 0x3c
 8000a0a:	f7ff fed9 	bl	80007c0 <I2C_WriteByte>
 8000a0e:	4603      	mov	r3, r0
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <SSD1306_SetCursor>:
 * @brief Đặt vị trí con trỏ vẽ trên OLED (đơn vị cột, trang)
 *
 * @param col  Cột (0~127)
 * @param page Trang (0~7)
 */
void SSD1306_SetCursor(uint8_t col, uint8_t page) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	460a      	mov	r2, r1
 8000a22:	71fb      	strb	r3, [r7, #7]
 8000a24:	4613      	mov	r3, r2
 8000a26:	71bb      	strb	r3, [r7, #6]
    SSD1306_Command(0xB0 + page);                  // Set page address
 8000a28:	79bb      	ldrb	r3, [r7, #6]
 8000a2a:	3b50      	subs	r3, #80	@ 0x50
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff ffd2 	bl	80009d8 <SSD1306_Command>
    SSD1306_Command(0x00 + (col & 0x0F));          // Set lower column
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	f003 030f 	and.w	r3, r3, #15
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ffcb 	bl	80009d8 <SSD1306_Command>
    SSD1306_Command(0x10 + ((col >> 4) & 0x0F));   // Set higher column
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	091b      	lsrs	r3, r3, #4
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	3310      	adds	r3, #16
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ffc3 	bl	80009d8 <SSD1306_Command>
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <SSD1306_Clear>:


/**
 * @brief Xóa toàn bộ nội dung OLED (clear screen)
 */
void SSD1306_Clear(void) {
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < 8; page++) {
 8000a60:	2300      	movs	r3, #0
 8000a62:	71fb      	strb	r3, [r7, #7]
 8000a64:	e014      	b.n	8000a90 <SSD1306_Clear+0x36>
        SSD1306_SetCursor(0, page);
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f7ff ffd4 	bl	8000a18 <SSD1306_SetCursor>
        for (uint8_t col = 0; col < 128; col++) {
 8000a70:	2300      	movs	r3, #0
 8000a72:	71bb      	strb	r3, [r7, #6]
 8000a74:	e005      	b.n	8000a82 <SSD1306_Clear+0x28>
            SSD1306_Data(0x00);
 8000a76:	2000      	movs	r0, #0
 8000a78:	f7ff ffbe 	bl	80009f8 <SSD1306_Data>
        for (uint8_t col = 0; col < 128; col++) {
 8000a7c:	79bb      	ldrb	r3, [r7, #6]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	71bb      	strb	r3, [r7, #6]
 8000a82:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	daf5      	bge.n	8000a76 <SSD1306_Clear+0x1c>
    for (uint8_t page = 0; page < 8; page++) {
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	71fb      	strb	r3, [r7, #7]
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	2b07      	cmp	r3, #7
 8000a94:	d9e7      	bls.n	8000a66 <SSD1306_Clear+0xc>
        }
    }
}
 8000a96:	bf00      	nop
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <SSD1306_PrintChar>:
/**
 * @brief In 1 ký tự đơn lên OLED (font 5x8)
 *
 * @param ch Ký tự cần in (A-Z, a-z, 0-9, ký tự khác thành space)
 */
void SSD1306_PrintChar(char ch) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
    const uint8_t* chr;

    // Tra cứu mã font
    if (ch >= 'A' && ch <= 'Z')
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	2b40      	cmp	r3, #64	@ 0x40
 8000aae:	d90c      	bls.n	8000aca <SSD1306_PrintChar+0x2a>
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	2b5a      	cmp	r3, #90	@ 0x5a
 8000ab4:	d809      	bhi.n	8000aca <SSD1306_PrintChar+0x2a>
        chr = font5x8[ch - 'A'];
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8000abc:	4613      	mov	r3, r2
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	4413      	add	r3, r2
 8000ac2:	4a1e      	ldr	r2, [pc, #120]	@ (8000b3c <SSD1306_PrintChar+0x9c>)
 8000ac4:	4413      	add	r3, r2
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	e020      	b.n	8000b0c <SSD1306_PrintChar+0x6c>
    else if (ch >= 'a' && ch <= 'z')
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	2b60      	cmp	r3, #96	@ 0x60
 8000ace:	d90c      	bls.n	8000aea <SSD1306_PrintChar+0x4a>
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	2b7a      	cmp	r3, #122	@ 0x7a
 8000ad4:	d809      	bhi.n	8000aea <SSD1306_PrintChar+0x4a>
        chr = font5x8[ch - 'a' + 26];
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	f1a3 0247 	sub.w	r2, r3, #71	@ 0x47
 8000adc:	4613      	mov	r3, r2
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	4413      	add	r3, r2
 8000ae2:	4a16      	ldr	r2, [pc, #88]	@ (8000b3c <SSD1306_PrintChar+0x9c>)
 8000ae4:	4413      	add	r3, r2
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	e010      	b.n	8000b0c <SSD1306_PrintChar+0x6c>
    else if (ch >= '0' && ch <= '9')
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	2b2f      	cmp	r3, #47	@ 0x2f
 8000aee:	d90b      	bls.n	8000b08 <SSD1306_PrintChar+0x68>
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	2b39      	cmp	r3, #57	@ 0x39
 8000af4:	d808      	bhi.n	8000b08 <SSD1306_PrintChar+0x68>
        chr = font5x8[ch - '0' + 52];
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	1d1a      	adds	r2, r3, #4
 8000afa:	4613      	mov	r3, r2
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	4413      	add	r3, r2
 8000b00:	4a0e      	ldr	r2, [pc, #56]	@ (8000b3c <SSD1306_PrintChar+0x9c>)
 8000b02:	4413      	add	r3, r2
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	e001      	b.n	8000b0c <SSD1306_PrintChar+0x6c>
    else
        chr = font5x8[62];  // Ký tự khác → space
 8000b08:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <SSD1306_PrintChar+0xa0>)
 8000b0a:	60fb      	str	r3, [r7, #12]

    // Gửi 5 byte font data + 1 cột trống để cách ký tự
    for (int i = 0; i < 5; i++) SSD1306_Data(chr[i]);
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	e009      	b.n	8000b26 <SSD1306_PrintChar+0x86>
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	68fa      	ldr	r2, [r7, #12]
 8000b16:	4413      	add	r3, r2
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff ff6c 	bl	80009f8 <SSD1306_Data>
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	3301      	adds	r3, #1
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	2b04      	cmp	r3, #4
 8000b2a:	ddf2      	ble.n	8000b12 <SSD1306_PrintChar+0x72>
    SSD1306_Data(0x00);
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f7ff ff63 	bl	80009f8 <SSD1306_Data>
}
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	080019a4 	.word	0x080019a4
 8000b40:	08001ada 	.word	0x08001ada

08000b44 <SSD1306_PrintTextCentered>:
 * @brief In chuỗi text căn giữa theo trang
 *
 * @param page Trang hiển thị (0-7)
 * @param str  Chuỗi cần in
 */
void SSD1306_PrintTextCentered(uint8_t page, const char* str) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	6039      	str	r1, [r7, #0]
 8000b4e:	71fb      	strb	r3, [r7, #7]
    uint8_t len = strlen(str);
 8000b50:	6838      	ldr	r0, [r7, #0]
 8000b52:	f7ff fb45 	bl	80001e0 <strlen>
 8000b56:	4603      	mov	r3, r0
 8000b58:	73fb      	strb	r3, [r7, #15]
    uint8_t col = (128 - len * 6) / 2;  // Tính toán căn giữa
 8000b5a:	7bfa      	ldrb	r2, [r7, #15]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	1a9b      	subs	r3, r3, r2
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	3380      	adds	r3, #128	@ 0x80
 8000b66:	0fda      	lsrs	r2, r3, #31
 8000b68:	4413      	add	r3, r2
 8000b6a:	105b      	asrs	r3, r3, #1
 8000b6c:	73bb      	strb	r3, [r7, #14]

    SSD1306_SetCursor(col, page);
 8000b6e:	79fa      	ldrb	r2, [r7, #7]
 8000b70:	7bbb      	ldrb	r3, [r7, #14]
 8000b72:	4611      	mov	r1, r2
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ff4f 	bl	8000a18 <SSD1306_SetCursor>
    while (*str)
 8000b7a:	e006      	b.n	8000b8a <SSD1306_PrintTextCentered+0x46>
        SSD1306_PrintChar(*str++);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	603a      	str	r2, [r7, #0]
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff8b 	bl	8000aa0 <SSD1306_PrintChar>
    while (*str)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d1f4      	bne.n	8000b7c <SSD1306_PrintTextCentered+0x38>
}
 8000b92:	bf00      	nop
 8000b94:	bf00      	nop
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <SSD1306_DisplayStatus>:
 * Gồm 3 dòng:
 * - Tiêu đề: "DEVICE STATUS"
 * - Mode hiện tại
 * - Countdown còn lại hoặc trạng thái READY
 */
void SSD1306_DisplayStatus(uint8_t current_mode, uint8_t seconds_left) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	@ 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	460a      	mov	r2, r1
 8000ba6:	71fb      	strb	r3, [r7, #7]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	71bb      	strb	r3, [r7, #6]
    char buffer[32];

    SSD1306_Clear();
 8000bac:	f7ff ff55 	bl	8000a5a <SSD1306_Clear>

    SSD1306_PrintTextCentered(1, "DEVICE STATUS");
 8000bb0:	4915      	ldr	r1, [pc, #84]	@ (8000c08 <SSD1306_DisplayStatus+0x6c>)
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f7ff ffc6 	bl	8000b44 <SSD1306_PrintTextCentered>

    sprintf(buffer, "MODE %d", current_mode);
 8000bb8:	79fa      	ldrb	r2, [r7, #7]
 8000bba:	f107 0308 	add.w	r3, r7, #8
 8000bbe:	4913      	ldr	r1, [pc, #76]	@ (8000c0c <SSD1306_DisplayStatus+0x70>)
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f000 fa17 	bl	8000ff4 <siprintf>
    SSD1306_PrintTextCentered(3, buffer);
 8000bc6:	f107 0308 	add.w	r3, r7, #8
 8000bca:	4619      	mov	r1, r3
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f7ff ffb9 	bl	8000b44 <SSD1306_PrintTextCentered>

    if (seconds_left > 0)
 8000bd2:	79bb      	ldrb	r3, [r7, #6]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d007      	beq.n	8000be8 <SSD1306_DisplayStatus+0x4c>
        sprintf(buffer, "TIME %ds", seconds_left);
 8000bd8:	79ba      	ldrb	r2, [r7, #6]
 8000bda:	f107 0308 	add.w	r3, r7, #8
 8000bde:	490c      	ldr	r1, [pc, #48]	@ (8000c10 <SSD1306_DisplayStatus+0x74>)
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 fa07 	bl	8000ff4 <siprintf>
 8000be6:	e005      	b.n	8000bf4 <SSD1306_DisplayStatus+0x58>
    else
        sprintf(buffer, "READY");
 8000be8:	f107 0308 	add.w	r3, r7, #8
 8000bec:	4909      	ldr	r1, [pc, #36]	@ (8000c14 <SSD1306_DisplayStatus+0x78>)
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 fa00 	bl	8000ff4 <siprintf>

    SSD1306_PrintTextCentered(5, buffer);
 8000bf4:	f107 0308 	add.w	r3, r7, #8
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	2005      	movs	r0, #5
 8000bfc:	f7ff ffa2 	bl	8000b44 <SSD1306_PrintTextCentered>
}
 8000c00:	bf00      	nop
 8000c02:	3728      	adds	r7, #40	@ 0x28
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	08001978 	.word	0x08001978
 8000c0c:	08001988 	.word	0x08001988
 8000c10:	08001990 	.word	0x08001990
 8000c14:	0800199c 	.word	0x0800199c

08000c18 <PWM_Init>:
 * - Tần số Timer gốc: 16MHz (APB1 clock)
 * - Prescaler: 1599  → f_timer = 16MHz / (1599 + 1) = 10kHz
 * - Auto-reload (ARR): 100 → Chu kỳ PWM = 100 counts (10kHz / 100 = 100Hz)
 * - PWM mode 1 (active high)
 */
void PWM_Init(void) {
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
    // Bật clock cho TIM4 (trên bus APB1)
	RCC->APB1ENR |= (1 << 2);
 8000c1c:	4b19      	ldr	r3, [pc, #100]	@ (8000c84 <PWM_Init+0x6c>)
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c20:	4a18      	ldr	r2, [pc, #96]	@ (8000c84 <PWM_Init+0x6c>)
 8000c22:	f043 0304 	orr.w	r3, r3, #4
 8000c26:	6413      	str	r3, [r2, #64]	@ 0x40

    // Cấu hình bộ chia tần số (Prescaler)
    TIM4->PSC = 1599;  // Chia từ 16MHz về 10kHz
 8000c28:	4b17      	ldr	r3, [pc, #92]	@ (8000c88 <PWM_Init+0x70>)
 8000c2a:	f240 623f 	movw	r2, #1599	@ 0x63f
 8000c2e:	629a      	str	r2, [r3, #40]	@ 0x28

    // Cấu hình chu kỳ PWM (ARR = period)
    TIM4->ARR = 100;   // PWM frequency ~100Hz
 8000c30:	4b15      	ldr	r3, [pc, #84]	@ (8000c88 <PWM_Init+0x70>)
 8000c32:	2264      	movs	r2, #100	@ 0x64
 8000c34:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Thiết lập giá trị duty cycle ban đầu (30%)
    TIM4->CCR2 = 30;
 8000c36:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <PWM_Init+0x70>)
 8000c38:	221e      	movs	r2, #30
 8000c3a:	639a      	str	r2, [r3, #56]	@ 0x38

    // Cấu hình PWM Mode 1 trên kênh 2 (CCMR1 → OC2M = 110b)
    TIM4->CCMR1 &= ~(7 << 12); // Xóa các bit OC2M trước
 8000c3c:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <PWM_Init+0x70>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a11      	ldr	r2, [pc, #68]	@ (8000c88 <PWM_Init+0x70>)
 8000c42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8000c46:	6193      	str	r3, [r2, #24]
    TIM4->CCMR1 |= (6 << 12); // PWM mode 1 (active high)
 8000c48:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <PWM_Init+0x70>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	4a0e      	ldr	r2, [pc, #56]	@ (8000c88 <PWM_Init+0x70>)
 8000c4e:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8000c52:	6193      	str	r3, [r2, #24]

    // Cho phép preload cho CCR2 (enable preload buffer)
    TIM4->CCMR1 |= (1 << 11);
 8000c54:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <PWM_Init+0x70>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	4a0b      	ldr	r2, [pc, #44]	@ (8000c88 <PWM_Init+0x70>)
 8000c5a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c5e:	6193      	str	r3, [r2, #24]

    // Bật kênh output compare 2 (enable output compare)
    TIM4->CCER |= (1 << 4);
 8000c60:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <PWM_Init+0x70>)
 8000c62:	6a1b      	ldr	r3, [r3, #32]
 8000c64:	4a08      	ldr	r2, [pc, #32]	@ (8000c88 <PWM_Init+0x70>)
 8000c66:	f043 0310 	orr.w	r3, r3, #16
 8000c6a:	6213      	str	r3, [r2, #32]

    // Bật Timer 4 (counter enable)
    TIM4->CR1 |= (1 << 0);
 8000c6c:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <PWM_Init+0x70>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a05      	ldr	r2, [pc, #20]	@ (8000c88 <PWM_Init+0x70>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	6013      	str	r3, [r2, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40000800 	.word	0x40000800

08000c8c <Update_PWM_From_Mode>:
 * - Mode 1 → 60% duty  (CCR2 = 60)
 * - Mode 0 → 0% duty (tắt PWM)
 *
 * @param mode  Chế độ điều khiển (0~3)
 */
void Update_PWM_From_Mode(uint8_t mode) {
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
    switch (mode) {
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	2b03      	cmp	r3, #3
 8000c9a:	d81b      	bhi.n	8000cd4 <Update_PWM_From_Mode+0x48>
 8000c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8000ca4 <Update_PWM_From_Mode+0x18>)
 8000c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca2:	bf00      	nop
 8000ca4:	08000ccd 	.word	0x08000ccd
 8000ca8:	08000cc5 	.word	0x08000cc5
 8000cac:	08000cbd 	.word	0x08000cbd
 8000cb0:	08000cb5 	.word	0x08000cb5
        case 3: TIM4->CCR2 = 100; break;  // 100% tốc độ
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <Update_PWM_From_Mode+0x5c>)
 8000cb6:	2264      	movs	r2, #100	@ 0x64
 8000cb8:	639a      	str	r2, [r3, #56]	@ 0x38
 8000cba:	e00f      	b.n	8000cdc <Update_PWM_From_Mode+0x50>
        case 2: TIM4->CCR2 = 80;  break;
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <Update_PWM_From_Mode+0x5c>)
 8000cbe:	2250      	movs	r2, #80	@ 0x50
 8000cc0:	639a      	str	r2, [r3, #56]	@ 0x38
 8000cc2:	e00b      	b.n	8000cdc <Update_PWM_From_Mode+0x50>
        case 1: TIM4->CCR2 = 60;  break;
 8000cc4:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <Update_PWM_From_Mode+0x5c>)
 8000cc6:	223c      	movs	r2, #60	@ 0x3c
 8000cc8:	639a      	str	r2, [r3, #56]	@ 0x38
 8000cca:	e007      	b.n	8000cdc <Update_PWM_From_Mode+0x50>
        case 0: TIM4->CCR2 = 0;   break;  // Dừng
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <Update_PWM_From_Mode+0x5c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	639a      	str	r2, [r3, #56]	@ 0x38
 8000cd2:	e003      	b.n	8000cdc <Update_PWM_From_Mode+0x50>
        default: TIM4->CCR2 = 0;  break;  // Trường hợp lỗi
 8000cd4:	4b04      	ldr	r3, [pc, #16]	@ (8000ce8 <Update_PWM_From_Mode+0x5c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	639a      	str	r2, [r3, #56]	@ 0x38
 8000cda:	bf00      	nop
    }
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	40000800 	.word	0x40000800

08000cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <NMI_Handler+0x4>

08000cf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <HardFault_Handler+0x4>

08000cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <MemManage_Handler+0x4>

08000d04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <BusFault_Handler+0x4>

08000d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <UsageFault_Handler+0x4>

08000d14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
	...

08000d40 <SysTick_Init>:
#include "stm32f4xx.h"
#include "system.h"

volatile uint32_t system_tick = 0;

void SysTick_Init(void) {
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
    SysTick->LOAD = (16000000 / 1000) - 1;
 8000d44:	4b07      	ldr	r3, [pc, #28]	@ (8000d64 <SysTick_Init+0x24>)
 8000d46:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000d4a:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 8000d4c:	4b05      	ldr	r3, [pc, #20]	@ (8000d64 <SysTick_Init+0x24>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8000d52:	4b04      	ldr	r3, [pc, #16]	@ (8000d64 <SysTick_Init+0x24>)
 8000d54:	2207      	movs	r2, #7
 8000d56:	601a      	str	r2, [r3, #0]
                    SysTick_CTRL_TICKINT_Msk |
                    SysTick_CTRL_ENABLE_Msk;
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000e010 	.word	0xe000e010

08000d68 <SysTick_Handler>:

void SysTick_Handler(void) {
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
    system_tick++;
 8000d6c:	4b04      	ldr	r3, [pc, #16]	@ (8000d80 <SysTick_Handler+0x18>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	3301      	adds	r3, #1
 8000d72:	4a03      	ldr	r2, [pc, #12]	@ (8000d80 <SysTick_Handler+0x18>)
 8000d74:	6013      	str	r3, [r2, #0]
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	20000080 	.word	0x20000080

08000d84 <Delay_ms>:

void Delay_ms(uint32_t ms) {
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
    uint32_t start = system_tick;
 8000d8c:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <Delay_ms+0x2c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	60fb      	str	r3, [r7, #12]
    while ((system_tick - start) < ms);
 8000d92:	bf00      	nop
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <Delay_ms+0x2c>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d8f8      	bhi.n	8000d94 <Delay_ms+0x10>
}
 8000da2:	bf00      	nop
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	20000080 	.word	0x20000080

08000db4 <GetTick>:

uint32_t GetTick(void) {
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
    return system_tick;
 8000db8:	4b03      	ldr	r3, [pc, #12]	@ (8000dc8 <GetTick+0x14>)
 8000dba:	681b      	ldr	r3, [r3, #0]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000080 	.word	0x20000080

08000dcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd0:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <SystemInit+0x20>)
 8000dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dd6:	4a05      	ldr	r2, [pc, #20]	@ (8000dec <SystemInit+0x20>)
 8000dd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ddc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_EnableIRQ>:
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	db0b      	blt.n	8000e1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	f003 021f 	and.w	r2, r3, #31
 8000e08:	4907      	ldr	r1, [pc, #28]	@ (8000e28 <__NVIC_EnableIRQ+0x38>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	095b      	lsrs	r3, r3, #5
 8000e10:	2001      	movs	r0, #1
 8000e12:	fa00 f202 	lsl.w	r2, r0, r2
 8000e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000e100 	.word	0xe000e100

08000e2c <TIM3_Init>:
 *
 * - Timer input clock: 16MHz (APB1 timer clock x2)
 * - Prescaler: 15999 → 16MHz / (15999+1) = 1kHz (1ms tick)
 * - Auto-reload (ARR): 100 → tạo ra chu kỳ 100ms
 */
void TIM3_Init(void) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
    // Bật clock cho TIM3 (trên bus APB1)
	RCC->APB1ENR |= (1 << 1);
 8000e30:	4b0e      	ldr	r3, [pc, #56]	@ (8000e6c <TIM3_Init+0x40>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e34:	4a0d      	ldr	r2, [pc, #52]	@ (8000e6c <TIM3_Init+0x40>)
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	6413      	str	r3, [r2, #64]	@ 0x40

    // Chia tần số: 16MHz → 1kHz
    TIM3->PSC = 15999;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <TIM3_Init+0x44>)
 8000e3e:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000e42:	629a      	str	r2, [r3, #40]	@ 0x28

    // Cấu hình chu kỳ đếm: 100ms (ARR = 100-1)
    TIM3->ARR = 100 - 1;
 8000e44:	4b0a      	ldr	r3, [pc, #40]	@ (8000e70 <TIM3_Init+0x44>)
 8000e46:	2263      	movs	r2, #99	@ 0x63
 8000e48:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Bật ngắt update interrupt
    TIM3->DIER |= (1 << 0);
 8000e4a:	4b09      	ldr	r3, [pc, #36]	@ (8000e70 <TIM3_Init+0x44>)
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	4a08      	ldr	r2, [pc, #32]	@ (8000e70 <TIM3_Init+0x44>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	60d3      	str	r3, [r2, #12]

    // Bắt đầu đếm
    TIM3->CR1 |= (1 << 0);
 8000e56:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <TIM3_Init+0x44>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a05      	ldr	r2, [pc, #20]	@ (8000e70 <TIM3_Init+0x44>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6013      	str	r3, [r2, #0]

    // Bật ngắt TIM3 trong NVIC
    NVIC_EnableIRQ(TIM3_IRQn);
 8000e62:	201d      	movs	r0, #29
 8000e64:	f7ff ffc4 	bl	8000df0 <__NVIC_EnableIRQ>
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40000400 	.word	0x40000400

08000e74 <TIM3_IRQHandler>:
 * - Đọc mode từ ADC (nếu không có nút nhấn)
 * - Điều chỉnh PWM, LED theo mode
 * - Cập nhật OLED mỗi 500ms
 * - Giảm countdown mỗi 1000ms
 */
void TIM3_IRQHandler(void) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
    static uint8_t tick_500 = 0;   // Đếm nội bộ 500ms
    static uint8_t tick_1000 = 0;  // Đếm nội bộ 1000ms

    // Xóa cờ ngắt update (UIF)
    TIM3->SR &= ~(1 << 0);
 8000e78:	4b40      	ldr	r3, [pc, #256]	@ (8000f7c <TIM3_IRQHandler+0x108>)
 8000e7a:	691b      	ldr	r3, [r3, #16]
 8000e7c:	4a3f      	ldr	r2, [pc, #252]	@ (8000f7c <TIM3_IRQHandler+0x108>)
 8000e7e:	f023 0301 	bic.w	r3, r3, #1
 8000e82:	6113      	str	r3, [r2, #16]

    /** 1. Kích hoạt ADC bắt đầu chuyển đổi **/
    ADC1->CR2 |= (1 << 30);
 8000e84:	4b3e      	ldr	r3, [pc, #248]	@ (8000f80 <TIM3_IRQHandler+0x10c>)
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	4a3d      	ldr	r2, [pc, #244]	@ (8000f80 <TIM3_IRQHandler+0x10c>)
 8000e8a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000e8e:	6093      	str	r3, [r2, #8]

    /** 2. Cập nhật mode từ ADC nếu không có nút nhấn **/
    if (!button_pressed) {
 8000e90:	4b3c      	ldr	r3, [pc, #240]	@ (8000f84 <TIM3_IRQHandler+0x110>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d106      	bne.n	8000ea8 <TIM3_IRQHandler+0x34>
        mode = Mode_Update_From_ADC();
 8000e9a:	f7ff fa57 	bl	800034c <Mode_Update_From_ADC>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b39      	ldr	r3, [pc, #228]	@ (8000f88 <TIM3_IRQHandler+0x114>)
 8000ea4:	701a      	strb	r2, [r3, #0]
 8000ea6:	e002      	b.n	8000eae <TIM3_IRQHandler+0x3a>
    } else {
        button_pressed = 0;  // Reset cờ sau khi xử lý nút
 8000ea8:	4b36      	ldr	r3, [pc, #216]	@ (8000f84 <TIM3_IRQHandler+0x110>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]
    }

    /** 3. Cập nhật PWM và LED theo oled_state **/
    if (oled_state == 1 || oled_state == 3) {
 8000eae:	4b37      	ldr	r3, [pc, #220]	@ (8000f8c <TIM3_IRQHandler+0x118>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d004      	beq.n	8000ec2 <TIM3_IRQHandler+0x4e>
 8000eb8:	4b34      	ldr	r3, [pc, #208]	@ (8000f8c <TIM3_IRQHandler+0x118>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b03      	cmp	r3, #3
 8000ec0:	d110      	bne.n	8000ee4 <TIM3_IRQHandler+0x70>
        Update_PWM_From_Mode(mode);
 8000ec2:	4b31      	ldr	r3, [pc, #196]	@ (8000f88 <TIM3_IRQHandler+0x114>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fedf 	bl	8000c8c <Update_PWM_From_Mode>
        LED_Update(mode, countdown);
 8000ece:	4b2e      	ldr	r3, [pc, #184]	@ (8000f88 <TIM3_IRQHandler+0x114>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	4a2e      	ldr	r2, [pc, #184]	@ (8000f90 <TIM3_IRQHandler+0x11c>)
 8000ed6:	7812      	ldrb	r2, [r2, #0]
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fcff 	bl	80008e0 <LED_Update>
 8000ee2:	e006      	b.n	8000ef2 <TIM3_IRQHandler+0x7e>
    } else {
        TIM4->CCR2 = 0;           // Tắt PWM khi STOP
 8000ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8000f94 <TIM3_IRQHandler+0x120>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	639a      	str	r2, [r3, #56]	@ 0x38
        LED_Update(0, 0);         // Tắt toàn bộ LED
 8000eea:	2100      	movs	r1, #0
 8000eec:	2000      	movs	r0, #0
 8000eee:	f7ff fcf7 	bl	80008e0 <LED_Update>
    }

    /** 4. Đếm tick cho các chu kỳ lớn hơn **/
    tick_500++;
 8000ef2:	4b29      	ldr	r3, [pc, #164]	@ (8000f98 <TIM3_IRQHandler+0x124>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4b27      	ldr	r3, [pc, #156]	@ (8000f98 <TIM3_IRQHandler+0x124>)
 8000efc:	701a      	strb	r2, [r3, #0]
    tick_1000++;
 8000efe:	4b27      	ldr	r3, [pc, #156]	@ (8000f9c <TIM3_IRQHandler+0x128>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	3301      	adds	r3, #1
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4b25      	ldr	r3, [pc, #148]	@ (8000f9c <TIM3_IRQHandler+0x128>)
 8000f08:	701a      	strb	r2, [r3, #0]

    /** 5. Cập nhật OLED mỗi 500ms **/
    if (tick_500 >= 5) {
 8000f0a:	4b23      	ldr	r3, [pc, #140]	@ (8000f98 <TIM3_IRQHandler+0x124>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	d90c      	bls.n	8000f2c <TIM3_IRQHandler+0xb8>
        tick_500 = 0;
 8000f12:	4b21      	ldr	r3, [pc, #132]	@ (8000f98 <TIM3_IRQHandler+0x124>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
        SSD1306_DisplayStatus(mode, countdown);
 8000f18:	4b1b      	ldr	r3, [pc, #108]	@ (8000f88 <TIM3_IRQHandler+0x114>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000f90 <TIM3_IRQHandler+0x11c>)
 8000f20:	7812      	ldrb	r2, [r2, #0]
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	4611      	mov	r1, r2
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fe38 	bl	8000b9c <SSD1306_DisplayStatus>
    }

    /** 6. Giảm countdown mỗi 1000ms **/
    if (tick_1000 >= 10) {
 8000f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f9c <TIM3_IRQHandler+0x128>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b09      	cmp	r3, #9
 8000f32:	d920      	bls.n	8000f76 <TIM3_IRQHandler+0x102>
        tick_1000 = 0;
 8000f34:	4b19      	ldr	r3, [pc, #100]	@ (8000f9c <TIM3_IRQHandler+0x128>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]

        if (oled_state == 1 && countdown > 0 && mode != 0) {
 8000f3a:	4b14      	ldr	r3, [pc, #80]	@ (8000f8c <TIM3_IRQHandler+0x118>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d118      	bne.n	8000f76 <TIM3_IRQHandler+0x102>
 8000f44:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <TIM3_IRQHandler+0x11c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d013      	beq.n	8000f76 <TIM3_IRQHandler+0x102>
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <TIM3_IRQHandler+0x114>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d00e      	beq.n	8000f76 <TIM3_IRQHandler+0x102>
            countdown--;
 8000f58:	4b0d      	ldr	r3, [pc, #52]	@ (8000f90 <TIM3_IRQHandler+0x11c>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4b0b      	ldr	r3, [pc, #44]	@ (8000f90 <TIM3_IRQHandler+0x11c>)
 8000f64:	701a      	strb	r2, [r3, #0]

            if (countdown == 0) {
 8000f66:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <TIM3_IRQHandler+0x11c>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d102      	bne.n	8000f76 <TIM3_IRQHandler+0x102>
                oled_state = 0;  // Hết thời gian → dừng
 8000f70:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <TIM3_IRQHandler+0x118>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
            }
        }
    }
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40000400 	.word	0x40000400
 8000f80:	40012000 	.word	0x40012000
 8000f84:	20000073 	.word	0x20000073
 8000f88:	20000000 	.word	0x20000000
 8000f8c:	20000002 	.word	0x20000002
 8000f90:	20000072 	.word	0x20000072
 8000f94:	40000800 	.word	0x40000800
 8000f98:	20000084 	.word	0x20000084
 8000f9c:	20000085 	.word	0x20000085

08000fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fa0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fa4:	f7ff ff12 	bl	8000dcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fa8:	480c      	ldr	r0, [pc, #48]	@ (8000fdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000faa:	490d      	ldr	r1, [pc, #52]	@ (8000fe0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fac:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb0:	e002      	b.n	8000fb8 <LoopCopyDataInit>

08000fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb6:	3304      	adds	r3, #4

08000fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fbc:	d3f9      	bcc.n	8000fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fc0:	4c0a      	ldr	r4, [pc, #40]	@ (8000fec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc4:	e001      	b.n	8000fca <LoopFillZerobss>

08000fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc8:	3204      	adds	r2, #4

08000fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fcc:	d3fb      	bcc.n	8000fc6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000fce:	f000 f833 	bl	8001038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd2:	f7ff fcc7 	bl	8000964 <main>
  bx  lr    
 8000fd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fd8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe0:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000fe4:	08001b24 	.word	0x08001b24
  ldr r2, =_sbss
 8000fe8:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000fec:	200001d4 	.word	0x200001d4

08000ff0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <DMA1_Stream0_IRQHandler>
	...

08000ff4 <siprintf>:
 8000ff4:	b40e      	push	{r1, r2, r3}
 8000ff6:	b510      	push	{r4, lr}
 8000ff8:	b09d      	sub	sp, #116	@ 0x74
 8000ffa:	ab1f      	add	r3, sp, #124	@ 0x7c
 8000ffc:	9002      	str	r0, [sp, #8]
 8000ffe:	9006      	str	r0, [sp, #24]
 8001000:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001004:	480a      	ldr	r0, [pc, #40]	@ (8001030 <siprintf+0x3c>)
 8001006:	9107      	str	r1, [sp, #28]
 8001008:	9104      	str	r1, [sp, #16]
 800100a:	490a      	ldr	r1, [pc, #40]	@ (8001034 <siprintf+0x40>)
 800100c:	f853 2b04 	ldr.w	r2, [r3], #4
 8001010:	9105      	str	r1, [sp, #20]
 8001012:	2400      	movs	r4, #0
 8001014:	a902      	add	r1, sp, #8
 8001016:	6800      	ldr	r0, [r0, #0]
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800101c:	f000 f986 	bl	800132c <_svfiprintf_r>
 8001020:	9b02      	ldr	r3, [sp, #8]
 8001022:	701c      	strb	r4, [r3, #0]
 8001024:	b01d      	add	sp, #116	@ 0x74
 8001026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800102a:	b003      	add	sp, #12
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000004 	.word	0x20000004
 8001034:	ffff0208 	.word	0xffff0208

08001038 <__libc_init_array>:
 8001038:	b570      	push	{r4, r5, r6, lr}
 800103a:	4d0d      	ldr	r5, [pc, #52]	@ (8001070 <__libc_init_array+0x38>)
 800103c:	4c0d      	ldr	r4, [pc, #52]	@ (8001074 <__libc_init_array+0x3c>)
 800103e:	1b64      	subs	r4, r4, r5
 8001040:	10a4      	asrs	r4, r4, #2
 8001042:	2600      	movs	r6, #0
 8001044:	42a6      	cmp	r6, r4
 8001046:	d109      	bne.n	800105c <__libc_init_array+0x24>
 8001048:	4d0b      	ldr	r5, [pc, #44]	@ (8001078 <__libc_init_array+0x40>)
 800104a:	4c0c      	ldr	r4, [pc, #48]	@ (800107c <__libc_init_array+0x44>)
 800104c:	f000 fc72 	bl	8001934 <_init>
 8001050:	1b64      	subs	r4, r4, r5
 8001052:	10a4      	asrs	r4, r4, #2
 8001054:	2600      	movs	r6, #0
 8001056:	42a6      	cmp	r6, r4
 8001058:	d105      	bne.n	8001066 <__libc_init_array+0x2e>
 800105a:	bd70      	pop	{r4, r5, r6, pc}
 800105c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001060:	4798      	blx	r3
 8001062:	3601      	adds	r6, #1
 8001064:	e7ee      	b.n	8001044 <__libc_init_array+0xc>
 8001066:	f855 3b04 	ldr.w	r3, [r5], #4
 800106a:	4798      	blx	r3
 800106c:	3601      	adds	r6, #1
 800106e:	e7f2      	b.n	8001056 <__libc_init_array+0x1e>
 8001070:	08001b1c 	.word	0x08001b1c
 8001074:	08001b1c 	.word	0x08001b1c
 8001078:	08001b1c 	.word	0x08001b1c
 800107c:	08001b20 	.word	0x08001b20

08001080 <__retarget_lock_acquire_recursive>:
 8001080:	4770      	bx	lr

08001082 <__retarget_lock_release_recursive>:
 8001082:	4770      	bx	lr

08001084 <_free_r>:
 8001084:	b538      	push	{r3, r4, r5, lr}
 8001086:	4605      	mov	r5, r0
 8001088:	2900      	cmp	r1, #0
 800108a:	d041      	beq.n	8001110 <_free_r+0x8c>
 800108c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001090:	1f0c      	subs	r4, r1, #4
 8001092:	2b00      	cmp	r3, #0
 8001094:	bfb8      	it	lt
 8001096:	18e4      	addlt	r4, r4, r3
 8001098:	f000 f8e0 	bl	800125c <__malloc_lock>
 800109c:	4a1d      	ldr	r2, [pc, #116]	@ (8001114 <_free_r+0x90>)
 800109e:	6813      	ldr	r3, [r2, #0]
 80010a0:	b933      	cbnz	r3, 80010b0 <_free_r+0x2c>
 80010a2:	6063      	str	r3, [r4, #4]
 80010a4:	6014      	str	r4, [r2, #0]
 80010a6:	4628      	mov	r0, r5
 80010a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010ac:	f000 b8dc 	b.w	8001268 <__malloc_unlock>
 80010b0:	42a3      	cmp	r3, r4
 80010b2:	d908      	bls.n	80010c6 <_free_r+0x42>
 80010b4:	6820      	ldr	r0, [r4, #0]
 80010b6:	1821      	adds	r1, r4, r0
 80010b8:	428b      	cmp	r3, r1
 80010ba:	bf01      	itttt	eq
 80010bc:	6819      	ldreq	r1, [r3, #0]
 80010be:	685b      	ldreq	r3, [r3, #4]
 80010c0:	1809      	addeq	r1, r1, r0
 80010c2:	6021      	streq	r1, [r4, #0]
 80010c4:	e7ed      	b.n	80010a2 <_free_r+0x1e>
 80010c6:	461a      	mov	r2, r3
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	b10b      	cbz	r3, 80010d0 <_free_r+0x4c>
 80010cc:	42a3      	cmp	r3, r4
 80010ce:	d9fa      	bls.n	80010c6 <_free_r+0x42>
 80010d0:	6811      	ldr	r1, [r2, #0]
 80010d2:	1850      	adds	r0, r2, r1
 80010d4:	42a0      	cmp	r0, r4
 80010d6:	d10b      	bne.n	80010f0 <_free_r+0x6c>
 80010d8:	6820      	ldr	r0, [r4, #0]
 80010da:	4401      	add	r1, r0
 80010dc:	1850      	adds	r0, r2, r1
 80010de:	4283      	cmp	r3, r0
 80010e0:	6011      	str	r1, [r2, #0]
 80010e2:	d1e0      	bne.n	80010a6 <_free_r+0x22>
 80010e4:	6818      	ldr	r0, [r3, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	6053      	str	r3, [r2, #4]
 80010ea:	4408      	add	r0, r1
 80010ec:	6010      	str	r0, [r2, #0]
 80010ee:	e7da      	b.n	80010a6 <_free_r+0x22>
 80010f0:	d902      	bls.n	80010f8 <_free_r+0x74>
 80010f2:	230c      	movs	r3, #12
 80010f4:	602b      	str	r3, [r5, #0]
 80010f6:	e7d6      	b.n	80010a6 <_free_r+0x22>
 80010f8:	6820      	ldr	r0, [r4, #0]
 80010fa:	1821      	adds	r1, r4, r0
 80010fc:	428b      	cmp	r3, r1
 80010fe:	bf04      	itt	eq
 8001100:	6819      	ldreq	r1, [r3, #0]
 8001102:	685b      	ldreq	r3, [r3, #4]
 8001104:	6063      	str	r3, [r4, #4]
 8001106:	bf04      	itt	eq
 8001108:	1809      	addeq	r1, r1, r0
 800110a:	6021      	streq	r1, [r4, #0]
 800110c:	6054      	str	r4, [r2, #4]
 800110e:	e7ca      	b.n	80010a6 <_free_r+0x22>
 8001110:	bd38      	pop	{r3, r4, r5, pc}
 8001112:	bf00      	nop
 8001114:	200001cc 	.word	0x200001cc

08001118 <sbrk_aligned>:
 8001118:	b570      	push	{r4, r5, r6, lr}
 800111a:	4e0f      	ldr	r6, [pc, #60]	@ (8001158 <sbrk_aligned+0x40>)
 800111c:	460c      	mov	r4, r1
 800111e:	6831      	ldr	r1, [r6, #0]
 8001120:	4605      	mov	r5, r0
 8001122:	b911      	cbnz	r1, 800112a <sbrk_aligned+0x12>
 8001124:	f000 fba4 	bl	8001870 <_sbrk_r>
 8001128:	6030      	str	r0, [r6, #0]
 800112a:	4621      	mov	r1, r4
 800112c:	4628      	mov	r0, r5
 800112e:	f000 fb9f 	bl	8001870 <_sbrk_r>
 8001132:	1c43      	adds	r3, r0, #1
 8001134:	d103      	bne.n	800113e <sbrk_aligned+0x26>
 8001136:	f04f 34ff 	mov.w	r4, #4294967295
 800113a:	4620      	mov	r0, r4
 800113c:	bd70      	pop	{r4, r5, r6, pc}
 800113e:	1cc4      	adds	r4, r0, #3
 8001140:	f024 0403 	bic.w	r4, r4, #3
 8001144:	42a0      	cmp	r0, r4
 8001146:	d0f8      	beq.n	800113a <sbrk_aligned+0x22>
 8001148:	1a21      	subs	r1, r4, r0
 800114a:	4628      	mov	r0, r5
 800114c:	f000 fb90 	bl	8001870 <_sbrk_r>
 8001150:	3001      	adds	r0, #1
 8001152:	d1f2      	bne.n	800113a <sbrk_aligned+0x22>
 8001154:	e7ef      	b.n	8001136 <sbrk_aligned+0x1e>
 8001156:	bf00      	nop
 8001158:	200001c8 	.word	0x200001c8

0800115c <_malloc_r>:
 800115c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001160:	1ccd      	adds	r5, r1, #3
 8001162:	f025 0503 	bic.w	r5, r5, #3
 8001166:	3508      	adds	r5, #8
 8001168:	2d0c      	cmp	r5, #12
 800116a:	bf38      	it	cc
 800116c:	250c      	movcc	r5, #12
 800116e:	2d00      	cmp	r5, #0
 8001170:	4606      	mov	r6, r0
 8001172:	db01      	blt.n	8001178 <_malloc_r+0x1c>
 8001174:	42a9      	cmp	r1, r5
 8001176:	d904      	bls.n	8001182 <_malloc_r+0x26>
 8001178:	230c      	movs	r3, #12
 800117a:	6033      	str	r3, [r6, #0]
 800117c:	2000      	movs	r0, #0
 800117e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001182:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001258 <_malloc_r+0xfc>
 8001186:	f000 f869 	bl	800125c <__malloc_lock>
 800118a:	f8d8 3000 	ldr.w	r3, [r8]
 800118e:	461c      	mov	r4, r3
 8001190:	bb44      	cbnz	r4, 80011e4 <_malloc_r+0x88>
 8001192:	4629      	mov	r1, r5
 8001194:	4630      	mov	r0, r6
 8001196:	f7ff ffbf 	bl	8001118 <sbrk_aligned>
 800119a:	1c43      	adds	r3, r0, #1
 800119c:	4604      	mov	r4, r0
 800119e:	d158      	bne.n	8001252 <_malloc_r+0xf6>
 80011a0:	f8d8 4000 	ldr.w	r4, [r8]
 80011a4:	4627      	mov	r7, r4
 80011a6:	2f00      	cmp	r7, #0
 80011a8:	d143      	bne.n	8001232 <_malloc_r+0xd6>
 80011aa:	2c00      	cmp	r4, #0
 80011ac:	d04b      	beq.n	8001246 <_malloc_r+0xea>
 80011ae:	6823      	ldr	r3, [r4, #0]
 80011b0:	4639      	mov	r1, r7
 80011b2:	4630      	mov	r0, r6
 80011b4:	eb04 0903 	add.w	r9, r4, r3
 80011b8:	f000 fb5a 	bl	8001870 <_sbrk_r>
 80011bc:	4581      	cmp	r9, r0
 80011be:	d142      	bne.n	8001246 <_malloc_r+0xea>
 80011c0:	6821      	ldr	r1, [r4, #0]
 80011c2:	1a6d      	subs	r5, r5, r1
 80011c4:	4629      	mov	r1, r5
 80011c6:	4630      	mov	r0, r6
 80011c8:	f7ff ffa6 	bl	8001118 <sbrk_aligned>
 80011cc:	3001      	adds	r0, #1
 80011ce:	d03a      	beq.n	8001246 <_malloc_r+0xea>
 80011d0:	6823      	ldr	r3, [r4, #0]
 80011d2:	442b      	add	r3, r5
 80011d4:	6023      	str	r3, [r4, #0]
 80011d6:	f8d8 3000 	ldr.w	r3, [r8]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	bb62      	cbnz	r2, 8001238 <_malloc_r+0xdc>
 80011de:	f8c8 7000 	str.w	r7, [r8]
 80011e2:	e00f      	b.n	8001204 <_malloc_r+0xa8>
 80011e4:	6822      	ldr	r2, [r4, #0]
 80011e6:	1b52      	subs	r2, r2, r5
 80011e8:	d420      	bmi.n	800122c <_malloc_r+0xd0>
 80011ea:	2a0b      	cmp	r2, #11
 80011ec:	d917      	bls.n	800121e <_malloc_r+0xc2>
 80011ee:	1961      	adds	r1, r4, r5
 80011f0:	42a3      	cmp	r3, r4
 80011f2:	6025      	str	r5, [r4, #0]
 80011f4:	bf18      	it	ne
 80011f6:	6059      	strne	r1, [r3, #4]
 80011f8:	6863      	ldr	r3, [r4, #4]
 80011fa:	bf08      	it	eq
 80011fc:	f8c8 1000 	streq.w	r1, [r8]
 8001200:	5162      	str	r2, [r4, r5]
 8001202:	604b      	str	r3, [r1, #4]
 8001204:	4630      	mov	r0, r6
 8001206:	f000 f82f 	bl	8001268 <__malloc_unlock>
 800120a:	f104 000b 	add.w	r0, r4, #11
 800120e:	1d23      	adds	r3, r4, #4
 8001210:	f020 0007 	bic.w	r0, r0, #7
 8001214:	1ac2      	subs	r2, r0, r3
 8001216:	bf1c      	itt	ne
 8001218:	1a1b      	subne	r3, r3, r0
 800121a:	50a3      	strne	r3, [r4, r2]
 800121c:	e7af      	b.n	800117e <_malloc_r+0x22>
 800121e:	6862      	ldr	r2, [r4, #4]
 8001220:	42a3      	cmp	r3, r4
 8001222:	bf0c      	ite	eq
 8001224:	f8c8 2000 	streq.w	r2, [r8]
 8001228:	605a      	strne	r2, [r3, #4]
 800122a:	e7eb      	b.n	8001204 <_malloc_r+0xa8>
 800122c:	4623      	mov	r3, r4
 800122e:	6864      	ldr	r4, [r4, #4]
 8001230:	e7ae      	b.n	8001190 <_malloc_r+0x34>
 8001232:	463c      	mov	r4, r7
 8001234:	687f      	ldr	r7, [r7, #4]
 8001236:	e7b6      	b.n	80011a6 <_malloc_r+0x4a>
 8001238:	461a      	mov	r2, r3
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	42a3      	cmp	r3, r4
 800123e:	d1fb      	bne.n	8001238 <_malloc_r+0xdc>
 8001240:	2300      	movs	r3, #0
 8001242:	6053      	str	r3, [r2, #4]
 8001244:	e7de      	b.n	8001204 <_malloc_r+0xa8>
 8001246:	230c      	movs	r3, #12
 8001248:	6033      	str	r3, [r6, #0]
 800124a:	4630      	mov	r0, r6
 800124c:	f000 f80c 	bl	8001268 <__malloc_unlock>
 8001250:	e794      	b.n	800117c <_malloc_r+0x20>
 8001252:	6005      	str	r5, [r0, #0]
 8001254:	e7d6      	b.n	8001204 <_malloc_r+0xa8>
 8001256:	bf00      	nop
 8001258:	200001cc 	.word	0x200001cc

0800125c <__malloc_lock>:
 800125c:	4801      	ldr	r0, [pc, #4]	@ (8001264 <__malloc_lock+0x8>)
 800125e:	f7ff bf0f 	b.w	8001080 <__retarget_lock_acquire_recursive>
 8001262:	bf00      	nop
 8001264:	200001c4 	.word	0x200001c4

08001268 <__malloc_unlock>:
 8001268:	4801      	ldr	r0, [pc, #4]	@ (8001270 <__malloc_unlock+0x8>)
 800126a:	f7ff bf0a 	b.w	8001082 <__retarget_lock_release_recursive>
 800126e:	bf00      	nop
 8001270:	200001c4 	.word	0x200001c4

08001274 <__ssputs_r>:
 8001274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001278:	688e      	ldr	r6, [r1, #8]
 800127a:	461f      	mov	r7, r3
 800127c:	42be      	cmp	r6, r7
 800127e:	680b      	ldr	r3, [r1, #0]
 8001280:	4682      	mov	sl, r0
 8001282:	460c      	mov	r4, r1
 8001284:	4690      	mov	r8, r2
 8001286:	d82d      	bhi.n	80012e4 <__ssputs_r+0x70>
 8001288:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800128c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001290:	d026      	beq.n	80012e0 <__ssputs_r+0x6c>
 8001292:	6965      	ldr	r5, [r4, #20]
 8001294:	6909      	ldr	r1, [r1, #16]
 8001296:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800129a:	eba3 0901 	sub.w	r9, r3, r1
 800129e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80012a2:	1c7b      	adds	r3, r7, #1
 80012a4:	444b      	add	r3, r9
 80012a6:	106d      	asrs	r5, r5, #1
 80012a8:	429d      	cmp	r5, r3
 80012aa:	bf38      	it	cc
 80012ac:	461d      	movcc	r5, r3
 80012ae:	0553      	lsls	r3, r2, #21
 80012b0:	d527      	bpl.n	8001302 <__ssputs_r+0x8e>
 80012b2:	4629      	mov	r1, r5
 80012b4:	f7ff ff52 	bl	800115c <_malloc_r>
 80012b8:	4606      	mov	r6, r0
 80012ba:	b360      	cbz	r0, 8001316 <__ssputs_r+0xa2>
 80012bc:	6921      	ldr	r1, [r4, #16]
 80012be:	464a      	mov	r2, r9
 80012c0:	f000 fae6 	bl	8001890 <memcpy>
 80012c4:	89a3      	ldrh	r3, [r4, #12]
 80012c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80012ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012ce:	81a3      	strh	r3, [r4, #12]
 80012d0:	6126      	str	r6, [r4, #16]
 80012d2:	6165      	str	r5, [r4, #20]
 80012d4:	444e      	add	r6, r9
 80012d6:	eba5 0509 	sub.w	r5, r5, r9
 80012da:	6026      	str	r6, [r4, #0]
 80012dc:	60a5      	str	r5, [r4, #8]
 80012de:	463e      	mov	r6, r7
 80012e0:	42be      	cmp	r6, r7
 80012e2:	d900      	bls.n	80012e6 <__ssputs_r+0x72>
 80012e4:	463e      	mov	r6, r7
 80012e6:	6820      	ldr	r0, [r4, #0]
 80012e8:	4632      	mov	r2, r6
 80012ea:	4641      	mov	r1, r8
 80012ec:	f000 faa6 	bl	800183c <memmove>
 80012f0:	68a3      	ldr	r3, [r4, #8]
 80012f2:	1b9b      	subs	r3, r3, r6
 80012f4:	60a3      	str	r3, [r4, #8]
 80012f6:	6823      	ldr	r3, [r4, #0]
 80012f8:	4433      	add	r3, r6
 80012fa:	6023      	str	r3, [r4, #0]
 80012fc:	2000      	movs	r0, #0
 80012fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001302:	462a      	mov	r2, r5
 8001304:	f000 fad2 	bl	80018ac <_realloc_r>
 8001308:	4606      	mov	r6, r0
 800130a:	2800      	cmp	r0, #0
 800130c:	d1e0      	bne.n	80012d0 <__ssputs_r+0x5c>
 800130e:	6921      	ldr	r1, [r4, #16]
 8001310:	4650      	mov	r0, sl
 8001312:	f7ff feb7 	bl	8001084 <_free_r>
 8001316:	230c      	movs	r3, #12
 8001318:	f8ca 3000 	str.w	r3, [sl]
 800131c:	89a3      	ldrh	r3, [r4, #12]
 800131e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001322:	81a3      	strh	r3, [r4, #12]
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	e7e9      	b.n	80012fe <__ssputs_r+0x8a>
	...

0800132c <_svfiprintf_r>:
 800132c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001330:	4698      	mov	r8, r3
 8001332:	898b      	ldrh	r3, [r1, #12]
 8001334:	061b      	lsls	r3, r3, #24
 8001336:	b09d      	sub	sp, #116	@ 0x74
 8001338:	4607      	mov	r7, r0
 800133a:	460d      	mov	r5, r1
 800133c:	4614      	mov	r4, r2
 800133e:	d510      	bpl.n	8001362 <_svfiprintf_r+0x36>
 8001340:	690b      	ldr	r3, [r1, #16]
 8001342:	b973      	cbnz	r3, 8001362 <_svfiprintf_r+0x36>
 8001344:	2140      	movs	r1, #64	@ 0x40
 8001346:	f7ff ff09 	bl	800115c <_malloc_r>
 800134a:	6028      	str	r0, [r5, #0]
 800134c:	6128      	str	r0, [r5, #16]
 800134e:	b930      	cbnz	r0, 800135e <_svfiprintf_r+0x32>
 8001350:	230c      	movs	r3, #12
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	f04f 30ff 	mov.w	r0, #4294967295
 8001358:	b01d      	add	sp, #116	@ 0x74
 800135a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800135e:	2340      	movs	r3, #64	@ 0x40
 8001360:	616b      	str	r3, [r5, #20]
 8001362:	2300      	movs	r3, #0
 8001364:	9309      	str	r3, [sp, #36]	@ 0x24
 8001366:	2320      	movs	r3, #32
 8001368:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800136c:	f8cd 800c 	str.w	r8, [sp, #12]
 8001370:	2330      	movs	r3, #48	@ 0x30
 8001372:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001510 <_svfiprintf_r+0x1e4>
 8001376:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800137a:	f04f 0901 	mov.w	r9, #1
 800137e:	4623      	mov	r3, r4
 8001380:	469a      	mov	sl, r3
 8001382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001386:	b10a      	cbz	r2, 800138c <_svfiprintf_r+0x60>
 8001388:	2a25      	cmp	r2, #37	@ 0x25
 800138a:	d1f9      	bne.n	8001380 <_svfiprintf_r+0x54>
 800138c:	ebba 0b04 	subs.w	fp, sl, r4
 8001390:	d00b      	beq.n	80013aa <_svfiprintf_r+0x7e>
 8001392:	465b      	mov	r3, fp
 8001394:	4622      	mov	r2, r4
 8001396:	4629      	mov	r1, r5
 8001398:	4638      	mov	r0, r7
 800139a:	f7ff ff6b 	bl	8001274 <__ssputs_r>
 800139e:	3001      	adds	r0, #1
 80013a0:	f000 80a7 	beq.w	80014f2 <_svfiprintf_r+0x1c6>
 80013a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80013a6:	445a      	add	r2, fp
 80013a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80013aa:	f89a 3000 	ldrb.w	r3, [sl]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 809f 	beq.w	80014f2 <_svfiprintf_r+0x1c6>
 80013b4:	2300      	movs	r3, #0
 80013b6:	f04f 32ff 	mov.w	r2, #4294967295
 80013ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80013be:	f10a 0a01 	add.w	sl, sl, #1
 80013c2:	9304      	str	r3, [sp, #16]
 80013c4:	9307      	str	r3, [sp, #28]
 80013c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80013ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80013cc:	4654      	mov	r4, sl
 80013ce:	2205      	movs	r2, #5
 80013d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013d4:	484e      	ldr	r0, [pc, #312]	@ (8001510 <_svfiprintf_r+0x1e4>)
 80013d6:	f7fe ff0b 	bl	80001f0 <memchr>
 80013da:	9a04      	ldr	r2, [sp, #16]
 80013dc:	b9d8      	cbnz	r0, 8001416 <_svfiprintf_r+0xea>
 80013de:	06d0      	lsls	r0, r2, #27
 80013e0:	bf44      	itt	mi
 80013e2:	2320      	movmi	r3, #32
 80013e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80013e8:	0711      	lsls	r1, r2, #28
 80013ea:	bf44      	itt	mi
 80013ec:	232b      	movmi	r3, #43	@ 0x2b
 80013ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80013f2:	f89a 3000 	ldrb.w	r3, [sl]
 80013f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80013f8:	d015      	beq.n	8001426 <_svfiprintf_r+0xfa>
 80013fa:	9a07      	ldr	r2, [sp, #28]
 80013fc:	4654      	mov	r4, sl
 80013fe:	2000      	movs	r0, #0
 8001400:	f04f 0c0a 	mov.w	ip, #10
 8001404:	4621      	mov	r1, r4
 8001406:	f811 3b01 	ldrb.w	r3, [r1], #1
 800140a:	3b30      	subs	r3, #48	@ 0x30
 800140c:	2b09      	cmp	r3, #9
 800140e:	d94b      	bls.n	80014a8 <_svfiprintf_r+0x17c>
 8001410:	b1b0      	cbz	r0, 8001440 <_svfiprintf_r+0x114>
 8001412:	9207      	str	r2, [sp, #28]
 8001414:	e014      	b.n	8001440 <_svfiprintf_r+0x114>
 8001416:	eba0 0308 	sub.w	r3, r0, r8
 800141a:	fa09 f303 	lsl.w	r3, r9, r3
 800141e:	4313      	orrs	r3, r2
 8001420:	9304      	str	r3, [sp, #16]
 8001422:	46a2      	mov	sl, r4
 8001424:	e7d2      	b.n	80013cc <_svfiprintf_r+0xa0>
 8001426:	9b03      	ldr	r3, [sp, #12]
 8001428:	1d19      	adds	r1, r3, #4
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	9103      	str	r1, [sp, #12]
 800142e:	2b00      	cmp	r3, #0
 8001430:	bfbb      	ittet	lt
 8001432:	425b      	neglt	r3, r3
 8001434:	f042 0202 	orrlt.w	r2, r2, #2
 8001438:	9307      	strge	r3, [sp, #28]
 800143a:	9307      	strlt	r3, [sp, #28]
 800143c:	bfb8      	it	lt
 800143e:	9204      	strlt	r2, [sp, #16]
 8001440:	7823      	ldrb	r3, [r4, #0]
 8001442:	2b2e      	cmp	r3, #46	@ 0x2e
 8001444:	d10a      	bne.n	800145c <_svfiprintf_r+0x130>
 8001446:	7863      	ldrb	r3, [r4, #1]
 8001448:	2b2a      	cmp	r3, #42	@ 0x2a
 800144a:	d132      	bne.n	80014b2 <_svfiprintf_r+0x186>
 800144c:	9b03      	ldr	r3, [sp, #12]
 800144e:	1d1a      	adds	r2, r3, #4
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	9203      	str	r2, [sp, #12]
 8001454:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001458:	3402      	adds	r4, #2
 800145a:	9305      	str	r3, [sp, #20]
 800145c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001520 <_svfiprintf_r+0x1f4>
 8001460:	7821      	ldrb	r1, [r4, #0]
 8001462:	2203      	movs	r2, #3
 8001464:	4650      	mov	r0, sl
 8001466:	f7fe fec3 	bl	80001f0 <memchr>
 800146a:	b138      	cbz	r0, 800147c <_svfiprintf_r+0x150>
 800146c:	9b04      	ldr	r3, [sp, #16]
 800146e:	eba0 000a 	sub.w	r0, r0, sl
 8001472:	2240      	movs	r2, #64	@ 0x40
 8001474:	4082      	lsls	r2, r0
 8001476:	4313      	orrs	r3, r2
 8001478:	3401      	adds	r4, #1
 800147a:	9304      	str	r3, [sp, #16]
 800147c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001480:	4824      	ldr	r0, [pc, #144]	@ (8001514 <_svfiprintf_r+0x1e8>)
 8001482:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001486:	2206      	movs	r2, #6
 8001488:	f7fe feb2 	bl	80001f0 <memchr>
 800148c:	2800      	cmp	r0, #0
 800148e:	d036      	beq.n	80014fe <_svfiprintf_r+0x1d2>
 8001490:	4b21      	ldr	r3, [pc, #132]	@ (8001518 <_svfiprintf_r+0x1ec>)
 8001492:	bb1b      	cbnz	r3, 80014dc <_svfiprintf_r+0x1b0>
 8001494:	9b03      	ldr	r3, [sp, #12]
 8001496:	3307      	adds	r3, #7
 8001498:	f023 0307 	bic.w	r3, r3, #7
 800149c:	3308      	adds	r3, #8
 800149e:	9303      	str	r3, [sp, #12]
 80014a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80014a2:	4433      	add	r3, r6
 80014a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80014a6:	e76a      	b.n	800137e <_svfiprintf_r+0x52>
 80014a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80014ac:	460c      	mov	r4, r1
 80014ae:	2001      	movs	r0, #1
 80014b0:	e7a8      	b.n	8001404 <_svfiprintf_r+0xd8>
 80014b2:	2300      	movs	r3, #0
 80014b4:	3401      	adds	r4, #1
 80014b6:	9305      	str	r3, [sp, #20]
 80014b8:	4619      	mov	r1, r3
 80014ba:	f04f 0c0a 	mov.w	ip, #10
 80014be:	4620      	mov	r0, r4
 80014c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80014c4:	3a30      	subs	r2, #48	@ 0x30
 80014c6:	2a09      	cmp	r2, #9
 80014c8:	d903      	bls.n	80014d2 <_svfiprintf_r+0x1a6>
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0c6      	beq.n	800145c <_svfiprintf_r+0x130>
 80014ce:	9105      	str	r1, [sp, #20]
 80014d0:	e7c4      	b.n	800145c <_svfiprintf_r+0x130>
 80014d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80014d6:	4604      	mov	r4, r0
 80014d8:	2301      	movs	r3, #1
 80014da:	e7f0      	b.n	80014be <_svfiprintf_r+0x192>
 80014dc:	ab03      	add	r3, sp, #12
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	462a      	mov	r2, r5
 80014e2:	4b0e      	ldr	r3, [pc, #56]	@ (800151c <_svfiprintf_r+0x1f0>)
 80014e4:	a904      	add	r1, sp, #16
 80014e6:	4638      	mov	r0, r7
 80014e8:	f3af 8000 	nop.w
 80014ec:	1c42      	adds	r2, r0, #1
 80014ee:	4606      	mov	r6, r0
 80014f0:	d1d6      	bne.n	80014a0 <_svfiprintf_r+0x174>
 80014f2:	89ab      	ldrh	r3, [r5, #12]
 80014f4:	065b      	lsls	r3, r3, #25
 80014f6:	f53f af2d 	bmi.w	8001354 <_svfiprintf_r+0x28>
 80014fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80014fc:	e72c      	b.n	8001358 <_svfiprintf_r+0x2c>
 80014fe:	ab03      	add	r3, sp, #12
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	462a      	mov	r2, r5
 8001504:	4b05      	ldr	r3, [pc, #20]	@ (800151c <_svfiprintf_r+0x1f0>)
 8001506:	a904      	add	r1, sp, #16
 8001508:	4638      	mov	r0, r7
 800150a:	f000 f879 	bl	8001600 <_printf_i>
 800150e:	e7ed      	b.n	80014ec <_svfiprintf_r+0x1c0>
 8001510:	08001adf 	.word	0x08001adf
 8001514:	08001ae9 	.word	0x08001ae9
 8001518:	00000000 	.word	0x00000000
 800151c:	08001275 	.word	0x08001275
 8001520:	08001ae5 	.word	0x08001ae5

08001524 <_printf_common>:
 8001524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001528:	4616      	mov	r6, r2
 800152a:	4698      	mov	r8, r3
 800152c:	688a      	ldr	r2, [r1, #8]
 800152e:	690b      	ldr	r3, [r1, #16]
 8001530:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001534:	4293      	cmp	r3, r2
 8001536:	bfb8      	it	lt
 8001538:	4613      	movlt	r3, r2
 800153a:	6033      	str	r3, [r6, #0]
 800153c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001540:	4607      	mov	r7, r0
 8001542:	460c      	mov	r4, r1
 8001544:	b10a      	cbz	r2, 800154a <_printf_common+0x26>
 8001546:	3301      	adds	r3, #1
 8001548:	6033      	str	r3, [r6, #0]
 800154a:	6823      	ldr	r3, [r4, #0]
 800154c:	0699      	lsls	r1, r3, #26
 800154e:	bf42      	ittt	mi
 8001550:	6833      	ldrmi	r3, [r6, #0]
 8001552:	3302      	addmi	r3, #2
 8001554:	6033      	strmi	r3, [r6, #0]
 8001556:	6825      	ldr	r5, [r4, #0]
 8001558:	f015 0506 	ands.w	r5, r5, #6
 800155c:	d106      	bne.n	800156c <_printf_common+0x48>
 800155e:	f104 0a19 	add.w	sl, r4, #25
 8001562:	68e3      	ldr	r3, [r4, #12]
 8001564:	6832      	ldr	r2, [r6, #0]
 8001566:	1a9b      	subs	r3, r3, r2
 8001568:	42ab      	cmp	r3, r5
 800156a:	dc26      	bgt.n	80015ba <_printf_common+0x96>
 800156c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001570:	6822      	ldr	r2, [r4, #0]
 8001572:	3b00      	subs	r3, #0
 8001574:	bf18      	it	ne
 8001576:	2301      	movne	r3, #1
 8001578:	0692      	lsls	r2, r2, #26
 800157a:	d42b      	bmi.n	80015d4 <_printf_common+0xb0>
 800157c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001580:	4641      	mov	r1, r8
 8001582:	4638      	mov	r0, r7
 8001584:	47c8      	blx	r9
 8001586:	3001      	adds	r0, #1
 8001588:	d01e      	beq.n	80015c8 <_printf_common+0xa4>
 800158a:	6823      	ldr	r3, [r4, #0]
 800158c:	6922      	ldr	r2, [r4, #16]
 800158e:	f003 0306 	and.w	r3, r3, #6
 8001592:	2b04      	cmp	r3, #4
 8001594:	bf02      	ittt	eq
 8001596:	68e5      	ldreq	r5, [r4, #12]
 8001598:	6833      	ldreq	r3, [r6, #0]
 800159a:	1aed      	subeq	r5, r5, r3
 800159c:	68a3      	ldr	r3, [r4, #8]
 800159e:	bf0c      	ite	eq
 80015a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80015a4:	2500      	movne	r5, #0
 80015a6:	4293      	cmp	r3, r2
 80015a8:	bfc4      	itt	gt
 80015aa:	1a9b      	subgt	r3, r3, r2
 80015ac:	18ed      	addgt	r5, r5, r3
 80015ae:	2600      	movs	r6, #0
 80015b0:	341a      	adds	r4, #26
 80015b2:	42b5      	cmp	r5, r6
 80015b4:	d11a      	bne.n	80015ec <_printf_common+0xc8>
 80015b6:	2000      	movs	r0, #0
 80015b8:	e008      	b.n	80015cc <_printf_common+0xa8>
 80015ba:	2301      	movs	r3, #1
 80015bc:	4652      	mov	r2, sl
 80015be:	4641      	mov	r1, r8
 80015c0:	4638      	mov	r0, r7
 80015c2:	47c8      	blx	r9
 80015c4:	3001      	adds	r0, #1
 80015c6:	d103      	bne.n	80015d0 <_printf_common+0xac>
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015d0:	3501      	adds	r5, #1
 80015d2:	e7c6      	b.n	8001562 <_printf_common+0x3e>
 80015d4:	18e1      	adds	r1, r4, r3
 80015d6:	1c5a      	adds	r2, r3, #1
 80015d8:	2030      	movs	r0, #48	@ 0x30
 80015da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80015de:	4422      	add	r2, r4
 80015e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80015e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80015e8:	3302      	adds	r3, #2
 80015ea:	e7c7      	b.n	800157c <_printf_common+0x58>
 80015ec:	2301      	movs	r3, #1
 80015ee:	4622      	mov	r2, r4
 80015f0:	4641      	mov	r1, r8
 80015f2:	4638      	mov	r0, r7
 80015f4:	47c8      	blx	r9
 80015f6:	3001      	adds	r0, #1
 80015f8:	d0e6      	beq.n	80015c8 <_printf_common+0xa4>
 80015fa:	3601      	adds	r6, #1
 80015fc:	e7d9      	b.n	80015b2 <_printf_common+0x8e>
	...

08001600 <_printf_i>:
 8001600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001604:	7e0f      	ldrb	r7, [r1, #24]
 8001606:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001608:	2f78      	cmp	r7, #120	@ 0x78
 800160a:	4691      	mov	r9, r2
 800160c:	4680      	mov	r8, r0
 800160e:	460c      	mov	r4, r1
 8001610:	469a      	mov	sl, r3
 8001612:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001616:	d807      	bhi.n	8001628 <_printf_i+0x28>
 8001618:	2f62      	cmp	r7, #98	@ 0x62
 800161a:	d80a      	bhi.n	8001632 <_printf_i+0x32>
 800161c:	2f00      	cmp	r7, #0
 800161e:	f000 80d1 	beq.w	80017c4 <_printf_i+0x1c4>
 8001622:	2f58      	cmp	r7, #88	@ 0x58
 8001624:	f000 80b8 	beq.w	8001798 <_printf_i+0x198>
 8001628:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800162c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001630:	e03a      	b.n	80016a8 <_printf_i+0xa8>
 8001632:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001636:	2b15      	cmp	r3, #21
 8001638:	d8f6      	bhi.n	8001628 <_printf_i+0x28>
 800163a:	a101      	add	r1, pc, #4	@ (adr r1, 8001640 <_printf_i+0x40>)
 800163c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001640:	08001699 	.word	0x08001699
 8001644:	080016ad 	.word	0x080016ad
 8001648:	08001629 	.word	0x08001629
 800164c:	08001629 	.word	0x08001629
 8001650:	08001629 	.word	0x08001629
 8001654:	08001629 	.word	0x08001629
 8001658:	080016ad 	.word	0x080016ad
 800165c:	08001629 	.word	0x08001629
 8001660:	08001629 	.word	0x08001629
 8001664:	08001629 	.word	0x08001629
 8001668:	08001629 	.word	0x08001629
 800166c:	080017ab 	.word	0x080017ab
 8001670:	080016d7 	.word	0x080016d7
 8001674:	08001765 	.word	0x08001765
 8001678:	08001629 	.word	0x08001629
 800167c:	08001629 	.word	0x08001629
 8001680:	080017cd 	.word	0x080017cd
 8001684:	08001629 	.word	0x08001629
 8001688:	080016d7 	.word	0x080016d7
 800168c:	08001629 	.word	0x08001629
 8001690:	08001629 	.word	0x08001629
 8001694:	0800176d 	.word	0x0800176d
 8001698:	6833      	ldr	r3, [r6, #0]
 800169a:	1d1a      	adds	r2, r3, #4
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6032      	str	r2, [r6, #0]
 80016a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80016a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80016a8:	2301      	movs	r3, #1
 80016aa:	e09c      	b.n	80017e6 <_printf_i+0x1e6>
 80016ac:	6833      	ldr	r3, [r6, #0]
 80016ae:	6820      	ldr	r0, [r4, #0]
 80016b0:	1d19      	adds	r1, r3, #4
 80016b2:	6031      	str	r1, [r6, #0]
 80016b4:	0606      	lsls	r6, r0, #24
 80016b6:	d501      	bpl.n	80016bc <_printf_i+0xbc>
 80016b8:	681d      	ldr	r5, [r3, #0]
 80016ba:	e003      	b.n	80016c4 <_printf_i+0xc4>
 80016bc:	0645      	lsls	r5, r0, #25
 80016be:	d5fb      	bpl.n	80016b8 <_printf_i+0xb8>
 80016c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80016c4:	2d00      	cmp	r5, #0
 80016c6:	da03      	bge.n	80016d0 <_printf_i+0xd0>
 80016c8:	232d      	movs	r3, #45	@ 0x2d
 80016ca:	426d      	negs	r5, r5
 80016cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80016d0:	4858      	ldr	r0, [pc, #352]	@ (8001834 <_printf_i+0x234>)
 80016d2:	230a      	movs	r3, #10
 80016d4:	e011      	b.n	80016fa <_printf_i+0xfa>
 80016d6:	6821      	ldr	r1, [r4, #0]
 80016d8:	6833      	ldr	r3, [r6, #0]
 80016da:	0608      	lsls	r0, r1, #24
 80016dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80016e0:	d402      	bmi.n	80016e8 <_printf_i+0xe8>
 80016e2:	0649      	lsls	r1, r1, #25
 80016e4:	bf48      	it	mi
 80016e6:	b2ad      	uxthmi	r5, r5
 80016e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80016ea:	4852      	ldr	r0, [pc, #328]	@ (8001834 <_printf_i+0x234>)
 80016ec:	6033      	str	r3, [r6, #0]
 80016ee:	bf14      	ite	ne
 80016f0:	230a      	movne	r3, #10
 80016f2:	2308      	moveq	r3, #8
 80016f4:	2100      	movs	r1, #0
 80016f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80016fa:	6866      	ldr	r6, [r4, #4]
 80016fc:	60a6      	str	r6, [r4, #8]
 80016fe:	2e00      	cmp	r6, #0
 8001700:	db05      	blt.n	800170e <_printf_i+0x10e>
 8001702:	6821      	ldr	r1, [r4, #0]
 8001704:	432e      	orrs	r6, r5
 8001706:	f021 0104 	bic.w	r1, r1, #4
 800170a:	6021      	str	r1, [r4, #0]
 800170c:	d04b      	beq.n	80017a6 <_printf_i+0x1a6>
 800170e:	4616      	mov	r6, r2
 8001710:	fbb5 f1f3 	udiv	r1, r5, r3
 8001714:	fb03 5711 	mls	r7, r3, r1, r5
 8001718:	5dc7      	ldrb	r7, [r0, r7]
 800171a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800171e:	462f      	mov	r7, r5
 8001720:	42bb      	cmp	r3, r7
 8001722:	460d      	mov	r5, r1
 8001724:	d9f4      	bls.n	8001710 <_printf_i+0x110>
 8001726:	2b08      	cmp	r3, #8
 8001728:	d10b      	bne.n	8001742 <_printf_i+0x142>
 800172a:	6823      	ldr	r3, [r4, #0]
 800172c:	07df      	lsls	r7, r3, #31
 800172e:	d508      	bpl.n	8001742 <_printf_i+0x142>
 8001730:	6923      	ldr	r3, [r4, #16]
 8001732:	6861      	ldr	r1, [r4, #4]
 8001734:	4299      	cmp	r1, r3
 8001736:	bfde      	ittt	le
 8001738:	2330      	movle	r3, #48	@ 0x30
 800173a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800173e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001742:	1b92      	subs	r2, r2, r6
 8001744:	6122      	str	r2, [r4, #16]
 8001746:	f8cd a000 	str.w	sl, [sp]
 800174a:	464b      	mov	r3, r9
 800174c:	aa03      	add	r2, sp, #12
 800174e:	4621      	mov	r1, r4
 8001750:	4640      	mov	r0, r8
 8001752:	f7ff fee7 	bl	8001524 <_printf_common>
 8001756:	3001      	adds	r0, #1
 8001758:	d14a      	bne.n	80017f0 <_printf_i+0x1f0>
 800175a:	f04f 30ff 	mov.w	r0, #4294967295
 800175e:	b004      	add	sp, #16
 8001760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001764:	6823      	ldr	r3, [r4, #0]
 8001766:	f043 0320 	orr.w	r3, r3, #32
 800176a:	6023      	str	r3, [r4, #0]
 800176c:	4832      	ldr	r0, [pc, #200]	@ (8001838 <_printf_i+0x238>)
 800176e:	2778      	movs	r7, #120	@ 0x78
 8001770:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001774:	6823      	ldr	r3, [r4, #0]
 8001776:	6831      	ldr	r1, [r6, #0]
 8001778:	061f      	lsls	r7, r3, #24
 800177a:	f851 5b04 	ldr.w	r5, [r1], #4
 800177e:	d402      	bmi.n	8001786 <_printf_i+0x186>
 8001780:	065f      	lsls	r7, r3, #25
 8001782:	bf48      	it	mi
 8001784:	b2ad      	uxthmi	r5, r5
 8001786:	6031      	str	r1, [r6, #0]
 8001788:	07d9      	lsls	r1, r3, #31
 800178a:	bf44      	itt	mi
 800178c:	f043 0320 	orrmi.w	r3, r3, #32
 8001790:	6023      	strmi	r3, [r4, #0]
 8001792:	b11d      	cbz	r5, 800179c <_printf_i+0x19c>
 8001794:	2310      	movs	r3, #16
 8001796:	e7ad      	b.n	80016f4 <_printf_i+0xf4>
 8001798:	4826      	ldr	r0, [pc, #152]	@ (8001834 <_printf_i+0x234>)
 800179a:	e7e9      	b.n	8001770 <_printf_i+0x170>
 800179c:	6823      	ldr	r3, [r4, #0]
 800179e:	f023 0320 	bic.w	r3, r3, #32
 80017a2:	6023      	str	r3, [r4, #0]
 80017a4:	e7f6      	b.n	8001794 <_printf_i+0x194>
 80017a6:	4616      	mov	r6, r2
 80017a8:	e7bd      	b.n	8001726 <_printf_i+0x126>
 80017aa:	6833      	ldr	r3, [r6, #0]
 80017ac:	6825      	ldr	r5, [r4, #0]
 80017ae:	6961      	ldr	r1, [r4, #20]
 80017b0:	1d18      	adds	r0, r3, #4
 80017b2:	6030      	str	r0, [r6, #0]
 80017b4:	062e      	lsls	r6, r5, #24
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	d501      	bpl.n	80017be <_printf_i+0x1be>
 80017ba:	6019      	str	r1, [r3, #0]
 80017bc:	e002      	b.n	80017c4 <_printf_i+0x1c4>
 80017be:	0668      	lsls	r0, r5, #25
 80017c0:	d5fb      	bpl.n	80017ba <_printf_i+0x1ba>
 80017c2:	8019      	strh	r1, [r3, #0]
 80017c4:	2300      	movs	r3, #0
 80017c6:	6123      	str	r3, [r4, #16]
 80017c8:	4616      	mov	r6, r2
 80017ca:	e7bc      	b.n	8001746 <_printf_i+0x146>
 80017cc:	6833      	ldr	r3, [r6, #0]
 80017ce:	1d1a      	adds	r2, r3, #4
 80017d0:	6032      	str	r2, [r6, #0]
 80017d2:	681e      	ldr	r6, [r3, #0]
 80017d4:	6862      	ldr	r2, [r4, #4]
 80017d6:	2100      	movs	r1, #0
 80017d8:	4630      	mov	r0, r6
 80017da:	f7fe fd09 	bl	80001f0 <memchr>
 80017de:	b108      	cbz	r0, 80017e4 <_printf_i+0x1e4>
 80017e0:	1b80      	subs	r0, r0, r6
 80017e2:	6060      	str	r0, [r4, #4]
 80017e4:	6863      	ldr	r3, [r4, #4]
 80017e6:	6123      	str	r3, [r4, #16]
 80017e8:	2300      	movs	r3, #0
 80017ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80017ee:	e7aa      	b.n	8001746 <_printf_i+0x146>
 80017f0:	6923      	ldr	r3, [r4, #16]
 80017f2:	4632      	mov	r2, r6
 80017f4:	4649      	mov	r1, r9
 80017f6:	4640      	mov	r0, r8
 80017f8:	47d0      	blx	sl
 80017fa:	3001      	adds	r0, #1
 80017fc:	d0ad      	beq.n	800175a <_printf_i+0x15a>
 80017fe:	6823      	ldr	r3, [r4, #0]
 8001800:	079b      	lsls	r3, r3, #30
 8001802:	d413      	bmi.n	800182c <_printf_i+0x22c>
 8001804:	68e0      	ldr	r0, [r4, #12]
 8001806:	9b03      	ldr	r3, [sp, #12]
 8001808:	4298      	cmp	r0, r3
 800180a:	bfb8      	it	lt
 800180c:	4618      	movlt	r0, r3
 800180e:	e7a6      	b.n	800175e <_printf_i+0x15e>
 8001810:	2301      	movs	r3, #1
 8001812:	4632      	mov	r2, r6
 8001814:	4649      	mov	r1, r9
 8001816:	4640      	mov	r0, r8
 8001818:	47d0      	blx	sl
 800181a:	3001      	adds	r0, #1
 800181c:	d09d      	beq.n	800175a <_printf_i+0x15a>
 800181e:	3501      	adds	r5, #1
 8001820:	68e3      	ldr	r3, [r4, #12]
 8001822:	9903      	ldr	r1, [sp, #12]
 8001824:	1a5b      	subs	r3, r3, r1
 8001826:	42ab      	cmp	r3, r5
 8001828:	dcf2      	bgt.n	8001810 <_printf_i+0x210>
 800182a:	e7eb      	b.n	8001804 <_printf_i+0x204>
 800182c:	2500      	movs	r5, #0
 800182e:	f104 0619 	add.w	r6, r4, #25
 8001832:	e7f5      	b.n	8001820 <_printf_i+0x220>
 8001834:	08001af0 	.word	0x08001af0
 8001838:	08001b01 	.word	0x08001b01

0800183c <memmove>:
 800183c:	4288      	cmp	r0, r1
 800183e:	b510      	push	{r4, lr}
 8001840:	eb01 0402 	add.w	r4, r1, r2
 8001844:	d902      	bls.n	800184c <memmove+0x10>
 8001846:	4284      	cmp	r4, r0
 8001848:	4623      	mov	r3, r4
 800184a:	d807      	bhi.n	800185c <memmove+0x20>
 800184c:	1e43      	subs	r3, r0, #1
 800184e:	42a1      	cmp	r1, r4
 8001850:	d008      	beq.n	8001864 <memmove+0x28>
 8001852:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001856:	f803 2f01 	strb.w	r2, [r3, #1]!
 800185a:	e7f8      	b.n	800184e <memmove+0x12>
 800185c:	4402      	add	r2, r0
 800185e:	4601      	mov	r1, r0
 8001860:	428a      	cmp	r2, r1
 8001862:	d100      	bne.n	8001866 <memmove+0x2a>
 8001864:	bd10      	pop	{r4, pc}
 8001866:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800186a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800186e:	e7f7      	b.n	8001860 <memmove+0x24>

08001870 <_sbrk_r>:
 8001870:	b538      	push	{r3, r4, r5, lr}
 8001872:	4d06      	ldr	r5, [pc, #24]	@ (800188c <_sbrk_r+0x1c>)
 8001874:	2300      	movs	r3, #0
 8001876:	4604      	mov	r4, r0
 8001878:	4608      	mov	r0, r1
 800187a:	602b      	str	r3, [r5, #0]
 800187c:	f000 f84c 	bl	8001918 <_sbrk>
 8001880:	1c43      	adds	r3, r0, #1
 8001882:	d102      	bne.n	800188a <_sbrk_r+0x1a>
 8001884:	682b      	ldr	r3, [r5, #0]
 8001886:	b103      	cbz	r3, 800188a <_sbrk_r+0x1a>
 8001888:	6023      	str	r3, [r4, #0]
 800188a:	bd38      	pop	{r3, r4, r5, pc}
 800188c:	200001c0 	.word	0x200001c0

08001890 <memcpy>:
 8001890:	440a      	add	r2, r1
 8001892:	4291      	cmp	r1, r2
 8001894:	f100 33ff 	add.w	r3, r0, #4294967295
 8001898:	d100      	bne.n	800189c <memcpy+0xc>
 800189a:	4770      	bx	lr
 800189c:	b510      	push	{r4, lr}
 800189e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80018a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80018a6:	4291      	cmp	r1, r2
 80018a8:	d1f9      	bne.n	800189e <memcpy+0xe>
 80018aa:	bd10      	pop	{r4, pc}

080018ac <_realloc_r>:
 80018ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018b0:	4607      	mov	r7, r0
 80018b2:	4614      	mov	r4, r2
 80018b4:	460d      	mov	r5, r1
 80018b6:	b921      	cbnz	r1, 80018c2 <_realloc_r+0x16>
 80018b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80018bc:	4611      	mov	r1, r2
 80018be:	f7ff bc4d 	b.w	800115c <_malloc_r>
 80018c2:	b92a      	cbnz	r2, 80018d0 <_realloc_r+0x24>
 80018c4:	f7ff fbde 	bl	8001084 <_free_r>
 80018c8:	4625      	mov	r5, r4
 80018ca:	4628      	mov	r0, r5
 80018cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018d0:	f000 f81a 	bl	8001908 <_malloc_usable_size_r>
 80018d4:	4284      	cmp	r4, r0
 80018d6:	4606      	mov	r6, r0
 80018d8:	d802      	bhi.n	80018e0 <_realloc_r+0x34>
 80018da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80018de:	d8f4      	bhi.n	80018ca <_realloc_r+0x1e>
 80018e0:	4621      	mov	r1, r4
 80018e2:	4638      	mov	r0, r7
 80018e4:	f7ff fc3a 	bl	800115c <_malloc_r>
 80018e8:	4680      	mov	r8, r0
 80018ea:	b908      	cbnz	r0, 80018f0 <_realloc_r+0x44>
 80018ec:	4645      	mov	r5, r8
 80018ee:	e7ec      	b.n	80018ca <_realloc_r+0x1e>
 80018f0:	42b4      	cmp	r4, r6
 80018f2:	4622      	mov	r2, r4
 80018f4:	4629      	mov	r1, r5
 80018f6:	bf28      	it	cs
 80018f8:	4632      	movcs	r2, r6
 80018fa:	f7ff ffc9 	bl	8001890 <memcpy>
 80018fe:	4629      	mov	r1, r5
 8001900:	4638      	mov	r0, r7
 8001902:	f7ff fbbf 	bl	8001084 <_free_r>
 8001906:	e7f1      	b.n	80018ec <_realloc_r+0x40>

08001908 <_malloc_usable_size_r>:
 8001908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800190c:	1f18      	subs	r0, r3, #4
 800190e:	2b00      	cmp	r3, #0
 8001910:	bfbc      	itt	lt
 8001912:	580b      	ldrlt	r3, [r1, r0]
 8001914:	18c0      	addlt	r0, r0, r3
 8001916:	4770      	bx	lr

08001918 <_sbrk>:
 8001918:	4a04      	ldr	r2, [pc, #16]	@ (800192c <_sbrk+0x14>)
 800191a:	6811      	ldr	r1, [r2, #0]
 800191c:	4603      	mov	r3, r0
 800191e:	b909      	cbnz	r1, 8001924 <_sbrk+0xc>
 8001920:	4903      	ldr	r1, [pc, #12]	@ (8001930 <_sbrk+0x18>)
 8001922:	6011      	str	r1, [r2, #0]
 8001924:	6810      	ldr	r0, [r2, #0]
 8001926:	4403      	add	r3, r0
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	4770      	bx	lr
 800192c:	200001d0 	.word	0x200001d0
 8001930:	200001d8 	.word	0x200001d8

08001934 <_init>:
 8001934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001936:	bf00      	nop
 8001938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800193a:	bc08      	pop	{r3}
 800193c:	469e      	mov	lr, r3
 800193e:	4770      	bx	lr

08001940 <_fini>:
 8001940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001942:	bf00      	nop
 8001944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001946:	bc08      	pop	{r3}
 8001948:	469e      	mov	lr, r3
 800194a:	4770      	bx	lr
