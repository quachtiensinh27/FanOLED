
OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000173c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  080018dc  080018dc  000028dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001aa4  08001aa4  00003054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001aa4  08001aa4  00002aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001aac  08001aac  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001aac  08001aac  00002aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001ab0  08001ab0  00002ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08001ab4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000054  08001b08  00003054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08001b08  000031d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000304b  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d28  00000000  00000000  000060cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000278  00000000  00000000  00006df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001a7  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015445  00000000  00000000  00007217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000554a  00000000  00000000  0001c65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083578  00000000  00000000  00021ba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a511e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b78  00000000  00000000  000a5164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000a5cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000054 	.word	0x20000054
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080018c4 	.word	0x080018c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000058 	.word	0x20000058
 80001dc:	080018c4 	.word	0x080018c4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db0b      	blt.n	80002ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	f003 021f 	and.w	r2, r3, #31
 80002a8:	4907      	ldr	r1, [pc, #28]	@ (80002c8 <__NVIC_EnableIRQ+0x38>)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	095b      	lsrs	r3, r3, #5
 80002b0:	2001      	movs	r0, #1
 80002b2:	fa00 f202 	lsl.w	r2, r0, r2
 80002b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	e000e100 	.word	0xe000e100

080002cc <ADC_Init>:
#include "adc.h"
#include "system.h"

volatile uint16_t adc_latest_value = 0;

void ADC_Init(void) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80002d0:	4b17      	ldr	r3, [pc, #92]	@ (8000330 <ADC_Init+0x64>)
 80002d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002d4:	4a16      	ldr	r2, [pc, #88]	@ (8000330 <ADC_Init+0x64>)
 80002d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002da:	6453      	str	r3, [r2, #68]	@ 0x44
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002dc:	4b14      	ldr	r3, [pc, #80]	@ (8000330 <ADC_Init+0x64>)
 80002de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e0:	4a13      	ldr	r2, [pc, #76]	@ (8000330 <ADC_Init+0x64>)
 80002e2:	f043 0301 	orr.w	r3, r3, #1
 80002e6:	6313      	str	r3, [r2, #48]	@ 0x30

    GPIOA->MODER |= (3 << (0 * 2));
 80002e8:	4b12      	ldr	r3, [pc, #72]	@ (8000334 <ADC_Init+0x68>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a11      	ldr	r2, [pc, #68]	@ (8000334 <ADC_Init+0x68>)
 80002ee:	f043 0303 	orr.w	r3, r3, #3
 80002f2:	6013      	str	r3, [r2, #0]

    ADC1->SQR3 = 0;
 80002f4:	4b10      	ldr	r3, [pc, #64]	@ (8000338 <ADC_Init+0x6c>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	635a      	str	r2, [r3, #52]	@ 0x34
    ADC1->SMPR2 |= (7 << 0);
 80002fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000338 <ADC_Init+0x6c>)
 80002fc:	691b      	ldr	r3, [r3, #16]
 80002fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000338 <ADC_Init+0x6c>)
 8000300:	f043 0307 	orr.w	r3, r3, #7
 8000304:	6113      	str	r3, [r2, #16]
    ADC1->CR2 |= ADC_CR2_ADON;
 8000306:	4b0c      	ldr	r3, [pc, #48]	@ (8000338 <ADC_Init+0x6c>)
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	4a0b      	ldr	r2, [pc, #44]	@ (8000338 <ADC_Init+0x6c>)
 800030c:	f043 0301 	orr.w	r3, r3, #1
 8000310:	6093      	str	r3, [r2, #8]

    ADC1->CR1 |= ADC_CR1_EOCIE;
 8000312:	4b09      	ldr	r3, [pc, #36]	@ (8000338 <ADC_Init+0x6c>)
 8000314:	685b      	ldr	r3, [r3, #4]
 8000316:	4a08      	ldr	r2, [pc, #32]	@ (8000338 <ADC_Init+0x6c>)
 8000318:	f043 0320 	orr.w	r3, r3, #32
 800031c:	6053      	str	r3, [r2, #4]
    NVIC_EnableIRQ(ADC_IRQn);
 800031e:	2012      	movs	r0, #18
 8000320:	f7ff ffb6 	bl	8000290 <__NVIC_EnableIRQ>

    Delay_ms(2);
 8000324:	2002      	movs	r0, #2
 8000326:	f000 fcf5 	bl	8000d14 <Delay_ms>
}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	40023800 	.word	0x40023800
 8000334:	40020000 	.word	0x40020000
 8000338:	40012000 	.word	0x40012000

0800033c <ADC_IRQHandler>:

void ADC_IRQHandler(void) {
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
    if (ADC1->SR & ADC_SR_EOC) {
 8000340:	4b07      	ldr	r3, [pc, #28]	@ (8000360 <ADC_IRQHandler+0x24>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	f003 0302 	and.w	r3, r3, #2
 8000348:	2b00      	cmp	r3, #0
 800034a:	d004      	beq.n	8000356 <ADC_IRQHandler+0x1a>
        adc_latest_value = ADC1->DR;
 800034c:	4b04      	ldr	r3, [pc, #16]	@ (8000360 <ADC_IRQHandler+0x24>)
 800034e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000350:	b29a      	uxth	r2, r3
 8000352:	4b04      	ldr	r3, [pc, #16]	@ (8000364 <ADC_IRQHandler+0x28>)
 8000354:	801a      	strh	r2, [r3, #0]
    }
}
 8000356:	bf00      	nop
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	40012000 	.word	0x40012000
 8000364:	20000070 	.word	0x20000070

08000368 <Mode_Update_From_ADC>:

uint8_t Mode_Update_From_ADC(void) {
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
    uint16_t adc_value = adc_latest_value;
 800036e:	4b0e      	ldr	r3, [pc, #56]	@ (80003a8 <Mode_Update_From_ADC+0x40>)
 8000370:	881b      	ldrh	r3, [r3, #0]
 8000372:	80fb      	strh	r3, [r7, #6]
    if (adc_value < 200) return 0;
 8000374:	88fb      	ldrh	r3, [r7, #6]
 8000376:	2bc7      	cmp	r3, #199	@ 0xc7
 8000378:	d801      	bhi.n	800037e <Mode_Update_From_ADC+0x16>
 800037a:	2300      	movs	r3, #0
 800037c:	e00e      	b.n	800039c <Mode_Update_From_ADC+0x34>
    else if (adc_value < 1365) return 1;
 800037e:	88fb      	ldrh	r3, [r7, #6]
 8000380:	f240 5254 	movw	r2, #1364	@ 0x554
 8000384:	4293      	cmp	r3, r2
 8000386:	d801      	bhi.n	800038c <Mode_Update_From_ADC+0x24>
 8000388:	2301      	movs	r3, #1
 800038a:	e007      	b.n	800039c <Mode_Update_From_ADC+0x34>
    else if (adc_value < 2730) return 2;
 800038c:	88fb      	ldrh	r3, [r7, #6]
 800038e:	f640 22a9 	movw	r2, #2729	@ 0xaa9
 8000392:	4293      	cmp	r3, r2
 8000394:	d801      	bhi.n	800039a <Mode_Update_From_ADC+0x32>
 8000396:	2302      	movs	r3, #2
 8000398:	e000      	b.n	800039c <Mode_Update_From_ADC+0x34>
    else return 3;
 800039a:	2303      	movs	r3, #3
}
 800039c:	4618      	mov	r0, r3
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr
 80003a8:	20000070 	.word	0x20000070

080003ac <__NVIC_EnableIRQ>:
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	db0b      	blt.n	80003d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	f003 021f 	and.w	r2, r3, #31
 80003c4:	4907      	ldr	r1, [pc, #28]	@ (80003e4 <__NVIC_EnableIRQ+0x38>)
 80003c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ca:	095b      	lsrs	r3, r3, #5
 80003cc:	2001      	movs	r0, #1
 80003ce:	fa00 f202 	lsl.w	r2, r0, r2
 80003d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80003d6:	bf00      	nop
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	e000e100 	.word	0xe000e100

080003e8 <GPIO_EXTI_Init>:
volatile uint8_t mode = 1;
volatile uint8_t button_pressed = 0;
volatile uint8_t system_active = 1; // 1 = hoạt động, 0 = tắt
volatile uint8_t oled_state = 3;

void GPIO_EXTI_Init(void) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;
 80003ec:	4b22      	ldr	r3, [pc, #136]	@ (8000478 <GPIO_EXTI_Init+0x90>)
 80003ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f0:	4a21      	ldr	r2, [pc, #132]	@ (8000478 <GPIO_EXTI_Init+0x90>)
 80003f2:	f043 0303 	orr.w	r3, r3, #3
 80003f6:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80003f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000478 <GPIO_EXTI_Init+0x90>)
 80003fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003fc:	4a1e      	ldr	r2, [pc, #120]	@ (8000478 <GPIO_EXTI_Init+0x90>)
 80003fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000402:	6453      	str	r3, [r2, #68]	@ 0x44

    GPIOA->MODER &= ~((3 << (6 * 2)) | (3 << (7 * 2)));
 8000404:	4b1d      	ldr	r3, [pc, #116]	@ (800047c <GPIO_EXTI_Init+0x94>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a1c      	ldr	r2, [pc, #112]	@ (800047c <GPIO_EXTI_Init+0x94>)
 800040a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800040e:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~((3 << (0 * 2)) | (3 << (1 * 2)));
 8000410:	4b1b      	ldr	r3, [pc, #108]	@ (8000480 <GPIO_EXTI_Init+0x98>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a1a      	ldr	r2, [pc, #104]	@ (8000480 <GPIO_EXTI_Init+0x98>)
 8000416:	f023 030f 	bic.w	r3, r3, #15
 800041a:	6013      	str	r3, [r2, #0]

    GPIOA->PUPDR |= (1 << (6 * 2)) | (1 << (7 * 2));
 800041c:	4b17      	ldr	r3, [pc, #92]	@ (800047c <GPIO_EXTI_Init+0x94>)
 800041e:	68db      	ldr	r3, [r3, #12]
 8000420:	4a16      	ldr	r2, [pc, #88]	@ (800047c <GPIO_EXTI_Init+0x94>)
 8000422:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 8000426:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= (1 << (0 * 2)) | (1 << (1 * 2));
 8000428:	4b15      	ldr	r3, [pc, #84]	@ (8000480 <GPIO_EXTI_Init+0x98>)
 800042a:	68db      	ldr	r3, [r3, #12]
 800042c:	4a14      	ldr	r2, [pc, #80]	@ (8000480 <GPIO_EXTI_Init+0x98>)
 800042e:	f043 0305 	orr.w	r3, r3, #5
 8000432:	60d3      	str	r3, [r2, #12]

    SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI6_PA | SYSCFG_EXTICR2_EXTI7_PA;
 8000434:	4b13      	ldr	r3, [pc, #76]	@ (8000484 <GPIO_EXTI_Init+0x9c>)
 8000436:	4a13      	ldr	r2, [pc, #76]	@ (8000484 <GPIO_EXTI_Init+0x9c>)
 8000438:	68db      	ldr	r3, [r3, #12]
 800043a:	60d3      	str	r3, [r2, #12]
    SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PB | SYSCFG_EXTICR1_EXTI1_PB;
 800043c:	4b11      	ldr	r3, [pc, #68]	@ (8000484 <GPIO_EXTI_Init+0x9c>)
 800043e:	689b      	ldr	r3, [r3, #8]
 8000440:	4a10      	ldr	r2, [pc, #64]	@ (8000484 <GPIO_EXTI_Init+0x9c>)
 8000442:	f043 0311 	orr.w	r3, r3, #17
 8000446:	6093      	str	r3, [r2, #8]

    EXTI->IMR |= (1 << 6) | (1 << 7) | (1 << 0) | (1 << 1);
 8000448:	4b0f      	ldr	r3, [pc, #60]	@ (8000488 <GPIO_EXTI_Init+0xa0>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a0e      	ldr	r2, [pc, #56]	@ (8000488 <GPIO_EXTI_Init+0xa0>)
 800044e:	f043 03c3 	orr.w	r3, r3, #195	@ 0xc3
 8000452:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= (1 << 6) | (1 << 7) | (1 << 0) | (1 << 1);
 8000454:	4b0c      	ldr	r3, [pc, #48]	@ (8000488 <GPIO_EXTI_Init+0xa0>)
 8000456:	68db      	ldr	r3, [r3, #12]
 8000458:	4a0b      	ldr	r2, [pc, #44]	@ (8000488 <GPIO_EXTI_Init+0xa0>)
 800045a:	f043 03c3 	orr.w	r3, r3, #195	@ 0xc3
 800045e:	60d3      	str	r3, [r2, #12]

    NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000460:	2017      	movs	r0, #23
 8000462:	f7ff ffa3 	bl	80003ac <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(EXTI0_IRQn);
 8000466:	2006      	movs	r0, #6
 8000468:	f7ff ffa0 	bl	80003ac <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(EXTI1_IRQn);
 800046c:	2007      	movs	r0, #7
 800046e:	f7ff ff9d 	bl	80003ac <__NVIC_EnableIRQ>
}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40023800 	.word	0x40023800
 800047c:	40020000 	.word	0x40020000
 8000480:	40020400 	.word	0x40020400
 8000484:	40013800 	.word	0x40013800
 8000488:	40013c00 	.word	0x40013c00

0800048c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void) {
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
    static uint32_t last_press_time = 0;
    uint32_t current_time = GetTick();
 8000492:	f000 fc57 	bl	8000d44 <GetTick>
 8000496:	6078      	str	r0, [r7, #4]
    if ((current_time - last_press_time) < 50) {
 8000498:	4b2e      	ldr	r3, [pc, #184]	@ (8000554 <EXTI9_5_IRQHandler+0xc8>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	687a      	ldr	r2, [r7, #4]
 800049e:	1ad3      	subs	r3, r2, r3
 80004a0:	2b31      	cmp	r3, #49	@ 0x31
 80004a2:	d806      	bhi.n	80004b2 <EXTI9_5_IRQHandler+0x26>
        EXTI->PR |= (1 << 6) | (1 << 7);
 80004a4:	4b2c      	ldr	r3, [pc, #176]	@ (8000558 <EXTI9_5_IRQHandler+0xcc>)
 80004a6:	695b      	ldr	r3, [r3, #20]
 80004a8:	4a2b      	ldr	r2, [pc, #172]	@ (8000558 <EXTI9_5_IRQHandler+0xcc>)
 80004aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80004ae:	6153      	str	r3, [r2, #20]
        return;
 80004b0:	e04c      	b.n	800054c <EXTI9_5_IRQHandler+0xc0>
    }

    if (EXTI->PR & (1 << 6)) {
 80004b2:	4b29      	ldr	r3, [pc, #164]	@ (8000558 <EXTI9_5_IRQHandler+0xcc>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d02e      	beq.n	800051c <EXTI9_5_IRQHandler+0x90>
        system_active ^= 1;
 80004be:	4b27      	ldr	r3, [pc, #156]	@ (800055c <EXTI9_5_IRQHandler+0xd0>)
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	f083 0301 	eor.w	r3, r3, #1
 80004c8:	b2da      	uxtb	r2, r3
 80004ca:	4b24      	ldr	r3, [pc, #144]	@ (800055c <EXTI9_5_IRQHandler+0xd0>)
 80004cc:	701a      	strb	r2, [r3, #0]

        if (!system_active) {
 80004ce:	4b23      	ldr	r3, [pc, #140]	@ (800055c <EXTI9_5_IRQHandler+0xd0>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d10f      	bne.n	80004f8 <EXTI9_5_IRQHandler+0x6c>
            countdown = 0;
 80004d8:	4b21      	ldr	r3, [pc, #132]	@ (8000560 <EXTI9_5_IRQHandler+0xd4>)
 80004da:	2200      	movs	r2, #0
 80004dc:	701a      	strb	r2, [r3, #0]
            mode = 0;
 80004de:	4b21      	ldr	r3, [pc, #132]	@ (8000564 <EXTI9_5_IRQHandler+0xd8>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	701a      	strb	r2, [r3, #0]
            GPIOA->ODR &= ~((1 << 1) | (1 << 2) | (1 << 3));
 80004e4:	4b20      	ldr	r3, [pc, #128]	@ (8000568 <EXTI9_5_IRQHandler+0xdc>)
 80004e6:	695b      	ldr	r3, [r3, #20]
 80004e8:	4a1f      	ldr	r2, [pc, #124]	@ (8000568 <EXTI9_5_IRQHandler+0xdc>)
 80004ea:	f023 030e 	bic.w	r3, r3, #14
 80004ee:	6153      	str	r3, [r2, #20]
            oled_state = 2; // STOPPED
 80004f0:	4b1e      	ldr	r3, [pc, #120]	@ (800056c <EXTI9_5_IRQHandler+0xe0>)
 80004f2:	2202      	movs	r2, #2
 80004f4:	701a      	strb	r2, [r3, #0]
 80004f6:	e008      	b.n	800050a <EXTI9_5_IRQHandler+0x7e>
        } else {
            countdown = 0;
 80004f8:	4b19      	ldr	r3, [pc, #100]	@ (8000560 <EXTI9_5_IRQHandler+0xd4>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	701a      	strb	r2, [r3, #0]
            mode = 1;       // Reset về mode mặc định
 80004fe:	4b19      	ldr	r3, [pc, #100]	@ (8000564 <EXTI9_5_IRQHandler+0xd8>)
 8000500:	2201      	movs	r2, #1
 8000502:	701a      	strb	r2, [r3, #0]
            oled_state = 3; // INFINITE
 8000504:	4b19      	ldr	r3, [pc, #100]	@ (800056c <EXTI9_5_IRQHandler+0xe0>)
 8000506:	2203      	movs	r2, #3
 8000508:	701a      	strb	r2, [r3, #0]
        }

        button_pressed = 1;
 800050a:	4b19      	ldr	r3, [pc, #100]	@ (8000570 <EXTI9_5_IRQHandler+0xe4>)
 800050c:	2201      	movs	r2, #1
 800050e:	701a      	strb	r2, [r3, #0]
        EXTI->PR |= (1 << 6);
 8000510:	4b11      	ldr	r3, [pc, #68]	@ (8000558 <EXTI9_5_IRQHandler+0xcc>)
 8000512:	695b      	ldr	r3, [r3, #20]
 8000514:	4a10      	ldr	r2, [pc, #64]	@ (8000558 <EXTI9_5_IRQHandler+0xcc>)
 8000516:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800051a:	6153      	str	r3, [r2, #20]
    }

    if (EXTI->PR & (1 << 7)) {
 800051c:	4b0e      	ldr	r3, [pc, #56]	@ (8000558 <EXTI9_5_IRQHandler+0xcc>)
 800051e:	695b      	ldr	r3, [r3, #20]
 8000520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000524:	2b00      	cmp	r3, #0
 8000526:	d00e      	beq.n	8000546 <EXTI9_5_IRQHandler+0xba>
        countdown = 10;
 8000528:	4b0d      	ldr	r3, [pc, #52]	@ (8000560 <EXTI9_5_IRQHandler+0xd4>)
 800052a:	220a      	movs	r2, #10
 800052c:	701a      	strb	r2, [r3, #0]
        oled_state = 1; // chuyển sang COUNTDOWN mode
 800052e:	4b0f      	ldr	r3, [pc, #60]	@ (800056c <EXTI9_5_IRQHandler+0xe0>)
 8000530:	2201      	movs	r2, #1
 8000532:	701a      	strb	r2, [r3, #0]
        button_pressed = 1;
 8000534:	4b0e      	ldr	r3, [pc, #56]	@ (8000570 <EXTI9_5_IRQHandler+0xe4>)
 8000536:	2201      	movs	r2, #1
 8000538:	701a      	strb	r2, [r3, #0]
        EXTI->PR |= (1 << 7);
 800053a:	4b07      	ldr	r3, [pc, #28]	@ (8000558 <EXTI9_5_IRQHandler+0xcc>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	4a06      	ldr	r2, [pc, #24]	@ (8000558 <EXTI9_5_IRQHandler+0xcc>)
 8000540:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000544:	6153      	str	r3, [r2, #20]
    }
    last_press_time = current_time;
 8000546:	4a03      	ldr	r2, [pc, #12]	@ (8000554 <EXTI9_5_IRQHandler+0xc8>)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	6013      	str	r3, [r2, #0]
}
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000074 	.word	0x20000074
 8000558:	40013c00 	.word	0x40013c00
 800055c:	20000001 	.word	0x20000001
 8000560:	20000072 	.word	0x20000072
 8000564:	20000000 	.word	0x20000000
 8000568:	40020000 	.word	0x40020000
 800056c:	20000002 	.word	0x20000002
 8000570:	20000073 	.word	0x20000073

08000574 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
    static uint32_t last_press_time = 0;
    uint32_t current_time = GetTick();
 800057a:	f000 fbe3 	bl	8000d44 <GetTick>
 800057e:	6078      	str	r0, [r7, #4]
    if ((current_time - last_press_time) > 50) {
 8000580:	4b0d      	ldr	r3, [pc, #52]	@ (80005b8 <EXTI0_IRQHandler+0x44>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	1ad3      	subs	r3, r2, r3
 8000588:	2b32      	cmp	r3, #50	@ 0x32
 800058a:	d90b      	bls.n	80005a4 <EXTI0_IRQHandler+0x30>
        countdown = 20;
 800058c:	4b0b      	ldr	r3, [pc, #44]	@ (80005bc <EXTI0_IRQHandler+0x48>)
 800058e:	2214      	movs	r2, #20
 8000590:	701a      	strb	r2, [r3, #0]
        oled_state = 1;
 8000592:	4b0b      	ldr	r3, [pc, #44]	@ (80005c0 <EXTI0_IRQHandler+0x4c>)
 8000594:	2201      	movs	r2, #1
 8000596:	701a      	strb	r2, [r3, #0]
        button_pressed = 1;
 8000598:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <EXTI0_IRQHandler+0x50>)
 800059a:	2201      	movs	r2, #1
 800059c:	701a      	strb	r2, [r3, #0]
        last_press_time = current_time;
 800059e:	4a06      	ldr	r2, [pc, #24]	@ (80005b8 <EXTI0_IRQHandler+0x44>)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	6013      	str	r3, [r2, #0]
    }
    EXTI->PR |= (1 << 0);
 80005a4:	4b08      	ldr	r3, [pc, #32]	@ (80005c8 <EXTI0_IRQHandler+0x54>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	4a07      	ldr	r2, [pc, #28]	@ (80005c8 <EXTI0_IRQHandler+0x54>)
 80005aa:	f043 0301 	orr.w	r3, r3, #1
 80005ae:	6153      	str	r3, [r2, #20]
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000078 	.word	0x20000078
 80005bc:	20000072 	.word	0x20000072
 80005c0:	20000002 	.word	0x20000002
 80005c4:	20000073 	.word	0x20000073
 80005c8:	40013c00 	.word	0x40013c00

080005cc <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
    static uint32_t last_press_time = 0;
    uint32_t current_time = GetTick();
 80005d2:	f000 fbb7 	bl	8000d44 <GetTick>
 80005d6:	6078      	str	r0, [r7, #4]
    if ((current_time - last_press_time) > 50) {
 80005d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000610 <EXTI1_IRQHandler+0x44>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	1ad3      	subs	r3, r2, r3
 80005e0:	2b32      	cmp	r3, #50	@ 0x32
 80005e2:	d90b      	bls.n	80005fc <EXTI1_IRQHandler+0x30>
        countdown = 30;
 80005e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000614 <EXTI1_IRQHandler+0x48>)
 80005e6:	221e      	movs	r2, #30
 80005e8:	701a      	strb	r2, [r3, #0]
        oled_state = 1;
 80005ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000618 <EXTI1_IRQHandler+0x4c>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	701a      	strb	r2, [r3, #0]
        button_pressed = 1;
 80005f0:	4b0a      	ldr	r3, [pc, #40]	@ (800061c <EXTI1_IRQHandler+0x50>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	701a      	strb	r2, [r3, #0]
        last_press_time = current_time;
 80005f6:	4a06      	ldr	r2, [pc, #24]	@ (8000610 <EXTI1_IRQHandler+0x44>)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6013      	str	r3, [r2, #0]
    }
    EXTI->PR |= (1 << 1);
 80005fc:	4b08      	ldr	r3, [pc, #32]	@ (8000620 <EXTI1_IRQHandler+0x54>)
 80005fe:	695b      	ldr	r3, [r3, #20]
 8000600:	4a07      	ldr	r2, [pc, #28]	@ (8000620 <EXTI1_IRQHandler+0x54>)
 8000602:	f043 0302 	orr.w	r3, r3, #2
 8000606:	6153      	str	r3, [r2, #20]
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	2000007c 	.word	0x2000007c
 8000614:	20000072 	.word	0x20000072
 8000618:	20000002 	.word	0x20000002
 800061c:	20000073 	.word	0x20000073
 8000620:	40013c00 	.word	0x40013c00

08000624 <I2C1_Init>:
#include "stm32f4xx.h"
#include "i2c.h"

#define I2C_TIMEOUT 100000

void I2C1_Init(void) {
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000628:	4b24      	ldr	r3, [pc, #144]	@ (80006bc <I2C1_Init+0x98>)
 800062a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062c:	4a23      	ldr	r2, [pc, #140]	@ (80006bc <I2C1_Init+0x98>)
 800062e:	f043 0302 	orr.w	r3, r3, #2
 8000632:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000634:	4b21      	ldr	r3, [pc, #132]	@ (80006bc <I2C1_Init+0x98>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	4a20      	ldr	r2, [pc, #128]	@ (80006bc <I2C1_Init+0x98>)
 800063a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800063e:	6413      	str	r3, [r2, #64]	@ 0x40

    GPIOB->MODER &= ~(0xF << (8*2));
 8000640:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <I2C1_Init+0x9c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a1e      	ldr	r2, [pc, #120]	@ (80006c0 <I2C1_Init+0x9c>)
 8000646:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800064a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (0xA << (8*2));
 800064c:	4b1c      	ldr	r3, [pc, #112]	@ (80006c0 <I2C1_Init+0x9c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a1b      	ldr	r2, [pc, #108]	@ (80006c0 <I2C1_Init+0x9c>)
 8000652:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8000656:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (0x3 << 8);
 8000658:	4b19      	ldr	r3, [pc, #100]	@ (80006c0 <I2C1_Init+0x9c>)
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	4a18      	ldr	r2, [pc, #96]	@ (80006c0 <I2C1_Init+0x9c>)
 800065e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000662:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (0xF << (8*2));
 8000664:	4b16      	ldr	r3, [pc, #88]	@ (80006c0 <I2C1_Init+0x9c>)
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	4a15      	ldr	r2, [pc, #84]	@ (80006c0 <I2C1_Init+0x9c>)
 800066a:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 800066e:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR |= (0x5 << (8*2));
 8000670:	4b13      	ldr	r3, [pc, #76]	@ (80006c0 <I2C1_Init+0x9c>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	4a12      	ldr	r2, [pc, #72]	@ (80006c0 <I2C1_Init+0x9c>)
 8000676:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 800067a:	60d3      	str	r3, [r2, #12]
    GPIOB->AFR[1] |= (0x44 << ((8-8)*4));
 800067c:	4b10      	ldr	r3, [pc, #64]	@ (80006c0 <I2C1_Init+0x9c>)
 800067e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000680:	4a0f      	ldr	r2, [pc, #60]	@ (80006c0 <I2C1_Init+0x9c>)
 8000682:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8000686:	6253      	str	r3, [r2, #36]	@ 0x24

    I2C1->CR1 &= ~I2C_CR1_PE;
 8000688:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <I2C1_Init+0xa0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a0d      	ldr	r2, [pc, #52]	@ (80006c4 <I2C1_Init+0xa0>)
 800068e:	f023 0301 	bic.w	r3, r3, #1
 8000692:	6013      	str	r3, [r2, #0]
    I2C1->CR2 = 16;
 8000694:	4b0b      	ldr	r3, [pc, #44]	@ (80006c4 <I2C1_Init+0xa0>)
 8000696:	2210      	movs	r2, #16
 8000698:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 80;
 800069a:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <I2C1_Init+0xa0>)
 800069c:	2250      	movs	r2, #80	@ 0x50
 800069e:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 17;
 80006a0:	4b08      	ldr	r3, [pc, #32]	@ (80006c4 <I2C1_Init+0xa0>)
 80006a2:	2211      	movs	r2, #17
 80006a4:	621a      	str	r2, [r3, #32]
    I2C1->CR1 |= I2C_CR1_PE;
 80006a6:	4b07      	ldr	r3, [pc, #28]	@ (80006c4 <I2C1_Init+0xa0>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a06      	ldr	r2, [pc, #24]	@ (80006c4 <I2C1_Init+0xa0>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6013      	str	r3, [r2, #0]
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40020400 	.word	0x40020400
 80006c4:	40005400 	.word	0x40005400

080006c8 <I2C_WriteByte>:

uint8_t I2C_WriteByte(uint8_t addr, uint8_t reg, uint8_t data) {
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
 80006d2:	460b      	mov	r3, r1
 80006d4:	71bb      	strb	r3, [r7, #6]
 80006d6:	4613      	mov	r3, r2
 80006d8:	717b      	strb	r3, [r7, #5]
    uint32_t timeout;
    I2C1->CR1 |= I2C_CR1_START;
 80006da:	4b41      	ldr	r3, [pc, #260]	@ (80007e0 <I2C_WriteByte+0x118>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a40      	ldr	r2, [pc, #256]	@ (80007e0 <I2C_WriteByte+0x118>)
 80006e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006e4:	6013      	str	r3, [r2, #0]
    timeout = I2C_TIMEOUT;
 80006e6:	4b3f      	ldr	r3, [pc, #252]	@ (80007e4 <I2C_WriteByte+0x11c>)
 80006e8:	60fb      	str	r3, [r7, #12]
    while(!(I2C1->SR1 & I2C_SR1_SB) && --timeout);
 80006ea:	bf00      	nop
 80006ec:	4b3c      	ldr	r3, [pc, #240]	@ (80007e0 <I2C_WriteByte+0x118>)
 80006ee:	695b      	ldr	r3, [r3, #20]
 80006f0:	f003 0301 	and.w	r3, r3, #1
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d105      	bne.n	8000704 <I2C_WriteByte+0x3c>
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d1f3      	bne.n	80006ec <I2C_WriteByte+0x24>
    if (!timeout) return 0;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d101      	bne.n	800070e <I2C_WriteByte+0x46>
 800070a:	2300      	movs	r3, #0
 800070c:	e062      	b.n	80007d4 <I2C_WriteByte+0x10c>

    I2C1->DR = addr << 1;
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	4a33      	ldr	r2, [pc, #204]	@ (80007e0 <I2C_WriteByte+0x118>)
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	6113      	str	r3, [r2, #16]
    timeout = I2C_TIMEOUT;
 8000716:	4b33      	ldr	r3, [pc, #204]	@ (80007e4 <I2C_WriteByte+0x11c>)
 8000718:	60fb      	str	r3, [r7, #12]
    while(!(I2C1->SR1 & I2C_SR1_ADDR) && --timeout);
 800071a:	bf00      	nop
 800071c:	4b30      	ldr	r3, [pc, #192]	@ (80007e0 <I2C_WriteByte+0x118>)
 800071e:	695b      	ldr	r3, [r3, #20]
 8000720:	f003 0302 	and.w	r3, r3, #2
 8000724:	2b00      	cmp	r3, #0
 8000726:	d105      	bne.n	8000734 <I2C_WriteByte+0x6c>
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	3b01      	subs	r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d1f3      	bne.n	800071c <I2C_WriteByte+0x54>
    if (!timeout) return 0;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d101      	bne.n	800073e <I2C_WriteByte+0x76>
 800073a:	2300      	movs	r3, #0
 800073c:	e04a      	b.n	80007d4 <I2C_WriteByte+0x10c>
    (void)I2C1->SR2;
 800073e:	4b28      	ldr	r3, [pc, #160]	@ (80007e0 <I2C_WriteByte+0x118>)
 8000740:	699b      	ldr	r3, [r3, #24]

    timeout = I2C_TIMEOUT;
 8000742:	4b28      	ldr	r3, [pc, #160]	@ (80007e4 <I2C_WriteByte+0x11c>)
 8000744:	60fb      	str	r3, [r7, #12]
    while(!(I2C1->SR1 & I2C_SR1_TXE) && --timeout);
 8000746:	bf00      	nop
 8000748:	4b25      	ldr	r3, [pc, #148]	@ (80007e0 <I2C_WriteByte+0x118>)
 800074a:	695b      	ldr	r3, [r3, #20]
 800074c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000750:	2b00      	cmp	r3, #0
 8000752:	d105      	bne.n	8000760 <I2C_WriteByte+0x98>
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	3b01      	subs	r3, #1
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d1f3      	bne.n	8000748 <I2C_WriteByte+0x80>
    if (!timeout) return 0;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d101      	bne.n	800076a <I2C_WriteByte+0xa2>
 8000766:	2300      	movs	r3, #0
 8000768:	e034      	b.n	80007d4 <I2C_WriteByte+0x10c>
    I2C1->DR = reg;
 800076a:	4a1d      	ldr	r2, [pc, #116]	@ (80007e0 <I2C_WriteByte+0x118>)
 800076c:	79bb      	ldrb	r3, [r7, #6]
 800076e:	6113      	str	r3, [r2, #16]

    timeout = I2C_TIMEOUT;
 8000770:	4b1c      	ldr	r3, [pc, #112]	@ (80007e4 <I2C_WriteByte+0x11c>)
 8000772:	60fb      	str	r3, [r7, #12]
    while(!(I2C1->SR1 & I2C_SR1_TXE) && --timeout);
 8000774:	bf00      	nop
 8000776:	4b1a      	ldr	r3, [pc, #104]	@ (80007e0 <I2C_WriteByte+0x118>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800077e:	2b00      	cmp	r3, #0
 8000780:	d105      	bne.n	800078e <I2C_WriteByte+0xc6>
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	3b01      	subs	r3, #1
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d1f3      	bne.n	8000776 <I2C_WriteByte+0xae>
    if (!timeout) return 0;
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d101      	bne.n	8000798 <I2C_WriteByte+0xd0>
 8000794:	2300      	movs	r3, #0
 8000796:	e01d      	b.n	80007d4 <I2C_WriteByte+0x10c>
    I2C1->DR = data;
 8000798:	4a11      	ldr	r2, [pc, #68]	@ (80007e0 <I2C_WriteByte+0x118>)
 800079a:	797b      	ldrb	r3, [r7, #5]
 800079c:	6113      	str	r3, [r2, #16]

    timeout = I2C_TIMEOUT;
 800079e:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <I2C_WriteByte+0x11c>)
 80007a0:	60fb      	str	r3, [r7, #12]
    while(!(I2C1->SR1 & I2C_SR1_BTF) && --timeout);
 80007a2:	bf00      	nop
 80007a4:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <I2C_WriteByte+0x118>)
 80007a6:	695b      	ldr	r3, [r3, #20]
 80007a8:	f003 0304 	and.w	r3, r3, #4
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d105      	bne.n	80007bc <I2C_WriteByte+0xf4>
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d1f3      	bne.n	80007a4 <I2C_WriteByte+0xdc>
    if (!timeout) return 0;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d101      	bne.n	80007c6 <I2C_WriteByte+0xfe>
 80007c2:	2300      	movs	r3, #0
 80007c4:	e006      	b.n	80007d4 <I2C_WriteByte+0x10c>
    I2C1->CR1 |= I2C_CR1_STOP;
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <I2C_WriteByte+0x118>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a05      	ldr	r2, [pc, #20]	@ (80007e0 <I2C_WriteByte+0x118>)
 80007cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007d0:	6013      	str	r3, [r2, #0]

    return 1;
 80007d2:	2301      	movs	r3, #1
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	40005400 	.word	0x40005400
 80007e4:	000186a0 	.word	0x000186a0

080007e8 <LED_Init>:
#include "stm32f4xx.h"
#include "led.h"

extern volatile uint8_t oled_state;

void LED_Init(void) {
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80007ec:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <LED_Init+0x4c>)
 80007ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f0:	4a10      	ldr	r2, [pc, #64]	@ (8000834 <LED_Init+0x4c>)
 80007f2:	f043 0301 	orr.w	r3, r3, #1
 80007f6:	6313      	str	r3, [r2, #48]	@ 0x30

    GPIOA->MODER &= ~((3 << (1 * 2)) | (3 << (2 * 2)) | (3 << (3 * 2)));
 80007f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <LED_Init+0x50>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a0e      	ldr	r2, [pc, #56]	@ (8000838 <LED_Init+0x50>)
 80007fe:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8000802:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1 << (1 * 2)) | (1 << (2 * 2)) | (1 << (3 * 2));
 8000804:	4b0c      	ldr	r3, [pc, #48]	@ (8000838 <LED_Init+0x50>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a0b      	ldr	r2, [pc, #44]	@ (8000838 <LED_Init+0x50>)
 800080a:	f043 0354 	orr.w	r3, r3, #84	@ 0x54
 800080e:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~((1 << 1) | (1 << 2) | (1 << 3));
 8000810:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <LED_Init+0x50>)
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	4a08      	ldr	r2, [pc, #32]	@ (8000838 <LED_Init+0x50>)
 8000816:	f023 030e 	bic.w	r3, r3, #14
 800081a:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR &= ~((3 << (1 * 2)) | (3 << (2 * 2)) | (3 << (3 * 2)));
 800081c:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <LED_Init+0x50>)
 800081e:	689b      	ldr	r3, [r3, #8]
 8000820:	4a05      	ldr	r2, [pc, #20]	@ (8000838 <LED_Init+0x50>)
 8000822:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8000826:	6093      	str	r3, [r2, #8]
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800
 8000838:	40020000 	.word	0x40020000

0800083c <LED_Update>:

void LED_Update(uint8_t current_mode, uint8_t countdown) {
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	460a      	mov	r2, r1
 8000846:	71fb      	strb	r3, [r7, #7]
 8000848:	4613      	mov	r3, r2
 800084a:	71bb      	strb	r3, [r7, #6]
    GPIOA->ODR &= ~((1 << 1) | (1 << 2) | (1 << 3));
 800084c:	4b1a      	ldr	r3, [pc, #104]	@ (80008b8 <LED_Update+0x7c>)
 800084e:	695b      	ldr	r3, [r3, #20]
 8000850:	4a19      	ldr	r2, [pc, #100]	@ (80008b8 <LED_Update+0x7c>)
 8000852:	f023 030e 	bic.w	r3, r3, #14
 8000856:	6153      	str	r3, [r2, #20]

    // Nếu đang countdown hoặc ở infinite mode thì cho phép sáng
    if (countdown == 0 && oled_state != 3) return;
 8000858:	79bb      	ldrb	r3, [r7, #6]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d104      	bne.n	8000868 <LED_Update+0x2c>
 800085e:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <LED_Update+0x80>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	2b03      	cmp	r3, #3
 8000866:	d11e      	bne.n	80008a6 <LED_Update+0x6a>

    switch (current_mode) {
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	2b03      	cmp	r3, #3
 800086c:	d014      	beq.n	8000898 <LED_Update+0x5c>
 800086e:	2b03      	cmp	r3, #3
 8000870:	dc1b      	bgt.n	80008aa <LED_Update+0x6e>
 8000872:	2b01      	cmp	r3, #1
 8000874:	d002      	beq.n	800087c <LED_Update+0x40>
 8000876:	2b02      	cmp	r3, #2
 8000878:	d007      	beq.n	800088a <LED_Update+0x4e>
        case 1: GPIOA->ODR |= (1 << 1); break;
        case 2: GPIOA->ODR |= (1 << 2); break;
        case 3: GPIOA->ODR |= (1 << 3); break;
        default: break;
 800087a:	e016      	b.n	80008aa <LED_Update+0x6e>
        case 1: GPIOA->ODR |= (1 << 1); break;
 800087c:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <LED_Update+0x7c>)
 800087e:	695b      	ldr	r3, [r3, #20]
 8000880:	4a0d      	ldr	r2, [pc, #52]	@ (80008b8 <LED_Update+0x7c>)
 8000882:	f043 0302 	orr.w	r3, r3, #2
 8000886:	6153      	str	r3, [r2, #20]
 8000888:	e010      	b.n	80008ac <LED_Update+0x70>
        case 2: GPIOA->ODR |= (1 << 2); break;
 800088a:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <LED_Update+0x7c>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	4a0a      	ldr	r2, [pc, #40]	@ (80008b8 <LED_Update+0x7c>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	6153      	str	r3, [r2, #20]
 8000896:	e009      	b.n	80008ac <LED_Update+0x70>
        case 3: GPIOA->ODR |= (1 << 3); break;
 8000898:	4b07      	ldr	r3, [pc, #28]	@ (80008b8 <LED_Update+0x7c>)
 800089a:	695b      	ldr	r3, [r3, #20]
 800089c:	4a06      	ldr	r2, [pc, #24]	@ (80008b8 <LED_Update+0x7c>)
 800089e:	f043 0308 	orr.w	r3, r3, #8
 80008a2:	6153      	str	r3, [r2, #20]
 80008a4:	e002      	b.n	80008ac <LED_Update+0x70>
    if (countdown == 0 && oled_state != 3) return;
 80008a6:	bf00      	nop
 80008a8:	e000      	b.n	80008ac <LED_Update+0x70>
        default: break;
 80008aa:	bf00      	nop
    }
}
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40020000 	.word	0x40020000
 80008bc:	20000002 	.word	0x20000002

080008c0 <main>:
#include "pwm.h"
#include "led.h"
#include "exti.h"
#include "timer.h"

int main(void) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
    SysTick_Init();
 80008c4:	f000 fa04 	bl	8000cd0 <SysTick_Init>
    I2C1_Init();
 80008c8:	f7ff feac 	bl	8000624 <I2C1_Init>
    ADC_Init();
 80008cc:	f7ff fcfe 	bl	80002cc <ADC_Init>
    PWM_Init();
 80008d0:	f000 f950 	bl	8000b74 <PWM_Init>
    LED_Init();
 80008d4:	f7ff ff88 	bl	80007e8 <LED_Init>
    GPIO_EXTI_Init();
 80008d8:	f7ff fd86 	bl	80003e8 <GPIO_EXTI_Init>
    TIM3_Init();
 80008dc:	f000 fa6e 	bl	8000dbc <TIM3_Init>

    mode = 1;
 80008e0:	4b0e      	ldr	r3, [pc, #56]	@ (800091c <main+0x5c>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	701a      	strb	r2, [r3, #0]
    countdown = 0;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <main+0x60>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]
    button_pressed = 0;
 80008ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000924 <main+0x64>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
    oled_state = 3;
 80008f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000928 <main+0x68>)
 80008f4:	2203      	movs	r2, #3
 80008f6:	701a      	strb	r2, [r3, #0]
    system_active = 1;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <main+0x6c>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	701a      	strb	r2, [r3, #0]

    SSD1306_Clear();
 80008fe:	f000 f85a 	bl	80009b6 <SSD1306_Clear>
    SSD1306_PrintTextCentered(3, "SYSTEM READY");
 8000902:	490b      	ldr	r1, [pc, #44]	@ (8000930 <main+0x70>)
 8000904:	2003      	movs	r0, #3
 8000906:	f000 f8cb 	bl	8000aa0 <SSD1306_PrintTextCentered>
    Delay_ms(2000);
 800090a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800090e:	f000 fa01 	bl	8000d14 <Delay_ms>
    oled_state = 3;
 8000912:	4b05      	ldr	r3, [pc, #20]	@ (8000928 <main+0x68>)
 8000914:	2203      	movs	r2, #3
 8000916:	701a      	strb	r2, [r3, #0]

    while (1);
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <main+0x58>
 800091c:	20000000 	.word	0x20000000
 8000920:	20000072 	.word	0x20000072
 8000924:	20000073 	.word	0x20000073
 8000928:	20000002 	.word	0x20000002
 800092c:	20000001 	.word	0x20000001
 8000930:	080018dc 	.word	0x080018dc

08000934 <SSD1306_Command>:

    // Space (62)
    {0x00,0x00,0x00,0x00,0x00}
};

uint8_t SSD1306_Command(uint8_t cmd) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
    return I2C_WriteByte(0x3C, 0x00, cmd);
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	461a      	mov	r2, r3
 8000942:	2100      	movs	r1, #0
 8000944:	203c      	movs	r0, #60	@ 0x3c
 8000946:	f7ff febf 	bl	80006c8 <I2C_WriteByte>
 800094a:	4603      	mov	r3, r0
}
 800094c:	4618      	mov	r0, r3
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <SSD1306_Data>:

uint8_t SSD1306_Data(uint8_t data) {
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
    return I2C_WriteByte(0x3C, 0x40, data);
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	461a      	mov	r2, r3
 8000962:	2140      	movs	r1, #64	@ 0x40
 8000964:	203c      	movs	r0, #60	@ 0x3c
 8000966:	f7ff feaf 	bl	80006c8 <I2C_WriteByte>
 800096a:	4603      	mov	r3, r0
}
 800096c:	4618      	mov	r0, r3
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <SSD1306_SetCursor>:
        if (!SSD1306_Command(init_seq[i])) return 0;
    }
    return 1;
}

void SSD1306_SetCursor(uint8_t col, uint8_t page) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	460a      	mov	r2, r1
 800097e:	71fb      	strb	r3, [r7, #7]
 8000980:	4613      	mov	r3, r2
 8000982:	71bb      	strb	r3, [r7, #6]
    SSD1306_Command(0xB0 + page);
 8000984:	79bb      	ldrb	r3, [r7, #6]
 8000986:	3b50      	subs	r3, #80	@ 0x50
 8000988:	b2db      	uxtb	r3, r3
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff ffd2 	bl	8000934 <SSD1306_Command>
    SSD1306_Command(0x00 + (col & 0x0F));
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	f003 030f 	and.w	r3, r3, #15
 8000996:	b2db      	uxtb	r3, r3
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff ffcb 	bl	8000934 <SSD1306_Command>
    SSD1306_Command(0x10 + ((col >> 4) & 0x0F));
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	091b      	lsrs	r3, r3, #4
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	3310      	adds	r3, #16
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ffc3 	bl	8000934 <SSD1306_Command>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <SSD1306_Clear>:

void SSD1306_Clear(void) {
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < 8; page++) {
 80009bc:	2300      	movs	r3, #0
 80009be:	71fb      	strb	r3, [r7, #7]
 80009c0:	e014      	b.n	80009ec <SSD1306_Clear+0x36>
        SSD1306_SetCursor(0, page);
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	4619      	mov	r1, r3
 80009c6:	2000      	movs	r0, #0
 80009c8:	f7ff ffd4 	bl	8000974 <SSD1306_SetCursor>
        for (uint8_t col = 0; col < 128; col++) {
 80009cc:	2300      	movs	r3, #0
 80009ce:	71bb      	strb	r3, [r7, #6]
 80009d0:	e005      	b.n	80009de <SSD1306_Clear+0x28>
            SSD1306_Data(0x00);
 80009d2:	2000      	movs	r0, #0
 80009d4:	f7ff ffbe 	bl	8000954 <SSD1306_Data>
        for (uint8_t col = 0; col < 128; col++) {
 80009d8:	79bb      	ldrb	r3, [r7, #6]
 80009da:	3301      	adds	r3, #1
 80009dc:	71bb      	strb	r3, [r7, #6]
 80009de:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	daf5      	bge.n	80009d2 <SSD1306_Clear+0x1c>
    for (uint8_t page = 0; page < 8; page++) {
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	3301      	adds	r3, #1
 80009ea:	71fb      	strb	r3, [r7, #7]
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	2b07      	cmp	r3, #7
 80009f0:	d9e7      	bls.n	80009c2 <SSD1306_Clear+0xc>
        }
    }
}
 80009f2:	bf00      	nop
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <SSD1306_PrintChar>:

void SSD1306_PrintChar(char ch) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
    const uint8_t* chr;
    if (ch >= 'A' && ch <= 'Z') chr = font5x8[ch - 'A'];
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	2b40      	cmp	r3, #64	@ 0x40
 8000a0a:	d90c      	bls.n	8000a26 <SSD1306_PrintChar+0x2a>
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	2b5a      	cmp	r3, #90	@ 0x5a
 8000a10:	d809      	bhi.n	8000a26 <SSD1306_PrintChar+0x2a>
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8000a18:	4613      	mov	r3, r2
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	4413      	add	r3, r2
 8000a1e:	4a1e      	ldr	r2, [pc, #120]	@ (8000a98 <SSD1306_PrintChar+0x9c>)
 8000a20:	4413      	add	r3, r2
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	e020      	b.n	8000a68 <SSD1306_PrintChar+0x6c>
    else if (ch >= 'a' && ch <= 'z') chr = font5x8[ch - 'a' + 26];
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	2b60      	cmp	r3, #96	@ 0x60
 8000a2a:	d90c      	bls.n	8000a46 <SSD1306_PrintChar+0x4a>
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	2b7a      	cmp	r3, #122	@ 0x7a
 8000a30:	d809      	bhi.n	8000a46 <SSD1306_PrintChar+0x4a>
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	f1a3 0247 	sub.w	r2, r3, #71	@ 0x47
 8000a38:	4613      	mov	r3, r2
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	4413      	add	r3, r2
 8000a3e:	4a16      	ldr	r2, [pc, #88]	@ (8000a98 <SSD1306_PrintChar+0x9c>)
 8000a40:	4413      	add	r3, r2
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	e010      	b.n	8000a68 <SSD1306_PrintChar+0x6c>
    else if (ch >= '0' && ch <= '9') chr = font5x8[ch - '0' + 52];
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	2b2f      	cmp	r3, #47	@ 0x2f
 8000a4a:	d90b      	bls.n	8000a64 <SSD1306_PrintChar+0x68>
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	2b39      	cmp	r3, #57	@ 0x39
 8000a50:	d808      	bhi.n	8000a64 <SSD1306_PrintChar+0x68>
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	1d1a      	adds	r2, r3, #4
 8000a56:	4613      	mov	r3, r2
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	4413      	add	r3, r2
 8000a5c:	4a0e      	ldr	r2, [pc, #56]	@ (8000a98 <SSD1306_PrintChar+0x9c>)
 8000a5e:	4413      	add	r3, r2
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	e001      	b.n	8000a68 <SSD1306_PrintChar+0x6c>
    else chr = font5x8[62];
 8000a64:	4b0d      	ldr	r3, [pc, #52]	@ (8000a9c <SSD1306_PrintChar+0xa0>)
 8000a66:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < 5; i++) SSD1306_Data(chr[i]);
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	e009      	b.n	8000a82 <SSD1306_PrintChar+0x86>
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	68fa      	ldr	r2, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff ff6c 	bl	8000954 <SSD1306_Data>
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	2b04      	cmp	r3, #4
 8000a86:	ddf2      	ble.n	8000a6e <SSD1306_PrintChar+0x72>
    SSD1306_Data(0x00);
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f7ff ff63 	bl	8000954 <SSD1306_Data>
}
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	08001934 	.word	0x08001934
 8000a9c:	08001a6a 	.word	0x08001a6a

08000aa0 <SSD1306_PrintTextCentered>:

void SSD1306_PrintTextCentered(uint8_t page, const char* str) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	6039      	str	r1, [r7, #0]
 8000aaa:	71fb      	strb	r3, [r7, #7]
    uint8_t len = strlen(str);
 8000aac:	6838      	ldr	r0, [r7, #0]
 8000aae:	f7ff fb97 	bl	80001e0 <strlen>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	73fb      	strb	r3, [r7, #15]
    uint8_t col = (128 - len * 6) / 2;
 8000ab6:	7bfa      	ldrb	r2, [r7, #15]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	0092      	lsls	r2, r2, #2
 8000abc:	1a9b      	subs	r3, r3, r2
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	3380      	adds	r3, #128	@ 0x80
 8000ac2:	0fda      	lsrs	r2, r3, #31
 8000ac4:	4413      	add	r3, r2
 8000ac6:	105b      	asrs	r3, r3, #1
 8000ac8:	73bb      	strb	r3, [r7, #14]
    SSD1306_SetCursor(col, page);
 8000aca:	79fa      	ldrb	r2, [r7, #7]
 8000acc:	7bbb      	ldrb	r3, [r7, #14]
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff4f 	bl	8000974 <SSD1306_SetCursor>
    while (*str) SSD1306_PrintChar(*str++);
 8000ad6:	e006      	b.n	8000ae6 <SSD1306_PrintTextCentered+0x46>
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	1c5a      	adds	r2, r3, #1
 8000adc:	603a      	str	r2, [r7, #0]
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff8b 	bl	80009fc <SSD1306_PrintChar>
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d1f4      	bne.n	8000ad8 <SSD1306_PrintTextCentered+0x38>
}
 8000aee:	bf00      	nop
 8000af0:	bf00      	nop
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <SSD1306_DisplayStatus>:

void SSD1306_DisplayStatus(uint8_t current_mode, uint8_t seconds_left) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	@ 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	460a      	mov	r2, r1
 8000b02:	71fb      	strb	r3, [r7, #7]
 8000b04:	4613      	mov	r3, r2
 8000b06:	71bb      	strb	r3, [r7, #6]
    char buffer[32];
    SSD1306_Clear();
 8000b08:	f7ff ff55 	bl	80009b6 <SSD1306_Clear>
    SSD1306_PrintTextCentered(1, "DEVICE STATUS");
 8000b0c:	4915      	ldr	r1, [pc, #84]	@ (8000b64 <SSD1306_DisplayStatus+0x6c>)
 8000b0e:	2001      	movs	r0, #1
 8000b10:	f7ff ffc6 	bl	8000aa0 <SSD1306_PrintTextCentered>
    sprintf(buffer, "MODE %d", current_mode);
 8000b14:	79fa      	ldrb	r2, [r7, #7]
 8000b16:	f107 0308 	add.w	r3, r7, #8
 8000b1a:	4913      	ldr	r1, [pc, #76]	@ (8000b68 <SSD1306_DisplayStatus+0x70>)
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f000 fa31 	bl	8000f84 <siprintf>
    SSD1306_PrintTextCentered(3, buffer);
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	4619      	mov	r1, r3
 8000b28:	2003      	movs	r0, #3
 8000b2a:	f7ff ffb9 	bl	8000aa0 <SSD1306_PrintTextCentered>
    if (seconds_left > 0) sprintf(buffer, "TIME %ds", seconds_left);
 8000b2e:	79bb      	ldrb	r3, [r7, #6]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d007      	beq.n	8000b44 <SSD1306_DisplayStatus+0x4c>
 8000b34:	79ba      	ldrb	r2, [r7, #6]
 8000b36:	f107 0308 	add.w	r3, r7, #8
 8000b3a:	490c      	ldr	r1, [pc, #48]	@ (8000b6c <SSD1306_DisplayStatus+0x74>)
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f000 fa21 	bl	8000f84 <siprintf>
 8000b42:	e005      	b.n	8000b50 <SSD1306_DisplayStatus+0x58>
    else sprintf(buffer, "READY");
 8000b44:	f107 0308 	add.w	r3, r7, #8
 8000b48:	4909      	ldr	r1, [pc, #36]	@ (8000b70 <SSD1306_DisplayStatus+0x78>)
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 fa1a 	bl	8000f84 <siprintf>
    SSD1306_PrintTextCentered(5, buffer);
 8000b50:	f107 0308 	add.w	r3, r7, #8
 8000b54:	4619      	mov	r1, r3
 8000b56:	2005      	movs	r0, #5
 8000b58:	f7ff ffa2 	bl	8000aa0 <SSD1306_PrintTextCentered>
}
 8000b5c:	bf00      	nop
 8000b5e:	3728      	adds	r7, #40	@ 0x28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	08001908 	.word	0x08001908
 8000b68:	08001918 	.word	0x08001918
 8000b6c:	08001920 	.word	0x08001920
 8000b70:	0800192c 	.word	0x0800192c

08000b74 <PWM_Init>:
// ====== pwm.c ======
#include "stm32f4xx.h"
#include "pwm.h"

void PWM_Init(void) {
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000b78:	4b25      	ldr	r3, [pc, #148]	@ (8000c10 <PWM_Init+0x9c>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7c:	4a24      	ldr	r2, [pc, #144]	@ (8000c10 <PWM_Init+0x9c>)
 8000b7e:	f043 0302 	orr.w	r3, r3, #2
 8000b82:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000b84:	4b22      	ldr	r3, [pc, #136]	@ (8000c10 <PWM_Init+0x9c>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b88:	4a21      	ldr	r2, [pc, #132]	@ (8000c10 <PWM_Init+0x9c>)
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	6413      	str	r3, [r2, #64]	@ 0x40

    GPIOB->MODER &= ~(3 << (7 * 2));
 8000b90:	4b20      	ldr	r3, [pc, #128]	@ (8000c14 <PWM_Init+0xa0>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a1f      	ldr	r2, [pc, #124]	@ (8000c14 <PWM_Init+0xa0>)
 8000b96:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b9a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (2 << (7 * 2));
 8000b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000c14 <PWM_Init+0xa0>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a1c      	ldr	r2, [pc, #112]	@ (8000c14 <PWM_Init+0xa0>)
 8000ba2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ba6:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[0] |= (2 << (7 * 4));
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c14 <PWM_Init+0xa0>)
 8000baa:	6a1b      	ldr	r3, [r3, #32]
 8000bac:	4a19      	ldr	r2, [pc, #100]	@ (8000c14 <PWM_Init+0xa0>)
 8000bae:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000bb2:	6213      	str	r3, [r2, #32]

    TIM4->PSC = 1599;
 8000bb4:	4b18      	ldr	r3, [pc, #96]	@ (8000c18 <PWM_Init+0xa4>)
 8000bb6:	f240 623f 	movw	r2, #1599	@ 0x63f
 8000bba:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM4->ARR = 100;
 8000bbc:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <PWM_Init+0xa4>)
 8000bbe:	2264      	movs	r2, #100	@ 0x64
 8000bc0:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM4->CCR2 = 30;
 8000bc2:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <PWM_Init+0xa4>)
 8000bc4:	221e      	movs	r2, #30
 8000bc6:	639a      	str	r2, [r3, #56]	@ 0x38

    TIM4->CCMR1 &= ~TIM_CCMR1_OC2M;
 8000bc8:	4b13      	ldr	r3, [pc, #76]	@ (8000c18 <PWM_Init+0xa4>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	4a12      	ldr	r2, [pc, #72]	@ (8000c18 <PWM_Init+0xa4>)
 8000bce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8000bd2:	6193      	str	r3, [r2, #24]
    TIM4->CCMR1 |= (6 << TIM_CCMR1_OC2M_Pos);
 8000bd4:	4b10      	ldr	r3, [pc, #64]	@ (8000c18 <PWM_Init+0xa4>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a0f      	ldr	r2, [pc, #60]	@ (8000c18 <PWM_Init+0xa4>)
 8000bda:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8000bde:	6193      	str	r3, [r2, #24]
    TIM4->CCMR1 |= TIM_CCMR1_OC2PE;
 8000be0:	4b0d      	ldr	r3, [pc, #52]	@ (8000c18 <PWM_Init+0xa4>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a0c      	ldr	r2, [pc, #48]	@ (8000c18 <PWM_Init+0xa4>)
 8000be6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000bea:	6193      	str	r3, [r2, #24]
    TIM4->CCER |= TIM_CCER_CC2E;
 8000bec:	4b0a      	ldr	r3, [pc, #40]	@ (8000c18 <PWM_Init+0xa4>)
 8000bee:	6a1b      	ldr	r3, [r3, #32]
 8000bf0:	4a09      	ldr	r2, [pc, #36]	@ (8000c18 <PWM_Init+0xa4>)
 8000bf2:	f043 0310 	orr.w	r3, r3, #16
 8000bf6:	6213      	str	r3, [r2, #32]
    TIM4->CR1 |= TIM_CR1_CEN;
 8000bf8:	4b07      	ldr	r3, [pc, #28]	@ (8000c18 <PWM_Init+0xa4>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a06      	ldr	r2, [pc, #24]	@ (8000c18 <PWM_Init+0xa4>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020400 	.word	0x40020400
 8000c18:	40000800 	.word	0x40000800

08000c1c <Update_PWM_From_Mode>:

void Update_PWM_From_Mode(uint8_t mode) {
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
    switch (mode) {
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	2b03      	cmp	r3, #3
 8000c2a:	d81b      	bhi.n	8000c64 <Update_PWM_From_Mode+0x48>
 8000c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8000c34 <Update_PWM_From_Mode+0x18>)
 8000c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c32:	bf00      	nop
 8000c34:	08000c5d 	.word	0x08000c5d
 8000c38:	08000c55 	.word	0x08000c55
 8000c3c:	08000c4d 	.word	0x08000c4d
 8000c40:	08000c45 	.word	0x08000c45
        case 3: TIM4->CCR2 = 100; break;  // 100% tốc độ
 8000c44:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <Update_PWM_From_Mode+0x5c>)
 8000c46:	2264      	movs	r2, #100	@ 0x64
 8000c48:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c4a:	e00f      	b.n	8000c6c <Update_PWM_From_Mode+0x50>
        case 2: TIM4->CCR2 = 80;  break;
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c78 <Update_PWM_From_Mode+0x5c>)
 8000c4e:	2250      	movs	r2, #80	@ 0x50
 8000c50:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c52:	e00b      	b.n	8000c6c <Update_PWM_From_Mode+0x50>
        case 1: TIM4->CCR2 = 60;  break;
 8000c54:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <Update_PWM_From_Mode+0x5c>)
 8000c56:	223c      	movs	r2, #60	@ 0x3c
 8000c58:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c5a:	e007      	b.n	8000c6c <Update_PWM_From_Mode+0x50>
        case 0: TIM4->CCR2 = 0;   break;  // Dừng
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <Update_PWM_From_Mode+0x5c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c62:	e003      	b.n	8000c6c <Update_PWM_From_Mode+0x50>
        default: TIM4->CCR2 = 0;  break;
 8000c64:	4b04      	ldr	r3, [pc, #16]	@ (8000c78 <Update_PWM_From_Mode+0x5c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c6a:	bf00      	nop
    }
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	40000800 	.word	0x40000800

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <NMI_Handler+0x4>

08000c84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <MemManage_Handler+0x4>

08000c94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <BusFault_Handler+0x4>

08000c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <UsageFault_Handler+0x4>

08000ca4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <SysTick_Init>:
#include "stm32f4xx.h"
#include "system.h"

volatile uint32_t system_tick = 0;

void SysTick_Init(void) {
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
    SysTick->LOAD = (16000000 / 1000) - 1;
 8000cd4:	4b07      	ldr	r3, [pc, #28]	@ (8000cf4 <SysTick_Init+0x24>)
 8000cd6:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000cda:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 8000cdc:	4b05      	ldr	r3, [pc, #20]	@ (8000cf4 <SysTick_Init+0x24>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce2:	4b04      	ldr	r3, [pc, #16]	@ (8000cf4 <SysTick_Init+0x24>)
 8000ce4:	2207      	movs	r2, #7
 8000ce6:	601a      	str	r2, [r3, #0]
                    SysTick_CTRL_TICKINT_Msk |
                    SysTick_CTRL_ENABLE_Msk;
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000e010 	.word	0xe000e010

08000cf8 <SysTick_Handler>:

void SysTick_Handler(void) {
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
    system_tick++;
 8000cfc:	4b04      	ldr	r3, [pc, #16]	@ (8000d10 <SysTick_Handler+0x18>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	3301      	adds	r3, #1
 8000d02:	4a03      	ldr	r2, [pc, #12]	@ (8000d10 <SysTick_Handler+0x18>)
 8000d04:	6013      	str	r3, [r2, #0]
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	20000080 	.word	0x20000080

08000d14 <Delay_ms>:

void Delay_ms(uint32_t ms) {
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
    uint32_t start = system_tick;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	@ (8000d40 <Delay_ms+0x2c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	60fb      	str	r3, [r7, #12]
    while ((system_tick - start) < ms);
 8000d22:	bf00      	nop
 8000d24:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <Delay_ms+0x2c>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d8f8      	bhi.n	8000d24 <Delay_ms+0x10>
}
 8000d32:	bf00      	nop
 8000d34:	bf00      	nop
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	20000080 	.word	0x20000080

08000d44 <GetTick>:

uint32_t GetTick(void) {
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
    return system_tick;
 8000d48:	4b03      	ldr	r3, [pc, #12]	@ (8000d58 <GetTick+0x14>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000080 	.word	0x20000080

08000d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d60:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <SystemInit+0x20>)
 8000d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d66:	4a05      	ldr	r2, [pc, #20]	@ (8000d7c <SystemInit+0x20>)
 8000d68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_EnableIRQ>:
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	db0b      	blt.n	8000daa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	f003 021f 	and.w	r2, r3, #31
 8000d98:	4907      	ldr	r1, [pc, #28]	@ (8000db8 <__NVIC_EnableIRQ+0x38>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	095b      	lsrs	r3, r3, #5
 8000da0:	2001      	movs	r0, #1
 8000da2:	fa00 f202 	lsl.w	r2, r0, r2
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e100 	.word	0xe000e100

08000dbc <TIM3_Init>:
extern volatile uint8_t countdown;
extern volatile uint8_t mode;
extern volatile uint8_t button_pressed;
extern volatile uint8_t oled_state;

void TIM3_Init(void) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000dfc <TIM3_Init+0x40>)
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000dfc <TIM3_Init+0x40>)
 8000dc6:	f043 0302 	orr.w	r3, r3, #2
 8000dca:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM3->PSC = 15999;      // 16MHz / 16000 = 1kHz (1ms)
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <TIM3_Init+0x44>)
 8000dce:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000dd2:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = 100 - 1;    // 100ms
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000e00 <TIM3_Init+0x44>)
 8000dd6:	2263      	movs	r2, #99	@ 0x63
 8000dd8:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM3->DIER |= TIM_DIER_UIE;
 8000dda:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <TIM3_Init+0x44>)
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	4a08      	ldr	r2, [pc, #32]	@ (8000e00 <TIM3_Init+0x44>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	60d3      	str	r3, [r2, #12]
    TIM3->CR1 |= TIM_CR1_CEN;
 8000de6:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <TIM3_Init+0x44>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a05      	ldr	r2, [pc, #20]	@ (8000e00 <TIM3_Init+0x44>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6013      	str	r3, [r2, #0]
    NVIC_EnableIRQ(TIM3_IRQn);
 8000df2:	201d      	movs	r0, #29
 8000df4:	f7ff ffc4 	bl	8000d80 <__NVIC_EnableIRQ>
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40000400 	.word	0x40000400

08000e04 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
    static uint8_t tick_500 = 0;
    static uint8_t tick_1000 = 0;

    TIM3->SR &= ~TIM_SR_UIF;
 8000e08:	4b40      	ldr	r3, [pc, #256]	@ (8000f0c <TIM3_IRQHandler+0x108>)
 8000e0a:	691b      	ldr	r3, [r3, #16]
 8000e0c:	4a3f      	ldr	r2, [pc, #252]	@ (8000f0c <TIM3_IRQHandler+0x108>)
 8000e0e:	f023 0301 	bic.w	r3, r3, #1
 8000e12:	6113      	str	r3, [r2, #16]

    // Gọi ADC mỗi 100ms
    ADC1->CR2 |= ADC_CR2_SWSTART;
 8000e14:	4b3e      	ldr	r3, [pc, #248]	@ (8000f10 <TIM3_IRQHandler+0x10c>)
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	4a3d      	ldr	r2, [pc, #244]	@ (8000f10 <TIM3_IRQHandler+0x10c>)
 8000e1a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000e1e:	6093      	str	r3, [r2, #8]

    if (!button_pressed) {
 8000e20:	4b3c      	ldr	r3, [pc, #240]	@ (8000f14 <TIM3_IRQHandler+0x110>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d106      	bne.n	8000e38 <TIM3_IRQHandler+0x34>
        mode = Mode_Update_From_ADC();
 8000e2a:	f7ff fa9d 	bl	8000368 <Mode_Update_From_ADC>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b39      	ldr	r3, [pc, #228]	@ (8000f18 <TIM3_IRQHandler+0x114>)
 8000e34:	701a      	strb	r2, [r3, #0]
 8000e36:	e002      	b.n	8000e3e <TIM3_IRQHandler+0x3a>
    } else {
        button_pressed = 0;
 8000e38:	4b36      	ldr	r3, [pc, #216]	@ (8000f14 <TIM3_IRQHandler+0x110>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]
    }

    if (oled_state == 1 || oled_state == 3) {
 8000e3e:	4b37      	ldr	r3, [pc, #220]	@ (8000f1c <TIM3_IRQHandler+0x118>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d004      	beq.n	8000e52 <TIM3_IRQHandler+0x4e>
 8000e48:	4b34      	ldr	r3, [pc, #208]	@ (8000f1c <TIM3_IRQHandler+0x118>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d110      	bne.n	8000e74 <TIM3_IRQHandler+0x70>
        Update_PWM_From_Mode(mode);
 8000e52:	4b31      	ldr	r3, [pc, #196]	@ (8000f18 <TIM3_IRQHandler+0x114>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fedf 	bl	8000c1c <Update_PWM_From_Mode>
        LED_Update(mode, countdown);
 8000e5e:	4b2e      	ldr	r3, [pc, #184]	@ (8000f18 <TIM3_IRQHandler+0x114>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	4a2e      	ldr	r2, [pc, #184]	@ (8000f20 <TIM3_IRQHandler+0x11c>)
 8000e66:	7812      	ldrb	r2, [r2, #0]
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fce5 	bl	800083c <LED_Update>
 8000e72:	e006      	b.n	8000e82 <TIM3_IRQHandler+0x7e>
    } else {
        TIM4->CCR2 = 0;
 8000e74:	4b2b      	ldr	r3, [pc, #172]	@ (8000f24 <TIM3_IRQHandler+0x120>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	639a      	str	r2, [r3, #56]	@ 0x38
        LED_Update(0, 0);
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f7ff fcdd 	bl	800083c <LED_Update>
    }

    tick_500++;
 8000e82:	4b29      	ldr	r3, [pc, #164]	@ (8000f28 <TIM3_IRQHandler+0x124>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	3301      	adds	r3, #1
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4b27      	ldr	r3, [pc, #156]	@ (8000f28 <TIM3_IRQHandler+0x124>)
 8000e8c:	701a      	strb	r2, [r3, #0]
    tick_1000++;
 8000e8e:	4b27      	ldr	r3, [pc, #156]	@ (8000f2c <TIM3_IRQHandler+0x128>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	3301      	adds	r3, #1
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4b25      	ldr	r3, [pc, #148]	@ (8000f2c <TIM3_IRQHandler+0x128>)
 8000e98:	701a      	strb	r2, [r3, #0]

    if (tick_500 >= 5) {
 8000e9a:	4b23      	ldr	r3, [pc, #140]	@ (8000f28 <TIM3_IRQHandler+0x124>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	d90c      	bls.n	8000ebc <TIM3_IRQHandler+0xb8>
        tick_500 = 0;
 8000ea2:	4b21      	ldr	r3, [pc, #132]	@ (8000f28 <TIM3_IRQHandler+0x124>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
        SSD1306_DisplayStatus(mode, countdown);
 8000ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f18 <TIM3_IRQHandler+0x114>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	4a1c      	ldr	r2, [pc, #112]	@ (8000f20 <TIM3_IRQHandler+0x11c>)
 8000eb0:	7812      	ldrb	r2, [r2, #0]
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fe1e 	bl	8000af8 <SSD1306_DisplayStatus>
    }

    if (tick_1000 >= 10) {
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f2c <TIM3_IRQHandler+0x128>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b09      	cmp	r3, #9
 8000ec2:	d920      	bls.n	8000f06 <TIM3_IRQHandler+0x102>
        tick_1000 = 0;
 8000ec4:	4b19      	ldr	r3, [pc, #100]	@ (8000f2c <TIM3_IRQHandler+0x128>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
        if (oled_state == 1 && countdown > 0 && mode != 0) {
 8000eca:	4b14      	ldr	r3, [pc, #80]	@ (8000f1c <TIM3_IRQHandler+0x118>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d118      	bne.n	8000f06 <TIM3_IRQHandler+0x102>
 8000ed4:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <TIM3_IRQHandler+0x11c>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d013      	beq.n	8000f06 <TIM3_IRQHandler+0x102>
 8000ede:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <TIM3_IRQHandler+0x114>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d00e      	beq.n	8000f06 <TIM3_IRQHandler+0x102>
            countdown--;
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f20 <TIM3_IRQHandler+0x11c>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <TIM3_IRQHandler+0x11c>)
 8000ef4:	701a      	strb	r2, [r3, #0]
            if (countdown == 0) {
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f20 <TIM3_IRQHandler+0x11c>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d102      	bne.n	8000f06 <TIM3_IRQHandler+0x102>
                oled_state = 0;
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <TIM3_IRQHandler+0x118>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
            }
        }
    }
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40000400 	.word	0x40000400
 8000f10:	40012000 	.word	0x40012000
 8000f14:	20000073 	.word	0x20000073
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	20000002 	.word	0x20000002
 8000f20:	20000072 	.word	0x20000072
 8000f24:	40000800 	.word	0x40000800
 8000f28:	20000084 	.word	0x20000084
 8000f2c:	20000085 	.word	0x20000085

08000f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f34:	f7ff ff12 	bl	8000d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f38:	480c      	ldr	r0, [pc, #48]	@ (8000f6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f3a:	490d      	ldr	r1, [pc, #52]	@ (8000f70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f40:	e002      	b.n	8000f48 <LoopCopyDataInit>

08000f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f46:	3304      	adds	r3, #4

08000f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f4c:	d3f9      	bcc.n	8000f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f50:	4c0a      	ldr	r4, [pc, #40]	@ (8000f7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f54:	e001      	b.n	8000f5a <LoopFillZerobss>

08000f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f58:	3204      	adds	r2, #4

08000f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f5c:	d3fb      	bcc.n	8000f56 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000f5e:	f000 f833 	bl	8000fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f62:	f7ff fcad 	bl	80008c0 <main>
  bx  lr    
 8000f66:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f68:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f70:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000f74:	08001ab4 	.word	0x08001ab4
  ldr r2, =_sbss
 8000f78:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000f7c:	200001d4 	.word	0x200001d4

08000f80 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f80:	e7fe      	b.n	8000f80 <DMA1_Stream0_IRQHandler>
	...

08000f84 <siprintf>:
 8000f84:	b40e      	push	{r1, r2, r3}
 8000f86:	b510      	push	{r4, lr}
 8000f88:	b09d      	sub	sp, #116	@ 0x74
 8000f8a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8000f8c:	9002      	str	r0, [sp, #8]
 8000f8e:	9006      	str	r0, [sp, #24]
 8000f90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000f94:	480a      	ldr	r0, [pc, #40]	@ (8000fc0 <siprintf+0x3c>)
 8000f96:	9107      	str	r1, [sp, #28]
 8000f98:	9104      	str	r1, [sp, #16]
 8000f9a:	490a      	ldr	r1, [pc, #40]	@ (8000fc4 <siprintf+0x40>)
 8000f9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000fa0:	9105      	str	r1, [sp, #20]
 8000fa2:	2400      	movs	r4, #0
 8000fa4:	a902      	add	r1, sp, #8
 8000fa6:	6800      	ldr	r0, [r0, #0]
 8000fa8:	9301      	str	r3, [sp, #4]
 8000faa:	941b      	str	r4, [sp, #108]	@ 0x6c
 8000fac:	f000 f986 	bl	80012bc <_svfiprintf_r>
 8000fb0:	9b02      	ldr	r3, [sp, #8]
 8000fb2:	701c      	strb	r4, [r3, #0]
 8000fb4:	b01d      	add	sp, #116	@ 0x74
 8000fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fba:	b003      	add	sp, #12
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000004 	.word	0x20000004
 8000fc4:	ffff0208 	.word	0xffff0208

08000fc8 <__libc_init_array>:
 8000fc8:	b570      	push	{r4, r5, r6, lr}
 8000fca:	4d0d      	ldr	r5, [pc, #52]	@ (8001000 <__libc_init_array+0x38>)
 8000fcc:	4c0d      	ldr	r4, [pc, #52]	@ (8001004 <__libc_init_array+0x3c>)
 8000fce:	1b64      	subs	r4, r4, r5
 8000fd0:	10a4      	asrs	r4, r4, #2
 8000fd2:	2600      	movs	r6, #0
 8000fd4:	42a6      	cmp	r6, r4
 8000fd6:	d109      	bne.n	8000fec <__libc_init_array+0x24>
 8000fd8:	4d0b      	ldr	r5, [pc, #44]	@ (8001008 <__libc_init_array+0x40>)
 8000fda:	4c0c      	ldr	r4, [pc, #48]	@ (800100c <__libc_init_array+0x44>)
 8000fdc:	f000 fc72 	bl	80018c4 <_init>
 8000fe0:	1b64      	subs	r4, r4, r5
 8000fe2:	10a4      	asrs	r4, r4, #2
 8000fe4:	2600      	movs	r6, #0
 8000fe6:	42a6      	cmp	r6, r4
 8000fe8:	d105      	bne.n	8000ff6 <__libc_init_array+0x2e>
 8000fea:	bd70      	pop	{r4, r5, r6, pc}
 8000fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ff0:	4798      	blx	r3
 8000ff2:	3601      	adds	r6, #1
 8000ff4:	e7ee      	b.n	8000fd4 <__libc_init_array+0xc>
 8000ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ffa:	4798      	blx	r3
 8000ffc:	3601      	adds	r6, #1
 8000ffe:	e7f2      	b.n	8000fe6 <__libc_init_array+0x1e>
 8001000:	08001aac 	.word	0x08001aac
 8001004:	08001aac 	.word	0x08001aac
 8001008:	08001aac 	.word	0x08001aac
 800100c:	08001ab0 	.word	0x08001ab0

08001010 <__retarget_lock_acquire_recursive>:
 8001010:	4770      	bx	lr

08001012 <__retarget_lock_release_recursive>:
 8001012:	4770      	bx	lr

08001014 <_free_r>:
 8001014:	b538      	push	{r3, r4, r5, lr}
 8001016:	4605      	mov	r5, r0
 8001018:	2900      	cmp	r1, #0
 800101a:	d041      	beq.n	80010a0 <_free_r+0x8c>
 800101c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001020:	1f0c      	subs	r4, r1, #4
 8001022:	2b00      	cmp	r3, #0
 8001024:	bfb8      	it	lt
 8001026:	18e4      	addlt	r4, r4, r3
 8001028:	f000 f8e0 	bl	80011ec <__malloc_lock>
 800102c:	4a1d      	ldr	r2, [pc, #116]	@ (80010a4 <_free_r+0x90>)
 800102e:	6813      	ldr	r3, [r2, #0]
 8001030:	b933      	cbnz	r3, 8001040 <_free_r+0x2c>
 8001032:	6063      	str	r3, [r4, #4]
 8001034:	6014      	str	r4, [r2, #0]
 8001036:	4628      	mov	r0, r5
 8001038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800103c:	f000 b8dc 	b.w	80011f8 <__malloc_unlock>
 8001040:	42a3      	cmp	r3, r4
 8001042:	d908      	bls.n	8001056 <_free_r+0x42>
 8001044:	6820      	ldr	r0, [r4, #0]
 8001046:	1821      	adds	r1, r4, r0
 8001048:	428b      	cmp	r3, r1
 800104a:	bf01      	itttt	eq
 800104c:	6819      	ldreq	r1, [r3, #0]
 800104e:	685b      	ldreq	r3, [r3, #4]
 8001050:	1809      	addeq	r1, r1, r0
 8001052:	6021      	streq	r1, [r4, #0]
 8001054:	e7ed      	b.n	8001032 <_free_r+0x1e>
 8001056:	461a      	mov	r2, r3
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	b10b      	cbz	r3, 8001060 <_free_r+0x4c>
 800105c:	42a3      	cmp	r3, r4
 800105e:	d9fa      	bls.n	8001056 <_free_r+0x42>
 8001060:	6811      	ldr	r1, [r2, #0]
 8001062:	1850      	adds	r0, r2, r1
 8001064:	42a0      	cmp	r0, r4
 8001066:	d10b      	bne.n	8001080 <_free_r+0x6c>
 8001068:	6820      	ldr	r0, [r4, #0]
 800106a:	4401      	add	r1, r0
 800106c:	1850      	adds	r0, r2, r1
 800106e:	4283      	cmp	r3, r0
 8001070:	6011      	str	r1, [r2, #0]
 8001072:	d1e0      	bne.n	8001036 <_free_r+0x22>
 8001074:	6818      	ldr	r0, [r3, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	6053      	str	r3, [r2, #4]
 800107a:	4408      	add	r0, r1
 800107c:	6010      	str	r0, [r2, #0]
 800107e:	e7da      	b.n	8001036 <_free_r+0x22>
 8001080:	d902      	bls.n	8001088 <_free_r+0x74>
 8001082:	230c      	movs	r3, #12
 8001084:	602b      	str	r3, [r5, #0]
 8001086:	e7d6      	b.n	8001036 <_free_r+0x22>
 8001088:	6820      	ldr	r0, [r4, #0]
 800108a:	1821      	adds	r1, r4, r0
 800108c:	428b      	cmp	r3, r1
 800108e:	bf04      	itt	eq
 8001090:	6819      	ldreq	r1, [r3, #0]
 8001092:	685b      	ldreq	r3, [r3, #4]
 8001094:	6063      	str	r3, [r4, #4]
 8001096:	bf04      	itt	eq
 8001098:	1809      	addeq	r1, r1, r0
 800109a:	6021      	streq	r1, [r4, #0]
 800109c:	6054      	str	r4, [r2, #4]
 800109e:	e7ca      	b.n	8001036 <_free_r+0x22>
 80010a0:	bd38      	pop	{r3, r4, r5, pc}
 80010a2:	bf00      	nop
 80010a4:	200001cc 	.word	0x200001cc

080010a8 <sbrk_aligned>:
 80010a8:	b570      	push	{r4, r5, r6, lr}
 80010aa:	4e0f      	ldr	r6, [pc, #60]	@ (80010e8 <sbrk_aligned+0x40>)
 80010ac:	460c      	mov	r4, r1
 80010ae:	6831      	ldr	r1, [r6, #0]
 80010b0:	4605      	mov	r5, r0
 80010b2:	b911      	cbnz	r1, 80010ba <sbrk_aligned+0x12>
 80010b4:	f000 fba4 	bl	8001800 <_sbrk_r>
 80010b8:	6030      	str	r0, [r6, #0]
 80010ba:	4621      	mov	r1, r4
 80010bc:	4628      	mov	r0, r5
 80010be:	f000 fb9f 	bl	8001800 <_sbrk_r>
 80010c2:	1c43      	adds	r3, r0, #1
 80010c4:	d103      	bne.n	80010ce <sbrk_aligned+0x26>
 80010c6:	f04f 34ff 	mov.w	r4, #4294967295
 80010ca:	4620      	mov	r0, r4
 80010cc:	bd70      	pop	{r4, r5, r6, pc}
 80010ce:	1cc4      	adds	r4, r0, #3
 80010d0:	f024 0403 	bic.w	r4, r4, #3
 80010d4:	42a0      	cmp	r0, r4
 80010d6:	d0f8      	beq.n	80010ca <sbrk_aligned+0x22>
 80010d8:	1a21      	subs	r1, r4, r0
 80010da:	4628      	mov	r0, r5
 80010dc:	f000 fb90 	bl	8001800 <_sbrk_r>
 80010e0:	3001      	adds	r0, #1
 80010e2:	d1f2      	bne.n	80010ca <sbrk_aligned+0x22>
 80010e4:	e7ef      	b.n	80010c6 <sbrk_aligned+0x1e>
 80010e6:	bf00      	nop
 80010e8:	200001c8 	.word	0x200001c8

080010ec <_malloc_r>:
 80010ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80010f0:	1ccd      	adds	r5, r1, #3
 80010f2:	f025 0503 	bic.w	r5, r5, #3
 80010f6:	3508      	adds	r5, #8
 80010f8:	2d0c      	cmp	r5, #12
 80010fa:	bf38      	it	cc
 80010fc:	250c      	movcc	r5, #12
 80010fe:	2d00      	cmp	r5, #0
 8001100:	4606      	mov	r6, r0
 8001102:	db01      	blt.n	8001108 <_malloc_r+0x1c>
 8001104:	42a9      	cmp	r1, r5
 8001106:	d904      	bls.n	8001112 <_malloc_r+0x26>
 8001108:	230c      	movs	r3, #12
 800110a:	6033      	str	r3, [r6, #0]
 800110c:	2000      	movs	r0, #0
 800110e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001112:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80011e8 <_malloc_r+0xfc>
 8001116:	f000 f869 	bl	80011ec <__malloc_lock>
 800111a:	f8d8 3000 	ldr.w	r3, [r8]
 800111e:	461c      	mov	r4, r3
 8001120:	bb44      	cbnz	r4, 8001174 <_malloc_r+0x88>
 8001122:	4629      	mov	r1, r5
 8001124:	4630      	mov	r0, r6
 8001126:	f7ff ffbf 	bl	80010a8 <sbrk_aligned>
 800112a:	1c43      	adds	r3, r0, #1
 800112c:	4604      	mov	r4, r0
 800112e:	d158      	bne.n	80011e2 <_malloc_r+0xf6>
 8001130:	f8d8 4000 	ldr.w	r4, [r8]
 8001134:	4627      	mov	r7, r4
 8001136:	2f00      	cmp	r7, #0
 8001138:	d143      	bne.n	80011c2 <_malloc_r+0xd6>
 800113a:	2c00      	cmp	r4, #0
 800113c:	d04b      	beq.n	80011d6 <_malloc_r+0xea>
 800113e:	6823      	ldr	r3, [r4, #0]
 8001140:	4639      	mov	r1, r7
 8001142:	4630      	mov	r0, r6
 8001144:	eb04 0903 	add.w	r9, r4, r3
 8001148:	f000 fb5a 	bl	8001800 <_sbrk_r>
 800114c:	4581      	cmp	r9, r0
 800114e:	d142      	bne.n	80011d6 <_malloc_r+0xea>
 8001150:	6821      	ldr	r1, [r4, #0]
 8001152:	1a6d      	subs	r5, r5, r1
 8001154:	4629      	mov	r1, r5
 8001156:	4630      	mov	r0, r6
 8001158:	f7ff ffa6 	bl	80010a8 <sbrk_aligned>
 800115c:	3001      	adds	r0, #1
 800115e:	d03a      	beq.n	80011d6 <_malloc_r+0xea>
 8001160:	6823      	ldr	r3, [r4, #0]
 8001162:	442b      	add	r3, r5
 8001164:	6023      	str	r3, [r4, #0]
 8001166:	f8d8 3000 	ldr.w	r3, [r8]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	bb62      	cbnz	r2, 80011c8 <_malloc_r+0xdc>
 800116e:	f8c8 7000 	str.w	r7, [r8]
 8001172:	e00f      	b.n	8001194 <_malloc_r+0xa8>
 8001174:	6822      	ldr	r2, [r4, #0]
 8001176:	1b52      	subs	r2, r2, r5
 8001178:	d420      	bmi.n	80011bc <_malloc_r+0xd0>
 800117a:	2a0b      	cmp	r2, #11
 800117c:	d917      	bls.n	80011ae <_malloc_r+0xc2>
 800117e:	1961      	adds	r1, r4, r5
 8001180:	42a3      	cmp	r3, r4
 8001182:	6025      	str	r5, [r4, #0]
 8001184:	bf18      	it	ne
 8001186:	6059      	strne	r1, [r3, #4]
 8001188:	6863      	ldr	r3, [r4, #4]
 800118a:	bf08      	it	eq
 800118c:	f8c8 1000 	streq.w	r1, [r8]
 8001190:	5162      	str	r2, [r4, r5]
 8001192:	604b      	str	r3, [r1, #4]
 8001194:	4630      	mov	r0, r6
 8001196:	f000 f82f 	bl	80011f8 <__malloc_unlock>
 800119a:	f104 000b 	add.w	r0, r4, #11
 800119e:	1d23      	adds	r3, r4, #4
 80011a0:	f020 0007 	bic.w	r0, r0, #7
 80011a4:	1ac2      	subs	r2, r0, r3
 80011a6:	bf1c      	itt	ne
 80011a8:	1a1b      	subne	r3, r3, r0
 80011aa:	50a3      	strne	r3, [r4, r2]
 80011ac:	e7af      	b.n	800110e <_malloc_r+0x22>
 80011ae:	6862      	ldr	r2, [r4, #4]
 80011b0:	42a3      	cmp	r3, r4
 80011b2:	bf0c      	ite	eq
 80011b4:	f8c8 2000 	streq.w	r2, [r8]
 80011b8:	605a      	strne	r2, [r3, #4]
 80011ba:	e7eb      	b.n	8001194 <_malloc_r+0xa8>
 80011bc:	4623      	mov	r3, r4
 80011be:	6864      	ldr	r4, [r4, #4]
 80011c0:	e7ae      	b.n	8001120 <_malloc_r+0x34>
 80011c2:	463c      	mov	r4, r7
 80011c4:	687f      	ldr	r7, [r7, #4]
 80011c6:	e7b6      	b.n	8001136 <_malloc_r+0x4a>
 80011c8:	461a      	mov	r2, r3
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	42a3      	cmp	r3, r4
 80011ce:	d1fb      	bne.n	80011c8 <_malloc_r+0xdc>
 80011d0:	2300      	movs	r3, #0
 80011d2:	6053      	str	r3, [r2, #4]
 80011d4:	e7de      	b.n	8001194 <_malloc_r+0xa8>
 80011d6:	230c      	movs	r3, #12
 80011d8:	6033      	str	r3, [r6, #0]
 80011da:	4630      	mov	r0, r6
 80011dc:	f000 f80c 	bl	80011f8 <__malloc_unlock>
 80011e0:	e794      	b.n	800110c <_malloc_r+0x20>
 80011e2:	6005      	str	r5, [r0, #0]
 80011e4:	e7d6      	b.n	8001194 <_malloc_r+0xa8>
 80011e6:	bf00      	nop
 80011e8:	200001cc 	.word	0x200001cc

080011ec <__malloc_lock>:
 80011ec:	4801      	ldr	r0, [pc, #4]	@ (80011f4 <__malloc_lock+0x8>)
 80011ee:	f7ff bf0f 	b.w	8001010 <__retarget_lock_acquire_recursive>
 80011f2:	bf00      	nop
 80011f4:	200001c4 	.word	0x200001c4

080011f8 <__malloc_unlock>:
 80011f8:	4801      	ldr	r0, [pc, #4]	@ (8001200 <__malloc_unlock+0x8>)
 80011fa:	f7ff bf0a 	b.w	8001012 <__retarget_lock_release_recursive>
 80011fe:	bf00      	nop
 8001200:	200001c4 	.word	0x200001c4

08001204 <__ssputs_r>:
 8001204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001208:	688e      	ldr	r6, [r1, #8]
 800120a:	461f      	mov	r7, r3
 800120c:	42be      	cmp	r6, r7
 800120e:	680b      	ldr	r3, [r1, #0]
 8001210:	4682      	mov	sl, r0
 8001212:	460c      	mov	r4, r1
 8001214:	4690      	mov	r8, r2
 8001216:	d82d      	bhi.n	8001274 <__ssputs_r+0x70>
 8001218:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800121c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001220:	d026      	beq.n	8001270 <__ssputs_r+0x6c>
 8001222:	6965      	ldr	r5, [r4, #20]
 8001224:	6909      	ldr	r1, [r1, #16]
 8001226:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800122a:	eba3 0901 	sub.w	r9, r3, r1
 800122e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001232:	1c7b      	adds	r3, r7, #1
 8001234:	444b      	add	r3, r9
 8001236:	106d      	asrs	r5, r5, #1
 8001238:	429d      	cmp	r5, r3
 800123a:	bf38      	it	cc
 800123c:	461d      	movcc	r5, r3
 800123e:	0553      	lsls	r3, r2, #21
 8001240:	d527      	bpl.n	8001292 <__ssputs_r+0x8e>
 8001242:	4629      	mov	r1, r5
 8001244:	f7ff ff52 	bl	80010ec <_malloc_r>
 8001248:	4606      	mov	r6, r0
 800124a:	b360      	cbz	r0, 80012a6 <__ssputs_r+0xa2>
 800124c:	6921      	ldr	r1, [r4, #16]
 800124e:	464a      	mov	r2, r9
 8001250:	f000 fae6 	bl	8001820 <memcpy>
 8001254:	89a3      	ldrh	r3, [r4, #12]
 8001256:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800125a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800125e:	81a3      	strh	r3, [r4, #12]
 8001260:	6126      	str	r6, [r4, #16]
 8001262:	6165      	str	r5, [r4, #20]
 8001264:	444e      	add	r6, r9
 8001266:	eba5 0509 	sub.w	r5, r5, r9
 800126a:	6026      	str	r6, [r4, #0]
 800126c:	60a5      	str	r5, [r4, #8]
 800126e:	463e      	mov	r6, r7
 8001270:	42be      	cmp	r6, r7
 8001272:	d900      	bls.n	8001276 <__ssputs_r+0x72>
 8001274:	463e      	mov	r6, r7
 8001276:	6820      	ldr	r0, [r4, #0]
 8001278:	4632      	mov	r2, r6
 800127a:	4641      	mov	r1, r8
 800127c:	f000 faa6 	bl	80017cc <memmove>
 8001280:	68a3      	ldr	r3, [r4, #8]
 8001282:	1b9b      	subs	r3, r3, r6
 8001284:	60a3      	str	r3, [r4, #8]
 8001286:	6823      	ldr	r3, [r4, #0]
 8001288:	4433      	add	r3, r6
 800128a:	6023      	str	r3, [r4, #0]
 800128c:	2000      	movs	r0, #0
 800128e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001292:	462a      	mov	r2, r5
 8001294:	f000 fad2 	bl	800183c <_realloc_r>
 8001298:	4606      	mov	r6, r0
 800129a:	2800      	cmp	r0, #0
 800129c:	d1e0      	bne.n	8001260 <__ssputs_r+0x5c>
 800129e:	6921      	ldr	r1, [r4, #16]
 80012a0:	4650      	mov	r0, sl
 80012a2:	f7ff feb7 	bl	8001014 <_free_r>
 80012a6:	230c      	movs	r3, #12
 80012a8:	f8ca 3000 	str.w	r3, [sl]
 80012ac:	89a3      	ldrh	r3, [r4, #12]
 80012ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012b2:	81a3      	strh	r3, [r4, #12]
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	e7e9      	b.n	800128e <__ssputs_r+0x8a>
	...

080012bc <_svfiprintf_r>:
 80012bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012c0:	4698      	mov	r8, r3
 80012c2:	898b      	ldrh	r3, [r1, #12]
 80012c4:	061b      	lsls	r3, r3, #24
 80012c6:	b09d      	sub	sp, #116	@ 0x74
 80012c8:	4607      	mov	r7, r0
 80012ca:	460d      	mov	r5, r1
 80012cc:	4614      	mov	r4, r2
 80012ce:	d510      	bpl.n	80012f2 <_svfiprintf_r+0x36>
 80012d0:	690b      	ldr	r3, [r1, #16]
 80012d2:	b973      	cbnz	r3, 80012f2 <_svfiprintf_r+0x36>
 80012d4:	2140      	movs	r1, #64	@ 0x40
 80012d6:	f7ff ff09 	bl	80010ec <_malloc_r>
 80012da:	6028      	str	r0, [r5, #0]
 80012dc:	6128      	str	r0, [r5, #16]
 80012de:	b930      	cbnz	r0, 80012ee <_svfiprintf_r+0x32>
 80012e0:	230c      	movs	r3, #12
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295
 80012e8:	b01d      	add	sp, #116	@ 0x74
 80012ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012ee:	2340      	movs	r3, #64	@ 0x40
 80012f0:	616b      	str	r3, [r5, #20]
 80012f2:	2300      	movs	r3, #0
 80012f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80012f6:	2320      	movs	r3, #32
 80012f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80012fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8001300:	2330      	movs	r3, #48	@ 0x30
 8001302:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80014a0 <_svfiprintf_r+0x1e4>
 8001306:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800130a:	f04f 0901 	mov.w	r9, #1
 800130e:	4623      	mov	r3, r4
 8001310:	469a      	mov	sl, r3
 8001312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001316:	b10a      	cbz	r2, 800131c <_svfiprintf_r+0x60>
 8001318:	2a25      	cmp	r2, #37	@ 0x25
 800131a:	d1f9      	bne.n	8001310 <_svfiprintf_r+0x54>
 800131c:	ebba 0b04 	subs.w	fp, sl, r4
 8001320:	d00b      	beq.n	800133a <_svfiprintf_r+0x7e>
 8001322:	465b      	mov	r3, fp
 8001324:	4622      	mov	r2, r4
 8001326:	4629      	mov	r1, r5
 8001328:	4638      	mov	r0, r7
 800132a:	f7ff ff6b 	bl	8001204 <__ssputs_r>
 800132e:	3001      	adds	r0, #1
 8001330:	f000 80a7 	beq.w	8001482 <_svfiprintf_r+0x1c6>
 8001334:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001336:	445a      	add	r2, fp
 8001338:	9209      	str	r2, [sp, #36]	@ 0x24
 800133a:	f89a 3000 	ldrb.w	r3, [sl]
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 809f 	beq.w	8001482 <_svfiprintf_r+0x1c6>
 8001344:	2300      	movs	r3, #0
 8001346:	f04f 32ff 	mov.w	r2, #4294967295
 800134a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800134e:	f10a 0a01 	add.w	sl, sl, #1
 8001352:	9304      	str	r3, [sp, #16]
 8001354:	9307      	str	r3, [sp, #28]
 8001356:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800135a:	931a      	str	r3, [sp, #104]	@ 0x68
 800135c:	4654      	mov	r4, sl
 800135e:	2205      	movs	r2, #5
 8001360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001364:	484e      	ldr	r0, [pc, #312]	@ (80014a0 <_svfiprintf_r+0x1e4>)
 8001366:	f7fe ff43 	bl	80001f0 <memchr>
 800136a:	9a04      	ldr	r2, [sp, #16]
 800136c:	b9d8      	cbnz	r0, 80013a6 <_svfiprintf_r+0xea>
 800136e:	06d0      	lsls	r0, r2, #27
 8001370:	bf44      	itt	mi
 8001372:	2320      	movmi	r3, #32
 8001374:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001378:	0711      	lsls	r1, r2, #28
 800137a:	bf44      	itt	mi
 800137c:	232b      	movmi	r3, #43	@ 0x2b
 800137e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001382:	f89a 3000 	ldrb.w	r3, [sl]
 8001386:	2b2a      	cmp	r3, #42	@ 0x2a
 8001388:	d015      	beq.n	80013b6 <_svfiprintf_r+0xfa>
 800138a:	9a07      	ldr	r2, [sp, #28]
 800138c:	4654      	mov	r4, sl
 800138e:	2000      	movs	r0, #0
 8001390:	f04f 0c0a 	mov.w	ip, #10
 8001394:	4621      	mov	r1, r4
 8001396:	f811 3b01 	ldrb.w	r3, [r1], #1
 800139a:	3b30      	subs	r3, #48	@ 0x30
 800139c:	2b09      	cmp	r3, #9
 800139e:	d94b      	bls.n	8001438 <_svfiprintf_r+0x17c>
 80013a0:	b1b0      	cbz	r0, 80013d0 <_svfiprintf_r+0x114>
 80013a2:	9207      	str	r2, [sp, #28]
 80013a4:	e014      	b.n	80013d0 <_svfiprintf_r+0x114>
 80013a6:	eba0 0308 	sub.w	r3, r0, r8
 80013aa:	fa09 f303 	lsl.w	r3, r9, r3
 80013ae:	4313      	orrs	r3, r2
 80013b0:	9304      	str	r3, [sp, #16]
 80013b2:	46a2      	mov	sl, r4
 80013b4:	e7d2      	b.n	800135c <_svfiprintf_r+0xa0>
 80013b6:	9b03      	ldr	r3, [sp, #12]
 80013b8:	1d19      	adds	r1, r3, #4
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	9103      	str	r1, [sp, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	bfbb      	ittet	lt
 80013c2:	425b      	neglt	r3, r3
 80013c4:	f042 0202 	orrlt.w	r2, r2, #2
 80013c8:	9307      	strge	r3, [sp, #28]
 80013ca:	9307      	strlt	r3, [sp, #28]
 80013cc:	bfb8      	it	lt
 80013ce:	9204      	strlt	r2, [sp, #16]
 80013d0:	7823      	ldrb	r3, [r4, #0]
 80013d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80013d4:	d10a      	bne.n	80013ec <_svfiprintf_r+0x130>
 80013d6:	7863      	ldrb	r3, [r4, #1]
 80013d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80013da:	d132      	bne.n	8001442 <_svfiprintf_r+0x186>
 80013dc:	9b03      	ldr	r3, [sp, #12]
 80013de:	1d1a      	adds	r2, r3, #4
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	9203      	str	r2, [sp, #12]
 80013e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80013e8:	3402      	adds	r4, #2
 80013ea:	9305      	str	r3, [sp, #20]
 80013ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80014b0 <_svfiprintf_r+0x1f4>
 80013f0:	7821      	ldrb	r1, [r4, #0]
 80013f2:	2203      	movs	r2, #3
 80013f4:	4650      	mov	r0, sl
 80013f6:	f7fe fefb 	bl	80001f0 <memchr>
 80013fa:	b138      	cbz	r0, 800140c <_svfiprintf_r+0x150>
 80013fc:	9b04      	ldr	r3, [sp, #16]
 80013fe:	eba0 000a 	sub.w	r0, r0, sl
 8001402:	2240      	movs	r2, #64	@ 0x40
 8001404:	4082      	lsls	r2, r0
 8001406:	4313      	orrs	r3, r2
 8001408:	3401      	adds	r4, #1
 800140a:	9304      	str	r3, [sp, #16]
 800140c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001410:	4824      	ldr	r0, [pc, #144]	@ (80014a4 <_svfiprintf_r+0x1e8>)
 8001412:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001416:	2206      	movs	r2, #6
 8001418:	f7fe feea 	bl	80001f0 <memchr>
 800141c:	2800      	cmp	r0, #0
 800141e:	d036      	beq.n	800148e <_svfiprintf_r+0x1d2>
 8001420:	4b21      	ldr	r3, [pc, #132]	@ (80014a8 <_svfiprintf_r+0x1ec>)
 8001422:	bb1b      	cbnz	r3, 800146c <_svfiprintf_r+0x1b0>
 8001424:	9b03      	ldr	r3, [sp, #12]
 8001426:	3307      	adds	r3, #7
 8001428:	f023 0307 	bic.w	r3, r3, #7
 800142c:	3308      	adds	r3, #8
 800142e:	9303      	str	r3, [sp, #12]
 8001430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001432:	4433      	add	r3, r6
 8001434:	9309      	str	r3, [sp, #36]	@ 0x24
 8001436:	e76a      	b.n	800130e <_svfiprintf_r+0x52>
 8001438:	fb0c 3202 	mla	r2, ip, r2, r3
 800143c:	460c      	mov	r4, r1
 800143e:	2001      	movs	r0, #1
 8001440:	e7a8      	b.n	8001394 <_svfiprintf_r+0xd8>
 8001442:	2300      	movs	r3, #0
 8001444:	3401      	adds	r4, #1
 8001446:	9305      	str	r3, [sp, #20]
 8001448:	4619      	mov	r1, r3
 800144a:	f04f 0c0a 	mov.w	ip, #10
 800144e:	4620      	mov	r0, r4
 8001450:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001454:	3a30      	subs	r2, #48	@ 0x30
 8001456:	2a09      	cmp	r2, #9
 8001458:	d903      	bls.n	8001462 <_svfiprintf_r+0x1a6>
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0c6      	beq.n	80013ec <_svfiprintf_r+0x130>
 800145e:	9105      	str	r1, [sp, #20]
 8001460:	e7c4      	b.n	80013ec <_svfiprintf_r+0x130>
 8001462:	fb0c 2101 	mla	r1, ip, r1, r2
 8001466:	4604      	mov	r4, r0
 8001468:	2301      	movs	r3, #1
 800146a:	e7f0      	b.n	800144e <_svfiprintf_r+0x192>
 800146c:	ab03      	add	r3, sp, #12
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	462a      	mov	r2, r5
 8001472:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <_svfiprintf_r+0x1f0>)
 8001474:	a904      	add	r1, sp, #16
 8001476:	4638      	mov	r0, r7
 8001478:	f3af 8000 	nop.w
 800147c:	1c42      	adds	r2, r0, #1
 800147e:	4606      	mov	r6, r0
 8001480:	d1d6      	bne.n	8001430 <_svfiprintf_r+0x174>
 8001482:	89ab      	ldrh	r3, [r5, #12]
 8001484:	065b      	lsls	r3, r3, #25
 8001486:	f53f af2d 	bmi.w	80012e4 <_svfiprintf_r+0x28>
 800148a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800148c:	e72c      	b.n	80012e8 <_svfiprintf_r+0x2c>
 800148e:	ab03      	add	r3, sp, #12
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	462a      	mov	r2, r5
 8001494:	4b05      	ldr	r3, [pc, #20]	@ (80014ac <_svfiprintf_r+0x1f0>)
 8001496:	a904      	add	r1, sp, #16
 8001498:	4638      	mov	r0, r7
 800149a:	f000 f879 	bl	8001590 <_printf_i>
 800149e:	e7ed      	b.n	800147c <_svfiprintf_r+0x1c0>
 80014a0:	08001a6f 	.word	0x08001a6f
 80014a4:	08001a79 	.word	0x08001a79
 80014a8:	00000000 	.word	0x00000000
 80014ac:	08001205 	.word	0x08001205
 80014b0:	08001a75 	.word	0x08001a75

080014b4 <_printf_common>:
 80014b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014b8:	4616      	mov	r6, r2
 80014ba:	4698      	mov	r8, r3
 80014bc:	688a      	ldr	r2, [r1, #8]
 80014be:	690b      	ldr	r3, [r1, #16]
 80014c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80014c4:	4293      	cmp	r3, r2
 80014c6:	bfb8      	it	lt
 80014c8:	4613      	movlt	r3, r2
 80014ca:	6033      	str	r3, [r6, #0]
 80014cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80014d0:	4607      	mov	r7, r0
 80014d2:	460c      	mov	r4, r1
 80014d4:	b10a      	cbz	r2, 80014da <_printf_common+0x26>
 80014d6:	3301      	adds	r3, #1
 80014d8:	6033      	str	r3, [r6, #0]
 80014da:	6823      	ldr	r3, [r4, #0]
 80014dc:	0699      	lsls	r1, r3, #26
 80014de:	bf42      	ittt	mi
 80014e0:	6833      	ldrmi	r3, [r6, #0]
 80014e2:	3302      	addmi	r3, #2
 80014e4:	6033      	strmi	r3, [r6, #0]
 80014e6:	6825      	ldr	r5, [r4, #0]
 80014e8:	f015 0506 	ands.w	r5, r5, #6
 80014ec:	d106      	bne.n	80014fc <_printf_common+0x48>
 80014ee:	f104 0a19 	add.w	sl, r4, #25
 80014f2:	68e3      	ldr	r3, [r4, #12]
 80014f4:	6832      	ldr	r2, [r6, #0]
 80014f6:	1a9b      	subs	r3, r3, r2
 80014f8:	42ab      	cmp	r3, r5
 80014fa:	dc26      	bgt.n	800154a <_printf_common+0x96>
 80014fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001500:	6822      	ldr	r2, [r4, #0]
 8001502:	3b00      	subs	r3, #0
 8001504:	bf18      	it	ne
 8001506:	2301      	movne	r3, #1
 8001508:	0692      	lsls	r2, r2, #26
 800150a:	d42b      	bmi.n	8001564 <_printf_common+0xb0>
 800150c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001510:	4641      	mov	r1, r8
 8001512:	4638      	mov	r0, r7
 8001514:	47c8      	blx	r9
 8001516:	3001      	adds	r0, #1
 8001518:	d01e      	beq.n	8001558 <_printf_common+0xa4>
 800151a:	6823      	ldr	r3, [r4, #0]
 800151c:	6922      	ldr	r2, [r4, #16]
 800151e:	f003 0306 	and.w	r3, r3, #6
 8001522:	2b04      	cmp	r3, #4
 8001524:	bf02      	ittt	eq
 8001526:	68e5      	ldreq	r5, [r4, #12]
 8001528:	6833      	ldreq	r3, [r6, #0]
 800152a:	1aed      	subeq	r5, r5, r3
 800152c:	68a3      	ldr	r3, [r4, #8]
 800152e:	bf0c      	ite	eq
 8001530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001534:	2500      	movne	r5, #0
 8001536:	4293      	cmp	r3, r2
 8001538:	bfc4      	itt	gt
 800153a:	1a9b      	subgt	r3, r3, r2
 800153c:	18ed      	addgt	r5, r5, r3
 800153e:	2600      	movs	r6, #0
 8001540:	341a      	adds	r4, #26
 8001542:	42b5      	cmp	r5, r6
 8001544:	d11a      	bne.n	800157c <_printf_common+0xc8>
 8001546:	2000      	movs	r0, #0
 8001548:	e008      	b.n	800155c <_printf_common+0xa8>
 800154a:	2301      	movs	r3, #1
 800154c:	4652      	mov	r2, sl
 800154e:	4641      	mov	r1, r8
 8001550:	4638      	mov	r0, r7
 8001552:	47c8      	blx	r9
 8001554:	3001      	adds	r0, #1
 8001556:	d103      	bne.n	8001560 <_printf_common+0xac>
 8001558:	f04f 30ff 	mov.w	r0, #4294967295
 800155c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001560:	3501      	adds	r5, #1
 8001562:	e7c6      	b.n	80014f2 <_printf_common+0x3e>
 8001564:	18e1      	adds	r1, r4, r3
 8001566:	1c5a      	adds	r2, r3, #1
 8001568:	2030      	movs	r0, #48	@ 0x30
 800156a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800156e:	4422      	add	r2, r4
 8001570:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001574:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001578:	3302      	adds	r3, #2
 800157a:	e7c7      	b.n	800150c <_printf_common+0x58>
 800157c:	2301      	movs	r3, #1
 800157e:	4622      	mov	r2, r4
 8001580:	4641      	mov	r1, r8
 8001582:	4638      	mov	r0, r7
 8001584:	47c8      	blx	r9
 8001586:	3001      	adds	r0, #1
 8001588:	d0e6      	beq.n	8001558 <_printf_common+0xa4>
 800158a:	3601      	adds	r6, #1
 800158c:	e7d9      	b.n	8001542 <_printf_common+0x8e>
	...

08001590 <_printf_i>:
 8001590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001594:	7e0f      	ldrb	r7, [r1, #24]
 8001596:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001598:	2f78      	cmp	r7, #120	@ 0x78
 800159a:	4691      	mov	r9, r2
 800159c:	4680      	mov	r8, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	469a      	mov	sl, r3
 80015a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80015a6:	d807      	bhi.n	80015b8 <_printf_i+0x28>
 80015a8:	2f62      	cmp	r7, #98	@ 0x62
 80015aa:	d80a      	bhi.n	80015c2 <_printf_i+0x32>
 80015ac:	2f00      	cmp	r7, #0
 80015ae:	f000 80d1 	beq.w	8001754 <_printf_i+0x1c4>
 80015b2:	2f58      	cmp	r7, #88	@ 0x58
 80015b4:	f000 80b8 	beq.w	8001728 <_printf_i+0x198>
 80015b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80015bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80015c0:	e03a      	b.n	8001638 <_printf_i+0xa8>
 80015c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80015c6:	2b15      	cmp	r3, #21
 80015c8:	d8f6      	bhi.n	80015b8 <_printf_i+0x28>
 80015ca:	a101      	add	r1, pc, #4	@ (adr r1, 80015d0 <_printf_i+0x40>)
 80015cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80015d0:	08001629 	.word	0x08001629
 80015d4:	0800163d 	.word	0x0800163d
 80015d8:	080015b9 	.word	0x080015b9
 80015dc:	080015b9 	.word	0x080015b9
 80015e0:	080015b9 	.word	0x080015b9
 80015e4:	080015b9 	.word	0x080015b9
 80015e8:	0800163d 	.word	0x0800163d
 80015ec:	080015b9 	.word	0x080015b9
 80015f0:	080015b9 	.word	0x080015b9
 80015f4:	080015b9 	.word	0x080015b9
 80015f8:	080015b9 	.word	0x080015b9
 80015fc:	0800173b 	.word	0x0800173b
 8001600:	08001667 	.word	0x08001667
 8001604:	080016f5 	.word	0x080016f5
 8001608:	080015b9 	.word	0x080015b9
 800160c:	080015b9 	.word	0x080015b9
 8001610:	0800175d 	.word	0x0800175d
 8001614:	080015b9 	.word	0x080015b9
 8001618:	08001667 	.word	0x08001667
 800161c:	080015b9 	.word	0x080015b9
 8001620:	080015b9 	.word	0x080015b9
 8001624:	080016fd 	.word	0x080016fd
 8001628:	6833      	ldr	r3, [r6, #0]
 800162a:	1d1a      	adds	r2, r3, #4
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6032      	str	r2, [r6, #0]
 8001630:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001634:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001638:	2301      	movs	r3, #1
 800163a:	e09c      	b.n	8001776 <_printf_i+0x1e6>
 800163c:	6833      	ldr	r3, [r6, #0]
 800163e:	6820      	ldr	r0, [r4, #0]
 8001640:	1d19      	adds	r1, r3, #4
 8001642:	6031      	str	r1, [r6, #0]
 8001644:	0606      	lsls	r6, r0, #24
 8001646:	d501      	bpl.n	800164c <_printf_i+0xbc>
 8001648:	681d      	ldr	r5, [r3, #0]
 800164a:	e003      	b.n	8001654 <_printf_i+0xc4>
 800164c:	0645      	lsls	r5, r0, #25
 800164e:	d5fb      	bpl.n	8001648 <_printf_i+0xb8>
 8001650:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001654:	2d00      	cmp	r5, #0
 8001656:	da03      	bge.n	8001660 <_printf_i+0xd0>
 8001658:	232d      	movs	r3, #45	@ 0x2d
 800165a:	426d      	negs	r5, r5
 800165c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001660:	4858      	ldr	r0, [pc, #352]	@ (80017c4 <_printf_i+0x234>)
 8001662:	230a      	movs	r3, #10
 8001664:	e011      	b.n	800168a <_printf_i+0xfa>
 8001666:	6821      	ldr	r1, [r4, #0]
 8001668:	6833      	ldr	r3, [r6, #0]
 800166a:	0608      	lsls	r0, r1, #24
 800166c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001670:	d402      	bmi.n	8001678 <_printf_i+0xe8>
 8001672:	0649      	lsls	r1, r1, #25
 8001674:	bf48      	it	mi
 8001676:	b2ad      	uxthmi	r5, r5
 8001678:	2f6f      	cmp	r7, #111	@ 0x6f
 800167a:	4852      	ldr	r0, [pc, #328]	@ (80017c4 <_printf_i+0x234>)
 800167c:	6033      	str	r3, [r6, #0]
 800167e:	bf14      	ite	ne
 8001680:	230a      	movne	r3, #10
 8001682:	2308      	moveq	r3, #8
 8001684:	2100      	movs	r1, #0
 8001686:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800168a:	6866      	ldr	r6, [r4, #4]
 800168c:	60a6      	str	r6, [r4, #8]
 800168e:	2e00      	cmp	r6, #0
 8001690:	db05      	blt.n	800169e <_printf_i+0x10e>
 8001692:	6821      	ldr	r1, [r4, #0]
 8001694:	432e      	orrs	r6, r5
 8001696:	f021 0104 	bic.w	r1, r1, #4
 800169a:	6021      	str	r1, [r4, #0]
 800169c:	d04b      	beq.n	8001736 <_printf_i+0x1a6>
 800169e:	4616      	mov	r6, r2
 80016a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80016a4:	fb03 5711 	mls	r7, r3, r1, r5
 80016a8:	5dc7      	ldrb	r7, [r0, r7]
 80016aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80016ae:	462f      	mov	r7, r5
 80016b0:	42bb      	cmp	r3, r7
 80016b2:	460d      	mov	r5, r1
 80016b4:	d9f4      	bls.n	80016a0 <_printf_i+0x110>
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d10b      	bne.n	80016d2 <_printf_i+0x142>
 80016ba:	6823      	ldr	r3, [r4, #0]
 80016bc:	07df      	lsls	r7, r3, #31
 80016be:	d508      	bpl.n	80016d2 <_printf_i+0x142>
 80016c0:	6923      	ldr	r3, [r4, #16]
 80016c2:	6861      	ldr	r1, [r4, #4]
 80016c4:	4299      	cmp	r1, r3
 80016c6:	bfde      	ittt	le
 80016c8:	2330      	movle	r3, #48	@ 0x30
 80016ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80016ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 80016d2:	1b92      	subs	r2, r2, r6
 80016d4:	6122      	str	r2, [r4, #16]
 80016d6:	f8cd a000 	str.w	sl, [sp]
 80016da:	464b      	mov	r3, r9
 80016dc:	aa03      	add	r2, sp, #12
 80016de:	4621      	mov	r1, r4
 80016e0:	4640      	mov	r0, r8
 80016e2:	f7ff fee7 	bl	80014b4 <_printf_common>
 80016e6:	3001      	adds	r0, #1
 80016e8:	d14a      	bne.n	8001780 <_printf_i+0x1f0>
 80016ea:	f04f 30ff 	mov.w	r0, #4294967295
 80016ee:	b004      	add	sp, #16
 80016f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016f4:	6823      	ldr	r3, [r4, #0]
 80016f6:	f043 0320 	orr.w	r3, r3, #32
 80016fa:	6023      	str	r3, [r4, #0]
 80016fc:	4832      	ldr	r0, [pc, #200]	@ (80017c8 <_printf_i+0x238>)
 80016fe:	2778      	movs	r7, #120	@ 0x78
 8001700:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001704:	6823      	ldr	r3, [r4, #0]
 8001706:	6831      	ldr	r1, [r6, #0]
 8001708:	061f      	lsls	r7, r3, #24
 800170a:	f851 5b04 	ldr.w	r5, [r1], #4
 800170e:	d402      	bmi.n	8001716 <_printf_i+0x186>
 8001710:	065f      	lsls	r7, r3, #25
 8001712:	bf48      	it	mi
 8001714:	b2ad      	uxthmi	r5, r5
 8001716:	6031      	str	r1, [r6, #0]
 8001718:	07d9      	lsls	r1, r3, #31
 800171a:	bf44      	itt	mi
 800171c:	f043 0320 	orrmi.w	r3, r3, #32
 8001720:	6023      	strmi	r3, [r4, #0]
 8001722:	b11d      	cbz	r5, 800172c <_printf_i+0x19c>
 8001724:	2310      	movs	r3, #16
 8001726:	e7ad      	b.n	8001684 <_printf_i+0xf4>
 8001728:	4826      	ldr	r0, [pc, #152]	@ (80017c4 <_printf_i+0x234>)
 800172a:	e7e9      	b.n	8001700 <_printf_i+0x170>
 800172c:	6823      	ldr	r3, [r4, #0]
 800172e:	f023 0320 	bic.w	r3, r3, #32
 8001732:	6023      	str	r3, [r4, #0]
 8001734:	e7f6      	b.n	8001724 <_printf_i+0x194>
 8001736:	4616      	mov	r6, r2
 8001738:	e7bd      	b.n	80016b6 <_printf_i+0x126>
 800173a:	6833      	ldr	r3, [r6, #0]
 800173c:	6825      	ldr	r5, [r4, #0]
 800173e:	6961      	ldr	r1, [r4, #20]
 8001740:	1d18      	adds	r0, r3, #4
 8001742:	6030      	str	r0, [r6, #0]
 8001744:	062e      	lsls	r6, r5, #24
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	d501      	bpl.n	800174e <_printf_i+0x1be>
 800174a:	6019      	str	r1, [r3, #0]
 800174c:	e002      	b.n	8001754 <_printf_i+0x1c4>
 800174e:	0668      	lsls	r0, r5, #25
 8001750:	d5fb      	bpl.n	800174a <_printf_i+0x1ba>
 8001752:	8019      	strh	r1, [r3, #0]
 8001754:	2300      	movs	r3, #0
 8001756:	6123      	str	r3, [r4, #16]
 8001758:	4616      	mov	r6, r2
 800175a:	e7bc      	b.n	80016d6 <_printf_i+0x146>
 800175c:	6833      	ldr	r3, [r6, #0]
 800175e:	1d1a      	adds	r2, r3, #4
 8001760:	6032      	str	r2, [r6, #0]
 8001762:	681e      	ldr	r6, [r3, #0]
 8001764:	6862      	ldr	r2, [r4, #4]
 8001766:	2100      	movs	r1, #0
 8001768:	4630      	mov	r0, r6
 800176a:	f7fe fd41 	bl	80001f0 <memchr>
 800176e:	b108      	cbz	r0, 8001774 <_printf_i+0x1e4>
 8001770:	1b80      	subs	r0, r0, r6
 8001772:	6060      	str	r0, [r4, #4]
 8001774:	6863      	ldr	r3, [r4, #4]
 8001776:	6123      	str	r3, [r4, #16]
 8001778:	2300      	movs	r3, #0
 800177a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800177e:	e7aa      	b.n	80016d6 <_printf_i+0x146>
 8001780:	6923      	ldr	r3, [r4, #16]
 8001782:	4632      	mov	r2, r6
 8001784:	4649      	mov	r1, r9
 8001786:	4640      	mov	r0, r8
 8001788:	47d0      	blx	sl
 800178a:	3001      	adds	r0, #1
 800178c:	d0ad      	beq.n	80016ea <_printf_i+0x15a>
 800178e:	6823      	ldr	r3, [r4, #0]
 8001790:	079b      	lsls	r3, r3, #30
 8001792:	d413      	bmi.n	80017bc <_printf_i+0x22c>
 8001794:	68e0      	ldr	r0, [r4, #12]
 8001796:	9b03      	ldr	r3, [sp, #12]
 8001798:	4298      	cmp	r0, r3
 800179a:	bfb8      	it	lt
 800179c:	4618      	movlt	r0, r3
 800179e:	e7a6      	b.n	80016ee <_printf_i+0x15e>
 80017a0:	2301      	movs	r3, #1
 80017a2:	4632      	mov	r2, r6
 80017a4:	4649      	mov	r1, r9
 80017a6:	4640      	mov	r0, r8
 80017a8:	47d0      	blx	sl
 80017aa:	3001      	adds	r0, #1
 80017ac:	d09d      	beq.n	80016ea <_printf_i+0x15a>
 80017ae:	3501      	adds	r5, #1
 80017b0:	68e3      	ldr	r3, [r4, #12]
 80017b2:	9903      	ldr	r1, [sp, #12]
 80017b4:	1a5b      	subs	r3, r3, r1
 80017b6:	42ab      	cmp	r3, r5
 80017b8:	dcf2      	bgt.n	80017a0 <_printf_i+0x210>
 80017ba:	e7eb      	b.n	8001794 <_printf_i+0x204>
 80017bc:	2500      	movs	r5, #0
 80017be:	f104 0619 	add.w	r6, r4, #25
 80017c2:	e7f5      	b.n	80017b0 <_printf_i+0x220>
 80017c4:	08001a80 	.word	0x08001a80
 80017c8:	08001a91 	.word	0x08001a91

080017cc <memmove>:
 80017cc:	4288      	cmp	r0, r1
 80017ce:	b510      	push	{r4, lr}
 80017d0:	eb01 0402 	add.w	r4, r1, r2
 80017d4:	d902      	bls.n	80017dc <memmove+0x10>
 80017d6:	4284      	cmp	r4, r0
 80017d8:	4623      	mov	r3, r4
 80017da:	d807      	bhi.n	80017ec <memmove+0x20>
 80017dc:	1e43      	subs	r3, r0, #1
 80017de:	42a1      	cmp	r1, r4
 80017e0:	d008      	beq.n	80017f4 <memmove+0x28>
 80017e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80017e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80017ea:	e7f8      	b.n	80017de <memmove+0x12>
 80017ec:	4402      	add	r2, r0
 80017ee:	4601      	mov	r1, r0
 80017f0:	428a      	cmp	r2, r1
 80017f2:	d100      	bne.n	80017f6 <memmove+0x2a>
 80017f4:	bd10      	pop	{r4, pc}
 80017f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80017fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80017fe:	e7f7      	b.n	80017f0 <memmove+0x24>

08001800 <_sbrk_r>:
 8001800:	b538      	push	{r3, r4, r5, lr}
 8001802:	4d06      	ldr	r5, [pc, #24]	@ (800181c <_sbrk_r+0x1c>)
 8001804:	2300      	movs	r3, #0
 8001806:	4604      	mov	r4, r0
 8001808:	4608      	mov	r0, r1
 800180a:	602b      	str	r3, [r5, #0]
 800180c:	f000 f84c 	bl	80018a8 <_sbrk>
 8001810:	1c43      	adds	r3, r0, #1
 8001812:	d102      	bne.n	800181a <_sbrk_r+0x1a>
 8001814:	682b      	ldr	r3, [r5, #0]
 8001816:	b103      	cbz	r3, 800181a <_sbrk_r+0x1a>
 8001818:	6023      	str	r3, [r4, #0]
 800181a:	bd38      	pop	{r3, r4, r5, pc}
 800181c:	200001c0 	.word	0x200001c0

08001820 <memcpy>:
 8001820:	440a      	add	r2, r1
 8001822:	4291      	cmp	r1, r2
 8001824:	f100 33ff 	add.w	r3, r0, #4294967295
 8001828:	d100      	bne.n	800182c <memcpy+0xc>
 800182a:	4770      	bx	lr
 800182c:	b510      	push	{r4, lr}
 800182e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001832:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001836:	4291      	cmp	r1, r2
 8001838:	d1f9      	bne.n	800182e <memcpy+0xe>
 800183a:	bd10      	pop	{r4, pc}

0800183c <_realloc_r>:
 800183c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001840:	4607      	mov	r7, r0
 8001842:	4614      	mov	r4, r2
 8001844:	460d      	mov	r5, r1
 8001846:	b921      	cbnz	r1, 8001852 <_realloc_r+0x16>
 8001848:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800184c:	4611      	mov	r1, r2
 800184e:	f7ff bc4d 	b.w	80010ec <_malloc_r>
 8001852:	b92a      	cbnz	r2, 8001860 <_realloc_r+0x24>
 8001854:	f7ff fbde 	bl	8001014 <_free_r>
 8001858:	4625      	mov	r5, r4
 800185a:	4628      	mov	r0, r5
 800185c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001860:	f000 f81a 	bl	8001898 <_malloc_usable_size_r>
 8001864:	4284      	cmp	r4, r0
 8001866:	4606      	mov	r6, r0
 8001868:	d802      	bhi.n	8001870 <_realloc_r+0x34>
 800186a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800186e:	d8f4      	bhi.n	800185a <_realloc_r+0x1e>
 8001870:	4621      	mov	r1, r4
 8001872:	4638      	mov	r0, r7
 8001874:	f7ff fc3a 	bl	80010ec <_malloc_r>
 8001878:	4680      	mov	r8, r0
 800187a:	b908      	cbnz	r0, 8001880 <_realloc_r+0x44>
 800187c:	4645      	mov	r5, r8
 800187e:	e7ec      	b.n	800185a <_realloc_r+0x1e>
 8001880:	42b4      	cmp	r4, r6
 8001882:	4622      	mov	r2, r4
 8001884:	4629      	mov	r1, r5
 8001886:	bf28      	it	cs
 8001888:	4632      	movcs	r2, r6
 800188a:	f7ff ffc9 	bl	8001820 <memcpy>
 800188e:	4629      	mov	r1, r5
 8001890:	4638      	mov	r0, r7
 8001892:	f7ff fbbf 	bl	8001014 <_free_r>
 8001896:	e7f1      	b.n	800187c <_realloc_r+0x40>

08001898 <_malloc_usable_size_r>:
 8001898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800189c:	1f18      	subs	r0, r3, #4
 800189e:	2b00      	cmp	r3, #0
 80018a0:	bfbc      	itt	lt
 80018a2:	580b      	ldrlt	r3, [r1, r0]
 80018a4:	18c0      	addlt	r0, r0, r3
 80018a6:	4770      	bx	lr

080018a8 <_sbrk>:
 80018a8:	4a04      	ldr	r2, [pc, #16]	@ (80018bc <_sbrk+0x14>)
 80018aa:	6811      	ldr	r1, [r2, #0]
 80018ac:	4603      	mov	r3, r0
 80018ae:	b909      	cbnz	r1, 80018b4 <_sbrk+0xc>
 80018b0:	4903      	ldr	r1, [pc, #12]	@ (80018c0 <_sbrk+0x18>)
 80018b2:	6011      	str	r1, [r2, #0]
 80018b4:	6810      	ldr	r0, [r2, #0]
 80018b6:	4403      	add	r3, r0
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	4770      	bx	lr
 80018bc:	200001d0 	.word	0x200001d0
 80018c0:	200001d8 	.word	0x200001d8

080018c4 <_init>:
 80018c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018c6:	bf00      	nop
 80018c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ca:	bc08      	pop	{r3}
 80018cc:	469e      	mov	lr, r3
 80018ce:	4770      	bx	lr

080018d0 <_fini>:
 80018d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018d2:	bf00      	nop
 80018d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018d6:	bc08      	pop	{r3}
 80018d8:	469e      	mov	lr, r3
 80018da:	4770      	bx	lr
